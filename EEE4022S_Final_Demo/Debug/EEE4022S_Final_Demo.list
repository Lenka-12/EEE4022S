
EEE4022S_Final_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8d4  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800bacc  0800bacc  0000cacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb38  0800bb38  0000d168  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb38  0800bb38  0000cb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb40  0800bb40  0000d168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb40  0800bb40  0000cb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb44  0800bb44  0000cb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800bb48  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e64  20000168  0800bcb0  0000d168  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20009fcc  0800bcb0  0000dfcc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d733  00000000  00000000  0000d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004677  00000000  00000000  0002a8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  0002ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001393  00000000  00000000  000308a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2aa  00000000  00000000  00031c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d66  00000000  00000000  0005dee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001048cd  00000000  00000000  0007fc4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184518  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e34  00000000  00000000  0018455c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0018b390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000168 	.word	0x20000168
 8000214:	00000000 	.word	0x00000000
 8000218:	0800bab4 	.word	0x0800bab4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000016c 	.word	0x2000016c
 8000234:	0800bab4 	.word	0x0800bab4

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <__aeabi_uldivmod>:
 800024c:	b953      	cbnz	r3, 8000264 <__aeabi_uldivmod+0x18>
 800024e:	b94a      	cbnz	r2, 8000264 <__aeabi_uldivmod+0x18>
 8000250:	2900      	cmp	r1, #0
 8000252:	bf08      	it	eq
 8000254:	2800      	cmpeq	r0, #0
 8000256:	bf1c      	itt	ne
 8000258:	f04f 31ff 	movne.w	r1, #4294967295
 800025c:	f04f 30ff 	movne.w	r0, #4294967295
 8000260:	f000 b96a 	b.w	8000538 <__aeabi_idiv0>
 8000264:	f1ad 0c08 	sub.w	ip, sp, #8
 8000268:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800026c:	f000 f806 	bl	800027c <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4770      	bx	lr

0800027c <__udivmoddi4>:
 800027c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000280:	9d08      	ldr	r5, [sp, #32]
 8000282:	460c      	mov	r4, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14e      	bne.n	8000326 <__udivmoddi4+0xaa>
 8000288:	4694      	mov	ip, r2
 800028a:	458c      	cmp	ip, r1
 800028c:	4686      	mov	lr, r0
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	d962      	bls.n	800035a <__udivmoddi4+0xde>
 8000294:	b14a      	cbz	r2, 80002aa <__udivmoddi4+0x2e>
 8000296:	f1c2 0320 	rsb	r3, r2, #32
 800029a:	4091      	lsls	r1, r2
 800029c:	fa20 f303 	lsr.w	r3, r0, r3
 80002a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a4:	4319      	orrs	r1, r3
 80002a6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f f68c 	uxth.w	r6, ip
 80002b2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ba:	fb07 1114 	mls	r1, r7, r4, r1
 80002be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c2:	fb04 f106 	mul.w	r1, r4, r6
 80002c6:	4299      	cmp	r1, r3
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x64>
 80002ca:	eb1c 0303 	adds.w	r3, ip, r3
 80002ce:	f104 30ff 	add.w	r0, r4, #4294967295
 80002d2:	f080 8112 	bcs.w	80004fa <__udivmoddi4+0x27e>
 80002d6:	4299      	cmp	r1, r3
 80002d8:	f240 810f 	bls.w	80004fa <__udivmoddi4+0x27e>
 80002dc:	3c02      	subs	r4, #2
 80002de:	4463      	add	r3, ip
 80002e0:	1a59      	subs	r1, r3, r1
 80002e2:	fa1f f38e 	uxth.w	r3, lr
 80002e6:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ea:	fb07 1110 	mls	r1, r7, r0, r1
 80002ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f2:	fb00 f606 	mul.w	r6, r0, r6
 80002f6:	429e      	cmp	r6, r3
 80002f8:	d90a      	bls.n	8000310 <__udivmoddi4+0x94>
 80002fa:	eb1c 0303 	adds.w	r3, ip, r3
 80002fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000302:	f080 80fc 	bcs.w	80004fe <__udivmoddi4+0x282>
 8000306:	429e      	cmp	r6, r3
 8000308:	f240 80f9 	bls.w	80004fe <__udivmoddi4+0x282>
 800030c:	4463      	add	r3, ip
 800030e:	3802      	subs	r0, #2
 8000310:	1b9b      	subs	r3, r3, r6
 8000312:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000316:	2100      	movs	r1, #0
 8000318:	b11d      	cbz	r5, 8000322 <__udivmoddi4+0xa6>
 800031a:	40d3      	lsrs	r3, r2
 800031c:	2200      	movs	r2, #0
 800031e:	e9c5 3200 	strd	r3, r2, [r5]
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d905      	bls.n	8000336 <__udivmoddi4+0xba>
 800032a:	b10d      	cbz	r5, 8000330 <__udivmoddi4+0xb4>
 800032c:	e9c5 0100 	strd	r0, r1, [r5]
 8000330:	2100      	movs	r1, #0
 8000332:	4608      	mov	r0, r1
 8000334:	e7f5      	b.n	8000322 <__udivmoddi4+0xa6>
 8000336:	fab3 f183 	clz	r1, r3
 800033a:	2900      	cmp	r1, #0
 800033c:	d146      	bne.n	80003cc <__udivmoddi4+0x150>
 800033e:	42a3      	cmp	r3, r4
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xcc>
 8000342:	4290      	cmp	r0, r2
 8000344:	f0c0 80f0 	bcc.w	8000528 <__udivmoddi4+0x2ac>
 8000348:	1a86      	subs	r6, r0, r2
 800034a:	eb64 0303 	sbc.w	r3, r4, r3
 800034e:	2001      	movs	r0, #1
 8000350:	2d00      	cmp	r5, #0
 8000352:	d0e6      	beq.n	8000322 <__udivmoddi4+0xa6>
 8000354:	e9c5 6300 	strd	r6, r3, [r5]
 8000358:	e7e3      	b.n	8000322 <__udivmoddi4+0xa6>
 800035a:	2a00      	cmp	r2, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x204>
 8000360:	eba1 040c 	sub.w	r4, r1, ip
 8000364:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000368:	fa1f f78c 	uxth.w	r7, ip
 800036c:	2101      	movs	r1, #1
 800036e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000372:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000376:	fb08 4416 	mls	r4, r8, r6, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb07 f006 	mul.w	r0, r7, r6
 8000382:	4298      	cmp	r0, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x11c>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f106 34ff 	add.w	r4, r6, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x11a>
 8000390:	4298      	cmp	r0, r3
 8000392:	f200 80cd 	bhi.w	8000530 <__udivmoddi4+0x2b4>
 8000396:	4626      	mov	r6, r4
 8000398:	1a1c      	subs	r4, r3, r0
 800039a:	fa1f f38e 	uxth.w	r3, lr
 800039e:	fbb4 f0f8 	udiv	r0, r4, r8
 80003a2:	fb08 4410 	mls	r4, r8, r0, r4
 80003a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003aa:	fb00 f707 	mul.w	r7, r0, r7
 80003ae:	429f      	cmp	r7, r3
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x148>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x146>
 80003bc:	429f      	cmp	r7, r3
 80003be:	f200 80b0 	bhi.w	8000522 <__udivmoddi4+0x2a6>
 80003c2:	4620      	mov	r0, r4
 80003c4:	1bdb      	subs	r3, r3, r7
 80003c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0x9c>
 80003cc:	f1c1 0620 	rsb	r6, r1, #32
 80003d0:	408b      	lsls	r3, r1
 80003d2:	fa22 f706 	lsr.w	r7, r2, r6
 80003d6:	431f      	orrs	r7, r3
 80003d8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003dc:	fa04 f301 	lsl.w	r3, r4, r1
 80003e0:	ea43 030c 	orr.w	r3, r3, ip
 80003e4:	40f4      	lsrs	r4, r6
 80003e6:	fa00 f801 	lsl.w	r8, r0, r1
 80003ea:	0c38      	lsrs	r0, r7, #16
 80003ec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003f0:	fbb4 fef0 	udiv	lr, r4, r0
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fb00 441e 	mls	r4, r0, lr, r4
 80003fc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000400:	fb0e f90c 	mul.w	r9, lr, ip
 8000404:	45a1      	cmp	r9, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x1a6>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000412:	f080 8084 	bcs.w	800051e <__udivmoddi4+0x2a2>
 8000416:	45a1      	cmp	r9, r4
 8000418:	f240 8081 	bls.w	800051e <__udivmoddi4+0x2a2>
 800041c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000420:	443c      	add	r4, r7
 8000422:	eba4 0409 	sub.w	r4, r4, r9
 8000426:	fa1f f983 	uxth.w	r9, r3
 800042a:	fbb4 f3f0 	udiv	r3, r4, r0
 800042e:	fb00 4413 	mls	r4, r0, r3, r4
 8000432:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000436:	fb03 fc0c 	mul.w	ip, r3, ip
 800043a:	45a4      	cmp	ip, r4
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1d2>
 800043e:	193c      	adds	r4, r7, r4
 8000440:	f103 30ff 	add.w	r0, r3, #4294967295
 8000444:	d267      	bcs.n	8000516 <__udivmoddi4+0x29a>
 8000446:	45a4      	cmp	ip, r4
 8000448:	d965      	bls.n	8000516 <__udivmoddi4+0x29a>
 800044a:	3b02      	subs	r3, #2
 800044c:	443c      	add	r4, r7
 800044e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000452:	fba0 9302 	umull	r9, r3, r0, r2
 8000456:	eba4 040c 	sub.w	r4, r4, ip
 800045a:	429c      	cmp	r4, r3
 800045c:	46ce      	mov	lr, r9
 800045e:	469c      	mov	ip, r3
 8000460:	d351      	bcc.n	8000506 <__udivmoddi4+0x28a>
 8000462:	d04e      	beq.n	8000502 <__udivmoddi4+0x286>
 8000464:	b155      	cbz	r5, 800047c <__udivmoddi4+0x200>
 8000466:	ebb8 030e 	subs.w	r3, r8, lr
 800046a:	eb64 040c 	sbc.w	r4, r4, ip
 800046e:	fa04 f606 	lsl.w	r6, r4, r6
 8000472:	40cb      	lsrs	r3, r1
 8000474:	431e      	orrs	r6, r3
 8000476:	40cc      	lsrs	r4, r1
 8000478:	e9c5 6400 	strd	r6, r4, [r5]
 800047c:	2100      	movs	r1, #0
 800047e:	e750      	b.n	8000322 <__udivmoddi4+0xa6>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f103 	lsr.w	r1, r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa24 f303 	lsr.w	r3, r4, r3
 8000490:	4094      	lsls	r4, r2
 8000492:	430c      	orrs	r4, r1
 8000494:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000498:	fa00 fe02 	lsl.w	lr, r0, r2
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a4:	fb08 3110 	mls	r1, r8, r0, r3
 80004a8:	0c23      	lsrs	r3, r4, #16
 80004aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ae:	fb00 f107 	mul.w	r1, r0, r7
 80004b2:	4299      	cmp	r1, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x24c>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 36ff 	add.w	r6, r0, #4294967295
 80004be:	d22c      	bcs.n	800051a <__udivmoddi4+0x29e>
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d92a      	bls.n	800051a <__udivmoddi4+0x29e>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1a5b      	subs	r3, r3, r1
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb3 f1f8 	udiv	r1, r3, r8
 80004d0:	fb08 3311 	mls	r3, r8, r1, r3
 80004d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d8:	fb01 f307 	mul.w	r3, r1, r7
 80004dc:	42a3      	cmp	r3, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x276>
 80004e0:	eb1c 0404 	adds.w	r4, ip, r4
 80004e4:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e8:	d213      	bcs.n	8000512 <__udivmoddi4+0x296>
 80004ea:	42a3      	cmp	r3, r4
 80004ec:	d911      	bls.n	8000512 <__udivmoddi4+0x296>
 80004ee:	3902      	subs	r1, #2
 80004f0:	4464      	add	r4, ip
 80004f2:	1ae4      	subs	r4, r4, r3
 80004f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f8:	e739      	b.n	800036e <__udivmoddi4+0xf2>
 80004fa:	4604      	mov	r4, r0
 80004fc:	e6f0      	b.n	80002e0 <__udivmoddi4+0x64>
 80004fe:	4608      	mov	r0, r1
 8000500:	e706      	b.n	8000310 <__udivmoddi4+0x94>
 8000502:	45c8      	cmp	r8, r9
 8000504:	d2ae      	bcs.n	8000464 <__udivmoddi4+0x1e8>
 8000506:	ebb9 0e02 	subs.w	lr, r9, r2
 800050a:	eb63 0c07 	sbc.w	ip, r3, r7
 800050e:	3801      	subs	r0, #1
 8000510:	e7a8      	b.n	8000464 <__udivmoddi4+0x1e8>
 8000512:	4631      	mov	r1, r6
 8000514:	e7ed      	b.n	80004f2 <__udivmoddi4+0x276>
 8000516:	4603      	mov	r3, r0
 8000518:	e799      	b.n	800044e <__udivmoddi4+0x1d2>
 800051a:	4630      	mov	r0, r6
 800051c:	e7d4      	b.n	80004c8 <__udivmoddi4+0x24c>
 800051e:	46d6      	mov	lr, sl
 8000520:	e77f      	b.n	8000422 <__udivmoddi4+0x1a6>
 8000522:	4463      	add	r3, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e74d      	b.n	80003c4 <__udivmoddi4+0x148>
 8000528:	4606      	mov	r6, r0
 800052a:	4623      	mov	r3, r4
 800052c:	4608      	mov	r0, r1
 800052e:	e70f      	b.n	8000350 <__udivmoddi4+0xd4>
 8000530:	3e02      	subs	r6, #2
 8000532:	4463      	add	r3, ip
 8000534:	e730      	b.n	8000398 <__udivmoddi4+0x11c>
 8000536:	bf00      	nop

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <Audio_ADC_Init>:


#include "ADAU1978.h"
extern I2C_HandleTypeDef hi2c1;
static uint8_t gain_code(float gain);
HAL_StatusTypeDef Audio_ADC_Init(ADAU1978_t* pHandle){
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	@ 0x30
 8000540:	af04      	add	r7, sp, #16
 8000542:	6078      	str	r0, [r7, #4]
	unsigned char buf[11];
	buf[0] = 0x51;
 8000544:	2351      	movs	r3, #81	@ 0x51
 8000546:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef xStatus;
	xStatus = HAL_I2C_Mem_Write(&hi2c1, ADAU1978_ADDR<<1, PLL_CONTROL_REG, 1, buf,1, 1000);
 8000548:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800054c:	9302      	str	r3, [sp, #8]
 800054e:	2301      	movs	r3, #1
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2301      	movs	r3, #1
 800055a:	2201      	movs	r2, #1
 800055c:	21e2      	movs	r1, #226	@ 0xe2
 800055e:	4834      	ldr	r0, [pc, #208]	@ (8000630 <Audio_ADC_Init+0xf4>)
 8000560:	f002 fedc 	bl	800331c <HAL_I2C_Mem_Write>
 8000564:	4603      	mov	r3, r0
 8000566:	76fb      	strb	r3, [r7, #27]
	if (xStatus != HAL_OK){
 8000568:	7efb      	ldrb	r3, [r7, #27]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <Audio_ADC_Init+0x36>
		return xStatus;
 800056e:	7efb      	ldrb	r3, [r7, #27]
 8000570:	e059      	b.n	8000626 <Audio_ADC_Init+0xea>
	}
	HAL_Delay(100);
 8000572:	2064      	movs	r0, #100	@ 0x64
 8000574:	f001 f920 	bl	80017b8 <HAL_Delay>

	// config others
	buf[0] = pHandle->block_power_sai;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	733b      	strb	r3, [r7, #12]
	buf[1] = pHandle->sai_ctrl0;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	785b      	ldrb	r3, [r3, #1]
 8000582:	737b      	strb	r3, [r7, #13]
	buf[2] = pHandle->sai_ctrl1;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	73bb      	strb	r3, [r7, #14]
	buf[3] = pHandle->sai_cmap12;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	78db      	ldrb	r3, [r3, #3]
 800058e:	73fb      	strb	r3, [r7, #15]
	buf[4] = pHandle->sai_cmap34;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	743b      	strb	r3, [r7, #16]
	buf[5] = pHandle->sai_overtemp;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	795b      	ldrb	r3, [r3, #5]
 800059a:	747b      	strb	r3, [r7, #17]

	// get gain code
	uint8_t gain_bin = gain_code(pHandle->gain_db);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	edd3 7a02 	vldr	s15, [r3, #8]
 80005a2:	eeb0 0a67 	vmov.f32	s0, s15
 80005a6:	f000 f86b 	bl	8000680 <gain_code>
 80005aa:	4603      	mov	r3, r0
 80005ac:	76bb      	strb	r3, [r7, #26]
	for (int i = 6; i < 10; i++){
 80005ae:	2306      	movs	r3, #6
 80005b0:	61fb      	str	r3, [r7, #28]
 80005b2:	e008      	b.n	80005c6 <Audio_ADC_Init+0x8a>
		buf[i] = gain_bin;
 80005b4:	f107 020c 	add.w	r2, r7, #12
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	4413      	add	r3, r2
 80005bc:	7eba      	ldrb	r2, [r7, #26]
 80005be:	701a      	strb	r2, [r3, #0]
	for (int i = 6; i < 10; i++){
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	3301      	adds	r3, #1
 80005c4:	61fb      	str	r3, [r7, #28]
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	2b09      	cmp	r3, #9
 80005ca:	ddf3      	ble.n	80005b4 <Audio_ADC_Init+0x78>
	}
	buf[10] = pHandle->misc_control;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	799b      	ldrb	r3, [r3, #6]
 80005d0:	75bb      	strb	r3, [r7, #22]
	xStatus = HAL_I2C_Mem_Write(&hi2c1, ADAU1978_ADDR<<1,BLOCK_POWER_SAI_REG, 1, buf,11, 1000);
 80005d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d6:	9302      	str	r3, [sp, #8]
 80005d8:	230b      	movs	r3, #11
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	2204      	movs	r2, #4
 80005e6:	21e2      	movs	r1, #226	@ 0xe2
 80005e8:	4811      	ldr	r0, [pc, #68]	@ (8000630 <Audio_ADC_Init+0xf4>)
 80005ea:	f002 fe97 	bl	800331c <HAL_I2C_Mem_Write>
 80005ee:	4603      	mov	r3, r0
 80005f0:	76fb      	strb	r3, [r7, #27]
	if (xStatus != HAL_OK){
 80005f2:	7efb      	ldrb	r3, [r7, #27]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <Audio_ADC_Init+0xc0>
		return xStatus;
 80005f8:	7efb      	ldrb	r3, [r7, #27]
 80005fa:	e014      	b.n	8000626 <Audio_ADC_Init+0xea>
	}
	HAL_Delay(100);
 80005fc:	2064      	movs	r0, #100	@ 0x64
 80005fe:	f001 f8db 	bl	80017b8 <HAL_Delay>

	// DC calibration and HPF
	buf[0] = pHandle->dc_hpf_cal;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	79db      	ldrb	r3, [r3, #7]
 8000606:	733b      	strb	r3, [r7, #12]

	return HAL_I2C_Mem_Write(&hi2c1, ADAU1978_ADDR<<1, DC_HPF_CAL_REG, 1, buf, 1, 1000);
 8000608:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060c:	9302      	str	r3, [sp, #8]
 800060e:	2301      	movs	r3, #1
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2301      	movs	r3, #1
 800061a:	221a      	movs	r2, #26
 800061c:	21e2      	movs	r1, #226	@ 0xe2
 800061e:	4804      	ldr	r0, [pc, #16]	@ (8000630 <Audio_ADC_Init+0xf4>)
 8000620:	f002 fe7c 	bl	800331c <HAL_I2C_Mem_Write>
 8000624:	4603      	mov	r3, r0


}
 8000626:	4618      	mov	r0, r3
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000022c 	.word	0x2000022c

08000634 <Audio_ADC_StructInit>:
	HAL_I2C_Mem_Read(&hi2c1, ADAU1978_ADDR<<1, ASDC_CLIP_REG, 1, &reg_value, 1, 1000);

	return reg_value;

}
void Audio_ADC_StructInit(ADAU1978_t* pHandle){
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	// power off all adcs
	pHandle->block_power_sai = 0x30;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2230      	movs	r2, #48	@ 0x30
 8000640:	701a      	strb	r2, [r3, #0]
	pHandle->sai_ctrl0       = 0x02;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2202      	movs	r2, #2
 8000646:	705a      	strb	r2, [r3, #1]
	pHandle->sai_ctrl1       = 0x00;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	709a      	strb	r2, [r3, #2]
	pHandle->sai_cmap12      = SAI_CMAP12_RST_VAL;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2210      	movs	r2, #16
 8000652:	70da      	strb	r2, [r3, #3]
	pHandle->sai_cmap34      = SAI_CMAP34_RST_VAL;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2232      	movs	r2, #50	@ 0x32
 8000658:	711a      	strb	r2, [r3, #4]
	pHandle->sai_overtemp    = 0x00;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	715a      	strb	r2, [r3, #5]
	pHandle->dc_hpf_cal      = 0x00;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	71da      	strb	r2, [r3, #7]
	pHandle->misc_control    = MISC_CONTROL_RST_VAL;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2202      	movs	r2, #2
 800066a:	719a      	strb	r2, [r3, #6]
	pHandle->gain_db         = 0;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f04f 0200 	mov.w	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <gain_code>:
static uint8_t gain_code(float gain){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	ed87 0a01 	vstr	s0, [r7, #4]
	if ((gain > MAX_GAIN) || (gain< MIN_GAIN)){
 800068a:	edd7 7a01 	vldr	s15, [r7, #4]
 800068e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80006e0 <gain_code+0x60>
 8000692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	dc08      	bgt.n	80006ae <gain_code+0x2e>
 800069c:	edd7 7a01 	vldr	s15, [r7, #4]
 80006a0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80006e4 <gain_code+0x64>
 80006a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ac:	d501      	bpl.n	80006b2 <gain_code+0x32>
		return 0xA0; // 0 dB GAIN
 80006ae:	23a0      	movs	r3, #160	@ 0xa0
 80006b0:	e00f      	b.n	80006d2 <gain_code+0x52>
	}
	return (MAX_GAIN-gain)/GAIN_STEP;
 80006b2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80006e0 <gain_code+0x60>
 80006b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80006ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006be:	eef5 6a08 	vmov.f32	s13, #88	@ 0x3ec00000  0.375
 80006c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006ca:	edc7 7a00 	vstr	s15, [r7]
 80006ce:	783b      	ldrb	r3, [r7, #0]
 80006d0:	b2db      	uxtb	r3, r3
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	42700000 	.word	0x42700000
 80006e4:	c20e8000 	.word	0xc20e8000

080006e8 <Audio_ADC_Calibrate>:

HAL_StatusTypeDef Audio_ADC_Calibrate(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af04      	add	r7, sp, #16
	uint8_t reg_value = DC_CALIB_EN;
 80006ee:	2303      	movs	r3, #3
 80006f0:	71fb      	strb	r3, [r7, #7]
	if (Audio_ADC_PowerOn() != HAL_OK){
 80006f2:	f000 f835 	bl	8000760 <Audio_ADC_PowerOn>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <Audio_ADC_Calibrate+0x18>
		return HAL_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	e028      	b.n	8000752 <Audio_ADC_Calibrate+0x6a>
	}
	HAL_Delay(100);
 8000700:	2064      	movs	r0, #100	@ 0x64
 8000702:	f001 f859 	bl	80017b8 <HAL_Delay>
	if (HAL_I2C_Mem_Write(&hi2c1, ADAU1978_ADDR<<1, MISC_CONTROL_REG, 1, &reg_value,1, 1000)!= HAL_OK){
 8000706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070a:	9302      	str	r3, [sp, #8]
 800070c:	2301      	movs	r3, #1
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	220e      	movs	r2, #14
 8000718:	21e2      	movs	r1, #226	@ 0xe2
 800071a:	4810      	ldr	r0, [pc, #64]	@ (800075c <Audio_ADC_Calibrate+0x74>)
 800071c:	f002 fdfe 	bl	800331c <HAL_I2C_Mem_Write>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <Audio_ADC_Calibrate+0x42>
		return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e013      	b.n	8000752 <Audio_ADC_Calibrate+0x6a>

	}
	HAL_Delay(500);
 800072a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800072e:	f001 f843 	bl	80017b8 <HAL_Delay>
	reg_value = MISC_CONTROL_RST_VAL;
 8000732:	2302      	movs	r3, #2
 8000734:	71fb      	strb	r3, [r7, #7]
	return HAL_I2C_Mem_Write(&hi2c1, ADAU1978_ADDR<<1, MISC_CONTROL_REG, 1, &reg_value,1, 1000);
 8000736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	2301      	movs	r3, #1
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2301      	movs	r3, #1
 8000746:	220e      	movs	r2, #14
 8000748:	21e2      	movs	r1, #226	@ 0xe2
 800074a:	4804      	ldr	r0, [pc, #16]	@ (800075c <Audio_ADC_Calibrate+0x74>)
 800074c:	f002 fde6 	bl	800331c <HAL_I2C_Mem_Write>
 8000750:	4603      	mov	r3, r0

}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000022c 	.word	0x2000022c

08000760 <Audio_ADC_PowerOn>:

HAL_StatusTypeDef Audio_ADC_PowerOn(){
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af04      	add	r7, sp, #16
	uint8_t reg_value = 0x01;
 8000766:	2301      	movs	r3, #1
 8000768:	71fb      	strb	r3, [r7, #7]
	return HAL_I2C_Mem_Write(&hi2c1, ADAU1978_ADDR<<1, M_POWER_REG, 1, &reg_value,1, 1000);
 800076a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	2301      	movs	r3, #1
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2301      	movs	r3, #1
 800077a:	2200      	movs	r2, #0
 800077c:	21e2      	movs	r1, #226	@ 0xe2
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <Audio_ADC_PowerOn+0x30>)
 8000780:	f002 fdcc 	bl	800331c <HAL_I2C_Mem_Write>
 8000784:	4603      	mov	r3, r0


}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000022c 	.word	0x2000022c

08000794 <TDM4Init>:
void TDM4Init();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TDM4Init(){
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
	// Enable all ADCs
	xHandle.block_power_sai = ADC_ENALL;
 8000798:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <TDM4Init+0x34>)
 800079a:	223f      	movs	r2, #63	@ 0x3f
 800079c:	701a      	strb	r2, [r3, #0]
	// TDM4 Left Justified
	xHandle.sai_ctrl0 = SAI_CTRL0_TDM4|SAI_CTRL0_SDATA_FMT_LJ;
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <TDM4Init+0x34>)
 80007a0:	2252      	movs	r2, #82	@ 0x52
 80007a2:	705a      	strb	r2, [r3, #1]
	// 24-bit data on 32 bit SLOT, LRCK pulse
	xHandle.sai_ctrl1  = SAI_CTRL1_DW_24_BITS | SAI_CTRL1_SW_32_BCKS| SAI_CTRL1_LR_MODE_PULSE;
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <TDM4Init+0x34>)
 80007a6:	2208      	movs	r2, #8
 80007a8:	709a      	strb	r2, [r3, #2]
	// enable HPF for all
	xHandle.dc_hpf_cal = DC_HPF_ALL;
 80007aa:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <TDM4Init+0x34>)
 80007ac:	220f      	movs	r2, #15
 80007ae:	71da      	strb	r2, [r3, #7]
	// Enable output for all
	xHandle.sai_overtemp = SAI_DRV_ALL;
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <TDM4Init+0x34>)
 80007b2:	22f0      	movs	r2, #240	@ 0xf0
 80007b4:	715a      	strb	r2, [r3, #5]
	xHandle.gain_db = 40.125;
 80007b6:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <TDM4Init+0x34>)
 80007b8:	4a04      	ldr	r2, [pc, #16]	@ (80007cc <TDM4Init+0x38>)
 80007ba:	609a      	str	r2, [r3, #8]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000498 	.word	0x20000498
 80007cc:	42208000 	.word	0x42208000

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	pTxBuffer = &adc_buffer[0];
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <main+0x7c>)
 80007d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000850 <main+0x80>)
 80007d8:	601a      	str	r2, [r3, #0]
	adcx = NONE;
 80007da:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <main+0x84>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
	start_tx = 0;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <main+0x88>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
	Audio_ADC_StructInit(&xHandle);
 80007e6:	481d      	ldr	r0, [pc, #116]	@ (800085c <main+0x8c>)
 80007e8:	f7ff ff24 	bl	8000634 <Audio_ADC_StructInit>
	TDM4Init();
 80007ec:	f7ff ffd2 	bl	8000794 <TDM4Init>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007f0:	f000 fc6a 	bl	80010c8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f4:	f000 ff83 	bl	80016fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f8:	f000 f834 	bl	8000864 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007fc:	f000 f89e 	bl	800093c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f000 fa58 	bl	8000cb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000804:	f000 fa28 	bl	8000c58 <MX_DMA_Init>
  MX_I2C1_Init();
 8000808:	f000 f912 	bl	8000a30 <MX_I2C1_Init>
  MX_SAI1_Init();
 800080c:	f000 f950 	bl	8000ab0 <MX_SAI1_Init>
  MX_USB_DEVICE_Init();
 8000810:	f00a fa34 	bl	800ac7c <MX_USB_DEVICE_Init>
  MX_ADC3_Init();
 8000814:	f000 f8ba 	bl	800098c <MX_ADC3_Init>
  MX_TIM2_Init();
 8000818:	f000 f9d0 	bl	8000bbc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    xStatus = Audio_ADC_Calibrate();
 800081c:	f7ff ff64 	bl	80006e8 <Audio_ADC_Calibrate>
 8000820:	4603      	mov	r3, r0
 8000822:	461a      	mov	r2, r3
 8000824:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <main+0x90>)
 8000826:	701a      	strb	r2, [r3, #0]
    if (xStatus != HAL_OK){
  	  //Error_Handler();
    }
    xStatus = Audio_ADC_Init(&xHandle);
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <main+0x8c>)
 800082a:	f7ff fe87 	bl	800053c <Audio_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <main+0x90>)
 8000834:	701a      	strb	r2, [r3, #0]
    if (xStatus != HAL_OK){
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <main+0x90>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <main+0x72>
  	  Error_Handler();
 800083e:	f000 fc6f 	bl	8001120 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8000842:	2064      	movs	r0, #100	@ 0x64
 8000844:	f000 ffb8 	bl	80017b8 <HAL_Delay>
 8000848:	e7fb      	b.n	8000842 <main+0x72>
 800084a:	bf00      	nop
 800084c:	200004a8 	.word	0x200004a8
 8000850:	200004b0 	.word	0x200004b0
 8000854:	20000494 	.word	0x20000494
 8000858:	200004a4 	.word	0x200004a4
 800085c:	20000498 	.word	0x20000498
 8000860:	200004ac 	.word	0x200004ac

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	@ 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2234      	movs	r2, #52	@ 0x34
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f00b f890 	bl	800b998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000888:	f004 fbea 	bl	8005060 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <SystemClock_Config+0xd0>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000890:	4a28      	ldr	r2, [pc, #160]	@ (8000934 <SystemClock_Config+0xd0>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	@ 0x40
 8000898:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <SystemClock_Config+0xd0>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a4:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <SystemClock_Config+0xd4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008ac:	4a22      	ldr	r2, [pc, #136]	@ (8000938 <SystemClock_Config+0xd4>)
 80008ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <SystemClock_Config+0xd4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 5;
 80008d4:	2305      	movs	r3, #5
 80008d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008d8:	23b4      	movs	r3, #180	@ 0xb4
 80008da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008dc:	2302      	movs	r3, #2
 80008de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80008e0:	2306      	movs	r3, #6
 80008e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4618      	mov	r0, r3
 80008ee:	f004 fbc7 	bl	8005080 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008f8:	f000 fc12 	bl	8001120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000908:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800090c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000912:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2104      	movs	r1, #4
 800091a:	4618      	mov	r0, r3
 800091c:	f004 fe5e 	bl	80055dc <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000926:	f000 fbfb 	bl	8001120 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	@ 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b0a4      	sub	sp, #144	@ 0x90
 8000940:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2290      	movs	r2, #144	@ 0x90
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f00b f825 	bl	800b998 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_CLK48;
 800094e:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 8000952:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000954:	23c0      	movs	r3, #192	@ 0xc0
 8000956:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 5;
 800095c:	2305      	movs	r3, #5
 800095e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 5;
 8000964:	2305      	movs	r3, #5
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800096c:	2300      	movs	r3, #0
 800096e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	4618      	mov	r0, r3
 8000974:	f005 f830 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 800097e:	f000 fbcf 	bl	8001120 <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3790      	adds	r7, #144	@ 0x90
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000992:	463b      	mov	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800099e:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009a0:	4a22      	ldr	r2, [pc, #136]	@ (8000a2c <MX_ADC3_Init+0xa0>)
 80009a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009a4:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009ce:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 80009d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009dc:	2201      	movs	r2, #1
 80009de:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009ee:	480e      	ldr	r0, [pc, #56]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 80009f0:	f000 ff06 	bl	8001800 <HAL_ADC_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 80009fa:	f000 fb91 	bl	8001120 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009fe:	2309      	movs	r3, #9
 8000a00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <MX_ADC3_Init+0x9c>)
 8000a10:	f001 f9bc 	bl	8001d8c <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 8000a1a:	f000 fb81 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000184 	.word	0x20000184
 8000a2c:	40012200 	.word	0x40012200

08000a30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <MX_I2C1_Init+0x74>)
 8000a36:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa8 <MX_I2C1_Init+0x78>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_I2C1_Init+0x74>)
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aac <MX_I2C1_Init+0x7c>)
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_I2C1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a46:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <MX_I2C1_Init+0x74>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a52:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_I2C1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_I2C1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_I2C1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6a:	480e      	ldr	r0, [pc, #56]	@ (8000aa4 <MX_I2C1_Init+0x74>)
 8000a6c:	f002 fbba 	bl	80031e4 <HAL_I2C_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a76:	f000 fb53 	bl	8001120 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4809      	ldr	r0, [pc, #36]	@ (8000aa4 <MX_I2C1_Init+0x74>)
 8000a7e:	f002 ffcf 	bl	8003a20 <HAL_I2CEx_ConfigAnalogFilter>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a88:	f000 fb4a 	bl	8001120 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_I2C1_Init+0x74>)
 8000a90:	f003 f811 	bl	8003ab6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a9a:	f000 fb41 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000022c 	.word	0x2000022c
 8000aa8:	40005400 	.word	0x40005400
 8000aac:	00808cd2 	.word	0x00808cd2

08000ab0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000ab4:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8000bb0 <MX_SAI1_Init+0x100>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000aba:	4b3c      	ldr	r3, [pc, #240]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_24;
 8000ac6:	4b39      	ldr	r3, [pc, #228]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000ac8:	22c0      	movs	r2, #192	@ 0xc0
 8000aca:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000acc:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000ad2:	4b36      	ldr	r3, [pc, #216]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ad8:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ade:	4b33      	ldr	r3, [pc, #204]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ae4:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000aea:	4b30      	ldr	r3, [pc, #192]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000af0:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000af2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000af6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 128;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000b24:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b28:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000b2a:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000b32:	2280      	movs	r2, #128	@ 0x80
 8000b34:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 4;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000b38:	2204      	movs	r2, #4
 8000b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000000F;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000b3e:	220f      	movs	r2, #15
 8000b40:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000b42:	481a      	ldr	r0, [pc, #104]	@ (8000bac <MX_SAI1_Init+0xfc>)
 8000b44:	f005 fd12 	bl	800656c <HAL_SAI_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_SAI1_Init+0xa2>
  {
    Error_Handler();
 8000b4e:	f000 fae7 	bl	8001120 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000b52:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <MX_SAI1_Init+0x104>)
 8000b54:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <MX_SAI1_Init+0x108>)
 8000b56:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <MX_SAI1_Init+0x104>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_SAI1_Init+0x104>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_SAI1_Init+0x104>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_SAI1_Init+0x104>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_SAI1_Init+0x104>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_SAI1_Init+0x104>)
 8000b78:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b7c:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <MX_SAI1_Init+0x104>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b84:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_SAI1_Init+0x104>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <MX_SAI1_Init+0x104>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8000b90:	2302      	movs	r3, #2
 8000b92:	2202      	movs	r2, #2
 8000b94:	2100      	movs	r1, #0
 8000b96:	4807      	ldr	r0, [pc, #28]	@ (8000bb4 <MX_SAI1_Init+0x104>)
 8000b98:	f005 fcb4 	bl	8006504 <HAL_SAI_InitProtocol>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_SAI1_Init+0xf6>
  {
    Error_Handler();
 8000ba2:	f000 fabd 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000280 	.word	0x20000280
 8000bb0:	40015804 	.word	0x40015804
 8000bb4:	20000304 	.word	0x20000304
 8000bb8:	40015824 	.word	0x40015824

08000bbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	@ (8000c54 <MX_TIM2_Init+0x98>)
 8000bdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000be0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <MX_TIM2_Init+0x98>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_TIM2_Init+0x98>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 8000bee:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <MX_TIM2_Init+0x98>)
 8000bf0:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000bf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <MX_TIM2_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <MX_TIM2_Init+0x98>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c02:	4814      	ldr	r0, [pc, #80]	@ (8000c54 <MX_TIM2_Init+0x98>)
 8000c04:	f006 f975 	bl	8006ef2 <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c0e:	f000 fa87 	bl	8001120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480d      	ldr	r0, [pc, #52]	@ (8000c54 <MX_TIM2_Init+0x98>)
 8000c20:	f006 fa56 	bl	80070d0 <HAL_TIM_ConfigClockSource>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c2a:	f000 fa79 	bl	8001120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c2e:	2320      	movs	r3, #32
 8000c30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000c32:	2380      	movs	r3, #128	@ 0x80
 8000c34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4806      	ldr	r0, [pc, #24]	@ (8000c54 <MX_TIM2_Init+0x98>)
 8000c3c:	f006 fc58 	bl	80074f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c46:	f000 fa6b 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000448 	.word	0x20000448

08000c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_DMA_Init+0x58>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <MX_DMA_Init+0x58>)
 8000c64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_DMA_Init+0x58>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2038      	movs	r0, #56	@ 0x38
 8000c7c:	f001 fc3d 	bl	80024fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c80:	2038      	movs	r0, #56	@ 0x38
 8000c82:	f001 fc56 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2039      	movs	r0, #57	@ 0x39
 8000c8c:	f001 fc35 	bl	80024fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c90:	2039      	movs	r0, #57	@ 0x39
 8000c92:	f001 fc4e 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	203c      	movs	r0, #60	@ 0x3c
 8000c9c:	f001 fc2d 	bl	80024fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000ca0:	203c      	movs	r0, #60	@ 0x3c
 8000ca2:	f001 fc46 	bl	8002532 <HAL_NVIC_EnableIRQ>

}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	@ 0x30
 8000cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cca:	4b4e      	ldr	r3, [pc, #312]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a4d      	ldr	r2, [pc, #308]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000cd0:	f043 0310 	orr.w	r3, r3, #16
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0310 	and.w	r3, r3, #16
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b48      	ldr	r3, [pc, #288]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a47      	ldr	r2, [pc, #284]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b45      	ldr	r3, [pc, #276]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cfa:	4b42      	ldr	r3, [pc, #264]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a41      	ldr	r2, [pc, #260]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000d00:	f043 0320 	orr.w	r3, r3, #32
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b3f      	ldr	r3, [pc, #252]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0320 	and.w	r3, r3, #32
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	4b3c      	ldr	r3, [pc, #240]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a3b      	ldr	r2, [pc, #236]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b39      	ldr	r3, [pc, #228]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a35      	ldr	r2, [pc, #212]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b33      	ldr	r3, [pc, #204]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b30      	ldr	r3, [pc, #192]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a2f      	ldr	r2, [pc, #188]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e04 <MX_GPIO_Init+0x150>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2109      	movs	r1, #9
 8000d5e:	482a      	ldr	r0, [pc, #168]	@ (8000e08 <MX_GPIO_Init+0x154>)
 8000d60:	f002 fa0e 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2108      	movs	r1, #8
 8000d68:	4828      	ldr	r0, [pc, #160]	@ (8000e0c <MX_GPIO_Init+0x158>)
 8000d6a:	f002 fa09 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000d74:	4826      	ldr	r0, [pc, #152]	@ (8000e10 <MX_GPIO_Init+0x15c>)
 8000d76:	f002 fa03 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481d      	ldr	r0, [pc, #116]	@ (8000e08 <MX_GPIO_Init+0x154>)
 8000d92:	f002 f849 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000d96:	2309      	movs	r3, #9
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4816      	ldr	r0, [pc, #88]	@ (8000e08 <MX_GPIO_Init+0x154>)
 8000dae:	f002 f83b 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000db2:	2308      	movs	r3, #8
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4810      	ldr	r0, [pc, #64]	@ (8000e0c <MX_GPIO_Init+0x158>)
 8000dca:	f002 f82d 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000dce:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	480a      	ldr	r0, [pc, #40]	@ (8000e10 <MX_GPIO_Init+0x15c>)
 8000de8:	f002 f81e 	bl	8002e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2101      	movs	r1, #1
 8000df0:	2028      	movs	r0, #40	@ 0x28
 8000df2:	f001 fb82 	bl	80024fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000df6:	2028      	movs	r0, #40	@ 0x28
 8000df8:	f001 fb9b 	bl	8002532 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfc:	bf00      	nop
 8000dfe:	3730      	adds	r7, #48	@ 0x30
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	40020400 	.word	0x40020400

08000e14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13){
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e24:	d102      	bne.n	8000e2c <HAL_GPIO_EXTI_Callback+0x18>
		start_tx = 1;
 8000e26:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <HAL_GPIO_EXTI_Callback+0x24>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	200004a4 	.word	0x200004a4

08000e3c <HAL_SAI_RxCpltCallback>:
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	pTxBuffer = &adc_buffer[0];
 8000e44:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <HAL_SAI_RxCpltCallback+0x7c>)
 8000e46:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <HAL_SAI_RxCpltCallback+0x80>)
 8000e48:	601a      	str	r2, [r3, #0]
	if (hsai ==  &hsai_BlockB1){
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <HAL_SAI_RxCpltCallback+0x84>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d115      	bne.n	8000e7e <HAL_SAI_RxCpltCallback+0x42>
		// PCM1808 Active
		if ((start_tx == 1) && (adcx == PCM1808)){
 8000e52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <HAL_SAI_RxCpltCallback+0x88>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d12a      	bne.n	8000eb0 <HAL_SAI_RxCpltCallback+0x74>
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <HAL_SAI_RxCpltCallback+0x8c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d126      	bne.n	8000eb0 <HAL_SAI_RxCpltCallback+0x74>
			start_tx = 0;
 8000e62:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <HAL_SAI_RxCpltCallback+0x88>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
			HAL_SAI_DMAStop(hsai);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f005 fd1f 	bl	80068ac <HAL_SAI_DMAStop>
			CDC_Transmit_FS(pTxBuffer, SAMPLE_SIZE*8);
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_SAI_RxCpltCallback+0x7c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e76:	4618      	mov	r0, r3
 8000e78:	f00a f806 	bl	800ae88 <CDC_Transmit_FS>
			start_tx = 0;
			HAL_SAI_DMAStop(hsai);
			CDC_Transmit_FS(pTxBuffer, SAMPLE_SIZE*16);
		}
	}
}
 8000e7c:	e018      	b.n	8000eb0 <HAL_SAI_RxCpltCallback+0x74>
	else if (hsai ==  &hsai_BlockA1){
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <HAL_SAI_RxCpltCallback+0x90>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d114      	bne.n	8000eb0 <HAL_SAI_RxCpltCallback+0x74>
		if ((start_tx == 1) && (adcx == ADAU1978)){
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_SAI_RxCpltCallback+0x88>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d110      	bne.n	8000eb0 <HAL_SAI_RxCpltCallback+0x74>
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <HAL_SAI_RxCpltCallback+0x8c>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d10c      	bne.n	8000eb0 <HAL_SAI_RxCpltCallback+0x74>
			start_tx = 0;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_SAI_RxCpltCallback+0x88>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
			HAL_SAI_DMAStop(hsai);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f005 fd05 	bl	80068ac <HAL_SAI_DMAStop>
			CDC_Transmit_FS(pTxBuffer, SAMPLE_SIZE*16);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <HAL_SAI_RxCpltCallback+0x7c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f009 ffec 	bl	800ae88 <CDC_Transmit_FS>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200004a8 	.word	0x200004a8
 8000ebc:	200004b0 	.word	0x200004b0
 8000ec0:	20000304 	.word	0x20000304
 8000ec4:	200004a4 	.word	0x200004a4
 8000ec8:	20000494 	.word	0x20000494
 8000ecc:	20000280 	.word	0x20000280

08000ed0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	pTxBuffer = &adc_buffer[0];
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000eda:	4a19      	ldr	r2, [pc, #100]	@ (8000f40 <HAL_ADC_ConvCpltCallback+0x70>)
 8000edc:	601a      	str	r2, [r3, #0]
	if ((start_tx == 1) && (adcx == BUILTIN)){
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <HAL_ADC_ConvCpltCallback+0x74>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d114      	bne.n	8000f10 <HAL_ADC_ConvCpltCallback+0x40>
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <HAL_ADC_ConvCpltCallback+0x78>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d110      	bne.n	8000f10 <HAL_ADC_ConvCpltCallback+0x40>
		start_tx = 0;
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <HAL_ADC_ConvCpltCallback+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Stop_DMA(hadc);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 fed1 	bl	8001c9c <HAL_ADC_Stop_DMA>
		HAL_TIM_Base_Stop(&htim2);
 8000efa:	4814      	ldr	r0, [pc, #80]	@ (8000f4c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000efc:	f006 f8c0 	bl	8007080 <HAL_TIM_Base_Stop>
		CDC_Transmit_FS(pTxBuffer, SAMPLE_SIZE*2);
 8000f00:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f009 ffbd 	bl	800ae88 <CDC_Transmit_FS>
 8000f0e:	e011      	b.n	8000f34 <HAL_ADC_ConvCpltCallback+0x64>
	}
	else {
		HAL_ADC_Stop_DMA(hadc);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 fec3 	bl	8001c9c <HAL_ADC_Stop_DMA>
		HAL_TIM_Base_Stop(&htim2);
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f18:	f006 f8b2 	bl	8007080 <HAL_TIM_Base_Stop>
		HAL_ADC_Start_DMA(hadc,(uint32_t*)pTxBuffer, SAMPLE_SIZE*2);
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f24:	4619      	mov	r1, r3
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fdbe 	bl	8001aa8 <HAL_ADC_Start_DMA>
		HAL_TIM_Base_Start(&htim2);
 8000f2c:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f2e:	f006 f837 	bl	8006fa0 <HAL_TIM_Base_Start>
	}
}
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200004a8 	.word	0x200004a8
 8000f40:	200004b0 	.word	0x200004b0
 8000f44:	200004a4 	.word	0x200004a4
 8000f48:	20000494 	.word	0x20000494
 8000f4c:	20000448 	.word	0x20000448

08000f50 <USB_RxCpltCallback>:
void USB_RxCpltCallback(uint8_t* Buf, uint32_t *Len){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	pTxBuffer = &adc_buffer[0];
 8000f5a:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <USB_RxCpltCallback+0xe4>)
 8000f5c:	4a36      	ldr	r2, [pc, #216]	@ (8001038 <USB_RxCpltCallback+0xe8>)
 8000f5e:	601a      	str	r2, [r3, #0]
	if (strcmp(builtin, (char*)Buf) == 0){
 8000f60:	4b36      	ldr	r3, [pc, #216]	@ (800103c <USB_RxCpltCallback+0xec>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff f966 	bl	8000238 <strcmp>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d113      	bne.n	8000f9a <USB_RxCpltCallback+0x4a>
		adcx = BUILTIN;
 8000f72:	4b33      	ldr	r3, [pc, #204]	@ (8001040 <USB_RxCpltCallback+0xf0>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4831      	ldr	r0, [pc, #196]	@ (8001044 <USB_RxCpltCallback+0xf4>)
 8000f7e:	f002 f8ff 	bl	8003180 <HAL_GPIO_WritePin>
		HAL_ADC_Start_DMA(&hadc3, (uint32_t*)pTxBuffer, SAMPLE_SIZE*2);
 8000f82:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <USB_RxCpltCallback+0xe4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482e      	ldr	r0, [pc, #184]	@ (8001048 <USB_RxCpltCallback+0xf8>)
 8000f8e:	f000 fd8b 	bl	8001aa8 <HAL_ADC_Start_DMA>
		HAL_TIM_Base_Start(&htim2);
 8000f92:	482e      	ldr	r0, [pc, #184]	@ (800104c <USB_RxCpltCallback+0xfc>)
 8000f94:	f006 f804 	bl	8006fa0 <HAL_TIM_Base_Start>
		adcx = NONE;
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
	}
}
 8000f98:	e047      	b.n	800102a <USB_RxCpltCallback+0xda>
	else if(strcmp(stereo, (char*)Buf) == 0){
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001050 <USB_RxCpltCallback+0x100>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff f949 	bl	8000238 <strcmp>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d110      	bne.n	8000fce <USB_RxCpltCallback+0x7e>
		adcx = PCM1808;
 8000fac:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <USB_RxCpltCallback+0xf0>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2180      	movs	r1, #128	@ 0x80
 8000fb6:	4823      	ldr	r0, [pc, #140]	@ (8001044 <USB_RxCpltCallback+0xf4>)
 8000fb8:	f002 f8e2 	bl	8003180 <HAL_GPIO_WritePin>
		HAL_SAI_Receive_DMA(&hsai_BlockB1, pTxBuffer, SAMPLE_SIZE*2);
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <USB_RxCpltCallback+0xe4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4823      	ldr	r0, [pc, #140]	@ (8001054 <USB_RxCpltCallback+0x104>)
 8000fc8:	f005 fce4 	bl	8006994 <HAL_SAI_Receive_DMA>
}
 8000fcc:	e02d      	b.n	800102a <USB_RxCpltCallback+0xda>
	else if(strcmp(tdm, (char*)Buf) == 0){
 8000fce:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <USB_RxCpltCallback+0x108>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f92f 	bl	8000238 <strcmp>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d111      	bne.n	8001004 <USB_RxCpltCallback+0xb4>
		adcx = ADAU1978;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <USB_RxCpltCallback+0xf0>)
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fec:	4815      	ldr	r0, [pc, #84]	@ (8001044 <USB_RxCpltCallback+0xf4>)
 8000fee:	f002 f8c7 	bl	8003180 <HAL_GPIO_WritePin>
		HAL_SAI_Receive_DMA(&hsai_BlockA1, pTxBuffer, SAMPLE_SIZE*4);
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <USB_RxCpltCallback+0xe4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4817      	ldr	r0, [pc, #92]	@ (800105c <USB_RxCpltCallback+0x10c>)
 8000ffe:	f005 fcc9 	bl	8006994 <HAL_SAI_Receive_DMA>
}
 8001002:	e012      	b.n	800102a <USB_RxCpltCallback+0xda>
		adcx = NONE;
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <USB_RxCpltCallback+0xf0>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2101      	movs	r1, #1
 800100e:	480d      	ldr	r0, [pc, #52]	@ (8001044 <USB_RxCpltCallback+0xf4>)
 8001010:	f002 f8b6 	bl	8003180 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2180      	movs	r1, #128	@ 0x80
 8001018:	480a      	ldr	r0, [pc, #40]	@ (8001044 <USB_RxCpltCallback+0xf4>)
 800101a:	f002 f8b1 	bl	8003180 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <USB_RxCpltCallback+0xf4>)
 8001026:	f002 f8ab 	bl	8003180 <HAL_GPIO_WritePin>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200004a8 	.word	0x200004a8
 8001038:	200004b0 	.word	0x200004b0
 800103c:	20000000 	.word	0x20000000
 8001040:	20000494 	.word	0x20000494
 8001044:	40020400 	.word	0x40020400
 8001048:	20000184 	.word	0x20000184
 800104c:	20000448 	.word	0x20000448
 8001050:	20000004 	.word	0x20000004
 8001054:	20000304 	.word	0x20000304
 8001058:	20000008 	.word	0x20000008
 800105c:	20000280 	.word	0x20000280

08001060 <USB_TxCpltCallback>:
void USB_TxCpltCallback(uint8_t *Buf, uint32_t *Len){
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	if (adcx == BUILTIN){
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <USB_TxCpltCallback+0x60>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d108      	bne.n	8001084 <USB_TxCpltCallback+0x24>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2101      	movs	r1, #1
 8001076:	4813      	ldr	r0, [pc, #76]	@ (80010c4 <USB_TxCpltCallback+0x64>)
 8001078:	f002 f882 	bl	8003180 <HAL_GPIO_WritePin>
		adcx = NONE;
 800107c:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <USB_TxCpltCallback+0x60>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
	}
	else if (adcx == ADAU1978){
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
		adcx = NONE;
	}
}
 8001082:	e019      	b.n	80010b8 <USB_TxCpltCallback+0x58>
	else if (adcx == PCM1808){
 8001084:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <USB_TxCpltCallback+0x60>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d108      	bne.n	800109e <USB_TxCpltCallback+0x3e>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2180      	movs	r1, #128	@ 0x80
 8001090:	480c      	ldr	r0, [pc, #48]	@ (80010c4 <USB_TxCpltCallback+0x64>)
 8001092:	f002 f875 	bl	8003180 <HAL_GPIO_WritePin>
		adcx = NONE;
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <USB_TxCpltCallback+0x60>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
}
 800109c:	e00c      	b.n	80010b8 <USB_TxCpltCallback+0x58>
	else if (adcx == ADAU1978){
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <USB_TxCpltCallback+0x60>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d108      	bne.n	80010b8 <USB_TxCpltCallback+0x58>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010ac:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <USB_TxCpltCallback+0x64>)
 80010ae:	f002 f867 	bl	8003180 <HAL_GPIO_WritePin>
		adcx = NONE;
 80010b2:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <USB_TxCpltCallback+0x60>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000494 	.word	0x20000494
 80010c4:	40020400 	.word	0x40020400

080010c8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010da:	f001 fa45 	bl	8002568 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010de:	2301      	movs	r3, #1
 80010e0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80010ea:	231f      	movs	r3, #31
 80010ec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80010ee:	2387      	movs	r3, #135	@ 0x87
 80010f0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80010f6:	2300      	movs	r3, #0
 80010f8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010fa:	2301      	movs	r3, #1
 80010fc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010fe:	2301      	movs	r3, #1
 8001100:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800110a:	463b      	mov	r3, r7
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fa63 	bl	80025d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001112:	2004      	movs	r0, #4
 8001114:	f001 fa40 	bl	8002598 <HAL_MPU_Enable>

}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <Error_Handler+0x8>

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_MspInit+0x44>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <HAL_MspInit+0x44>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113c:	6413      	str	r3, [r2, #64]	@ 0x40
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_MspInit+0x44>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <HAL_MspInit+0x44>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a08      	ldr	r2, [pc, #32]	@ (8001170 <HAL_MspInit+0x44>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_MspInit+0x44>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800

08001174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a31      	ldr	r2, [pc, #196]	@ (8001258 <HAL_ADC_MspInit+0xe4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d15b      	bne.n	800124e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001196:	4b31      	ldr	r3, [pc, #196]	@ (800125c <HAL_ADC_MspInit+0xe8>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	4a30      	ldr	r2, [pc, #192]	@ (800125c <HAL_ADC_MspInit+0xe8>)
 800119c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a2:	4b2e      	ldr	r3, [pc, #184]	@ (800125c <HAL_ADC_MspInit+0xe8>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ae:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <HAL_ADC_MspInit+0xe8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a2a      	ldr	r2, [pc, #168]	@ (800125c <HAL_ADC_MspInit+0xe8>)
 80011b4:	f043 0320 	orr.w	r3, r3, #32
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b28      	ldr	r3, [pc, #160]	@ (800125c <HAL_ADC_MspInit+0xe8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF3     ------> ADC3_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011c6:	2308      	movs	r3, #8
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ca:	2303      	movs	r3, #3
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4821      	ldr	r0, [pc, #132]	@ (8001260 <HAL_ADC_MspInit+0xec>)
 80011da:	f001 fe25 	bl	8002e28 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80011de:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 80011e0:	4a21      	ldr	r2, [pc, #132]	@ (8001268 <HAL_ADC_MspInit+0xf4>)
 80011e2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 80011e6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011ea:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 80011fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011fe:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001200:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 8001202:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001206:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001208:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 800120a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800120e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001210:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001222:	4810      	ldr	r0, [pc, #64]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 8001224:	f001 fa18 	bl	8002658 <HAL_DMA_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800122e:	f7ff ff77 	bl	8001120 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a0b      	ldr	r2, [pc, #44]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 8001236:	639a      	str	r2, [r3, #56]	@ 0x38
 8001238:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <HAL_ADC_MspInit+0xf0>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2012      	movs	r0, #18
 8001244:	f001 f959 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001248:	2012      	movs	r0, #18
 800124a:	f001 f972 	bl	8002532 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40012200 	.word	0x40012200
 800125c:	40023800 	.word	0x40023800
 8001260:	40021400 	.word	0x40021400
 8001264:	200001cc 	.word	0x200001cc
 8001268:	40026410 	.word	0x40026410

0800126c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0ae      	sub	sp, #184	@ 0xb8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2290      	movs	r2, #144	@ 0x90
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f00a fb83 	bl	800b998 <memset>
  if(hi2c->Instance==I2C1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a22      	ldr	r2, [pc, #136]	@ (8001320 <HAL_I2C_MspInit+0xb4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d13c      	bne.n	8001316 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800129c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 fb94 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012b6:	f7ff ff33 	bl	8001120 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <HAL_I2C_MspInit+0xb8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a19      	ldr	r2, [pc, #100]	@ (8001324 <HAL_I2C_MspInit+0xb8>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <HAL_I2C_MspInit+0xb8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012da:	2312      	movs	r3, #18
 80012dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ec:	2304      	movs	r3, #4
 80012ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012f6:	4619      	mov	r1, r3
 80012f8:	480b      	ldr	r0, [pc, #44]	@ (8001328 <HAL_I2C_MspInit+0xbc>)
 80012fa:	f001 fd95 	bl	8002e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <HAL_I2C_MspInit+0xb8>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	4a08      	ldr	r2, [pc, #32]	@ (8001324 <HAL_I2C_MspInit+0xb8>)
 8001304:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001308:	6413      	str	r3, [r2, #64]	@ 0x40
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_I2C_MspInit+0xb8>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001316:	bf00      	nop
 8001318:	37b8      	adds	r7, #184	@ 0xb8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40005400 	.word	0x40005400
 8001324:	40023800 	.word	0x40023800
 8001328:	40020400 	.word	0x40020400

0800132c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800133c:	d10b      	bne.n	8001356 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <HAL_TIM_Base_MspInit+0x38>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4a08      	ldr	r2, [pc, #32]	@ (8001364 <HAL_TIM_Base_MspInit+0x38>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_TIM_Base_MspInit+0x38>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	@ 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a69      	ldr	r2, [pc, #420]	@ (800151c <HAL_SAI_MspInit+0x1b4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d15a      	bne.n	8001430 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800137a:	4b69      	ldr	r3, [pc, #420]	@ (8001520 <HAL_SAI_MspInit+0x1b8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10b      	bne.n	800139a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001382:	4b68      	ldr	r3, [pc, #416]	@ (8001524 <HAL_SAI_MspInit+0x1bc>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	4a67      	ldr	r2, [pc, #412]	@ (8001524 <HAL_SAI_MspInit+0x1bc>)
 8001388:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800138c:	6453      	str	r3, [r2, #68]	@ 0x44
 800138e:	4b65      	ldr	r3, [pc, #404]	@ (8001524 <HAL_SAI_MspInit+0x1bc>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800139a:	4b61      	ldr	r3, [pc, #388]	@ (8001520 <HAL_SAI_MspInit+0x1b8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	4a5f      	ldr	r2, [pc, #380]	@ (8001520 <HAL_SAI_MspInit+0x1b8>)
 80013a2:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80013a4:	2374      	movs	r3, #116	@ 0x74
 80013a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80013b4:	2306      	movs	r3, #6
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	485a      	ldr	r0, [pc, #360]	@ (8001528 <HAL_SAI_MspInit+0x1c0>)
 80013c0:	f001 fd32 	bl	8002e28 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 80013c4:	4b59      	ldr	r3, [pc, #356]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 80013c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001530 <HAL_SAI_MspInit+0x1c8>)
 80013c8:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80013ca:	4b58      	ldr	r3, [pc, #352]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d0:	4b56      	ldr	r3, [pc, #344]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d6:	4b55      	ldr	r3, [pc, #340]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80013dc:	4b53      	ldr	r3, [pc, #332]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 80013de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013e2:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013e4:	4b51      	ldr	r3, [pc, #324]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 80013e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013ea:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013ec:	4b4f      	ldr	r3, [pc, #316]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 80013ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013f2:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80013f4:	4b4d      	ldr	r3, [pc, #308]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 80013f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013fa:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80013fc:	4b4b      	ldr	r3, [pc, #300]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001402:	4b4a      	ldr	r3, [pc, #296]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 8001404:	2200      	movs	r2, #0
 8001406:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001408:	4848      	ldr	r0, [pc, #288]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 800140a:	f001 f925 	bl	8002658 <HAL_DMA_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_SAI_MspInit+0xb0>
    {
      Error_Handler();
 8001414:	f7ff fe84 	bl	8001120 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a44      	ldr	r2, [pc, #272]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 800141c:	671a      	str	r2, [r3, #112]	@ 0x70
 800141e:	4a43      	ldr	r2, [pc, #268]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a41      	ldr	r2, [pc, #260]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 8001428:	66da      	str	r2, [r3, #108]	@ 0x6c
 800142a:	4a40      	ldr	r2, [pc, #256]	@ (800152c <HAL_SAI_MspInit+0x1c4>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a3f      	ldr	r2, [pc, #252]	@ (8001534 <HAL_SAI_MspInit+0x1cc>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d16c      	bne.n	8001514 <HAL_SAI_MspInit+0x1ac>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800143a:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <HAL_SAI_MspInit+0x1b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10b      	bne.n	800145a <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001442:	4b38      	ldr	r3, [pc, #224]	@ (8001524 <HAL_SAI_MspInit+0x1bc>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	4a37      	ldr	r2, [pc, #220]	@ (8001524 <HAL_SAI_MspInit+0x1bc>)
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800144c:	6453      	str	r3, [r2, #68]	@ 0x44
 800144e:	4b35      	ldr	r3, [pc, #212]	@ (8001524 <HAL_SAI_MspInit+0x1bc>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800145a:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <HAL_SAI_MspInit+0x1b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a2f      	ldr	r2, [pc, #188]	@ (8001520 <HAL_SAI_MspInit+0x1b8>)
 8001462:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001464:	2308      	movs	r3, #8
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001474:	2306      	movs	r3, #6
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	482a      	ldr	r0, [pc, #168]	@ (8001528 <HAL_SAI_MspInit+0x1c0>)
 8001480:	f001 fcd2 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001484:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001496:	2306      	movs	r3, #6
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4825      	ldr	r0, [pc, #148]	@ (8001538 <HAL_SAI_MspInit+0x1d0>)
 80014a2:	f001 fcc1 	bl	8002e28 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 80014a6:	4b25      	ldr	r3, [pc, #148]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 80014a8:	4a25      	ldr	r2, [pc, #148]	@ (8001540 <HAL_SAI_MspInit+0x1d8>)
 80014aa:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80014ac:	4b23      	ldr	r3, [pc, #140]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 80014ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014b2:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b4:	4b21      	ldr	r3, [pc, #132]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ba:	4b20      	ldr	r3, [pc, #128]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 80014c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014c6:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014c8:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 80014ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014ce:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 80014d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014d6:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80014d8:	4b18      	ldr	r3, [pc, #96]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 80014da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014de:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 80014e0:	4b16      	ldr	r3, [pc, #88]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80014ec:	4813      	ldr	r0, [pc, #76]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 80014ee:	f001 f8b3 	bl	8002658 <HAL_DMA_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_SAI_MspInit+0x194>
    {
      Error_Handler();
 80014f8:	f7ff fe12 	bl	8001120 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a0f      	ldr	r2, [pc, #60]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 8001500:	671a      	str	r2, [r3, #112]	@ 0x70
 8001502:	4a0e      	ldr	r2, [pc, #56]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a0c      	ldr	r2, [pc, #48]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 800150c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800150e:	4a0b      	ldr	r2, [pc, #44]	@ (800153c <HAL_SAI_MspInit+0x1d4>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	@ 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40015804 	.word	0x40015804
 8001520:	200084b0 	.word	0x200084b0
 8001524:	40023800 	.word	0x40023800
 8001528:	40021000 	.word	0x40021000
 800152c:	20000388 	.word	0x20000388
 8001530:	40026428 	.word	0x40026428
 8001534:	40015824 	.word	0x40015824
 8001538:	40021400 	.word	0x40021400
 800153c:	200003e8 	.word	0x200003e8
 8001540:	40026470 	.word	0x40026470

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <NMI_Handler+0x4>

0800154c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <MemManage_Handler+0x4>

0800155c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <UsageFault_Handler+0x4>

0800156c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159a:	f000 f8ed 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <ADC_IRQHandler+0x10>)
 80015aa:	f000 f96d 	bl	8001888 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000184 	.word	0x20000184

080015b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015c0:	f001 fdf8 	bl	80031b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <DMA2_Stream0_IRQHandler+0x10>)
 80015ce:	f001 f9c1 	bl	8002954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200001cc 	.word	0x200001cc

080015dc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
 HAL_SAI_DMAPause(&hdma_sai1_a);
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <DMA2_Stream1_IRQHandler+0x14>)
 80015e2:	f005 f941 	bl	8006868 <HAL_SAI_DMAPause>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80015e6:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <DMA2_Stream1_IRQHandler+0x14>)
 80015e8:	f001 f9b4 	bl	8002954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000388 	.word	0x20000388

080015f4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <DMA2_Stream4_IRQHandler+0x10>)
 80015fa:	f001 f9ab 	bl	8002954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200003e8 	.word	0x200003e8

08001608 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <OTG_FS_IRQHandler+0x10>)
 800160e:	f002 fbd6 	bl	8003dbe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200099a4 	.word	0x200099a4

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f00a f9bc 	bl	800b9c8 <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20080000 	.word	0x20080000
 800167c:	00002000 	.word	0x00002000
 8001680:	200084b4 	.word	0x200084b4
 8001684:	20009fd0 	.word	0x20009fd0

08001688 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	@ (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016b0:	f7ff ffea 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b6:	490d      	ldr	r1, [pc, #52]	@ (80016ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016cc:	4c0a      	ldr	r4, [pc, #40]	@ (80016f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016da:	f00a f97b 	bl	800b9d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016de:	f7ff f877 	bl	80007d0 <main>
  bx  lr    
 80016e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80016f0:	0800bb48 	.word	0x0800bb48
  ldr r2, =_sbss
 80016f4:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80016f8:	20009fcc 	.word	0x20009fcc

080016fc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <CAN1_RX0_IRQHandler>

080016fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001702:	2003      	movs	r0, #3
 8001704:	f000 feee 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001708:	200f      	movs	r0, #15
 800170a:	f000 f805 	bl	8001718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170e:	f7ff fd0d 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_InitTick+0x54>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_InitTick+0x58>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 ff09 	bl	800254e <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 fed1 	bl	80024fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <HAL_InitTick+0x5c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000000c 	.word	0x2000000c
 8001770:	20000014 	.word	0x20000014
 8001774:	20000010 	.word	0x20000010

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000014 	.word	0x20000014
 800179c:	200084b8 	.word	0x200084b8

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200084b8 	.word	0x200084b8

080017b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff ffee 	bl	80017a0 <HAL_GetTick>
 80017c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	d005      	beq.n	80017de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d2:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_Delay+0x44>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017de:	bf00      	nop
 80017e0:	f7ff ffde 	bl	80017a0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d8f7      	bhi.n	80017e0 <HAL_Delay+0x28>
  {
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000014 	.word	0x20000014

08001800 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e031      	b.n	800187a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fca8 	bl	8001174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <HAL_ADC_Init+0x84>)
 8001844:	4013      	ands	r3, r2
 8001846:	f043 0202 	orr.w	r2, r3, #2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 fbf2 	bl	8002038 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f023 0303 	bic.w	r3, r3, #3
 8001862:	f043 0201 	orr.w	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	@ 0x40
 800186a:	e001      	b.n	8001870 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	ffffeefd 	.word	0xffffeefd

08001888 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d049      	beq.n	8001952 <HAL_ADC_IRQHandler+0xca>
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d046      	beq.n	8001952 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d12b      	bne.n	8001942 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d127      	bne.n	8001942 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800190a:	2b00      	cmp	r3, #0
 800190c:	d119      	bne.n	8001942 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0220 	bic.w	r2, r2, #32
 800191c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d105      	bne.n	8001942 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fac4 	bl	8000ed0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0212 	mvn.w	r2, #18
 8001950:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001960:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d057      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x190>
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d054      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d139      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d12b      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d124      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11d      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d119      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fc91 	bl	8002330 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f06f 020c 	mvn.w	r2, #12
 8001a16:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a26:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d017      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x1d6>
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d014      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10d      	bne.n	8001a5e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f988 	bl	8001d64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0201 	mvn.w	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a6c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d015      	beq.n	8001aa0 <HAL_ADC_IRQHandler+0x218>
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d012      	beq.n	8001aa0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	f043 0202 	orr.w	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f06f 0220 	mvn.w	r2, #32
 8001a8e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f971 	bl	8001d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f06f 0220 	mvn.w	r2, #32
 8001a9e:	601a      	str	r2, [r3, #0]
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_Start_DMA+0x1e>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e0d4      	b.n	8001c70 <HAL_ADC_Start_DMA+0x1c8>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d018      	beq.n	8001b0e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001aec:	4b62      	ldr	r3, [pc, #392]	@ (8001c78 <HAL_ADC_Start_DMA+0x1d0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a62      	ldr	r2, [pc, #392]	@ (8001c7c <HAL_ADC_Start_DMA+0x1d4>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0c9a      	lsrs	r2, r3, #18
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001b00:	e002      	b.n	8001b08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f9      	bne.n	8001b02 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	f040 809c 	bne.w	8001c56 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b22:	4b57      	ldr	r3, [pc, #348]	@ (8001c80 <HAL_ADC_Start_DMA+0x1d8>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b44:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b58:	d106      	bne.n	8001b68 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f023 0206 	bic.w	r2, r3, #6
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b66:	e002      	b.n	8001b6e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b7a:	4a42      	ldr	r2, [pc, #264]	@ (8001c84 <HAL_ADC_Start_DMA+0x1dc>)
 8001b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b82:	4a41      	ldr	r2, [pc, #260]	@ (8001c88 <HAL_ADC_Start_DMA+0x1e0>)
 8001b84:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8a:	4a40      	ldr	r2, [pc, #256]	@ (8001c8c <HAL_ADC_Start_DMA+0x1e4>)
 8001b8c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001ba6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bb6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	334c      	adds	r3, #76	@ 0x4c
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f000 fdf4 	bl	80027b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001bcc:	4b30      	ldr	r3, [pc, #192]	@ (8001c90 <HAL_ADC_Start_DMA+0x1e8>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10f      	bne.n	8001bf8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d143      	bne.n	8001c6e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	e03a      	b.n	8001c6e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a25      	ldr	r2, [pc, #148]	@ (8001c94 <HAL_ADC_Start_DMA+0x1ec>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d10e      	bne.n	8001c20 <HAL_ADC_Start_DMA+0x178>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d107      	bne.n	8001c20 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c1e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c20:	4b1b      	ldr	r3, [pc, #108]	@ (8001c90 <HAL_ADC_Start_DMA+0x1e8>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d120      	bne.n	8001c6e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a19      	ldr	r2, [pc, #100]	@ (8001c98 <HAL_ADC_Start_DMA+0x1f0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d11b      	bne.n	8001c6e <HAL_ADC_Start_DMA+0x1c6>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d114      	bne.n	8001c6e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	e00b      	b.n	8001c6e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f043 0210 	orr.w	r2, r3, #16
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	2000000c 	.word	0x2000000c
 8001c7c:	431bde83 	.word	0x431bde83
 8001c80:	fffff8fe 	.word	0xfffff8fe
 8001c84:	0800222d 	.word	0x0800222d
 8001c88:	080022e7 	.word	0x080022e7
 8001c8c:	08002303 	.word	0x08002303
 8001c90:	40012300 	.word	0x40012300
 8001c94:	40012000 	.word	0x40012000
 8001c98:	40012200 	.word	0x40012200

08001c9c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_Stop_DMA+0x1a>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e046      	b.n	8001d44 <HAL_ADC_Stop_DMA+0xa8>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d12e      	bne.n	8001d3a <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cea:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d10f      	bne.n	8001d1a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fdb8 	bl	8002874 <HAL_DMA_Abort>
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001d28:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d2e:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <HAL_ADC_Stop_DMA+0xb0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	ffffeefe 	.word	0xffffeefe

08001d50 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1c>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e136      	b.n	8002016 <HAL_ADC_ConfigChannel+0x28a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b09      	cmp	r3, #9
 8001db6:	d93a      	bls.n	8001e2e <HAL_ADC_ConfigChannel+0xa2>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001dc0:	d035      	beq.n	8001e2e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68d9      	ldr	r1, [r3, #12]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b1e      	subs	r3, #30
 8001dd8:	2207      	movs	r2, #7
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	400a      	ands	r2, r1
 8001de6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a8d      	ldr	r2, [pc, #564]	@ (8002024 <HAL_ADC_ConfigChannel+0x298>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10a      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68d9      	ldr	r1, [r3, #12]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	061a      	lsls	r2, r3, #24
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e06:	e035      	b.n	8001e74 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68d9      	ldr	r1, [r3, #12]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4403      	add	r3, r0
 8001e20:	3b1e      	subs	r3, #30
 8001e22:	409a      	lsls	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e2c:	e022      	b.n	8001e74 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6919      	ldr	r1, [r3, #16]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	2207      	movs	r2, #7
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	400a      	ands	r2, r1
 8001e50:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6919      	ldr	r1, [r3, #16]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	4603      	mov	r3, r0
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4403      	add	r3, r0
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b06      	cmp	r3, #6
 8001e7a:	d824      	bhi.n	8001ec6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b05      	subs	r3, #5
 8001e8e:	221f      	movs	r2, #31
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43da      	mvns	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b05      	subs	r3, #5
 8001eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ec4:	e04c      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d824      	bhi.n	8001f18 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	3b23      	subs	r3, #35	@ 0x23
 8001ee0:	221f      	movs	r2, #31
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	400a      	ands	r2, r1
 8001eee:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b23      	subs	r3, #35	@ 0x23
 8001f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f16:	e023      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b41      	subs	r3, #65	@ 0x41
 8001f2a:	221f      	movs	r2, #31
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43da      	mvns	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	400a      	ands	r2, r1
 8001f38:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b41      	subs	r3, #65	@ 0x41
 8001f54:	fa00 f203 	lsl.w	r2, r0, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a30      	ldr	r2, [pc, #192]	@ (8002028 <HAL_ADC_ConfigChannel+0x29c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d10a      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1f4>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f72:	d105      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001f74:	4b2d      	ldr	r3, [pc, #180]	@ (800202c <HAL_ADC_ConfigChannel+0x2a0>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a2c      	ldr	r2, [pc, #176]	@ (800202c <HAL_ADC_ConfigChannel+0x2a0>)
 8001f7a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f7e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a28      	ldr	r2, [pc, #160]	@ (8002028 <HAL_ADC_ConfigChannel+0x29c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d10f      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x21e>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b12      	cmp	r3, #18
 8001f90:	d10b      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001f92:	4b26      	ldr	r3, [pc, #152]	@ (800202c <HAL_ADC_ConfigChannel+0x2a0>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4a25      	ldr	r2, [pc, #148]	@ (800202c <HAL_ADC_ConfigChannel+0x2a0>)
 8001f98:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001f9c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001f9e:	4b23      	ldr	r3, [pc, #140]	@ (800202c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4a22      	ldr	r2, [pc, #136]	@ (800202c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fa4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fa8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1e      	ldr	r2, [pc, #120]	@ (8002028 <HAL_ADC_ConfigChannel+0x29c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d12b      	bne.n	800200c <HAL_ADC_ConfigChannel+0x280>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8002024 <HAL_ADC_ConfigChannel+0x298>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d003      	beq.n	8001fc6 <HAL_ADC_ConfigChannel+0x23a>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b11      	cmp	r3, #17
 8001fc4:	d122      	bne.n	800200c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	@ (800202c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a18      	ldr	r2, [pc, #96]	@ (800202c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fcc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001fd0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001fd2:	4b16      	ldr	r3, [pc, #88]	@ (800202c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a15      	ldr	r2, [pc, #84]	@ (800202c <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fdc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a10      	ldr	r2, [pc, #64]	@ (8002024 <HAL_ADC_ConfigChannel+0x298>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d111      	bne.n	800200c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_ADC_ConfigChannel+0x2a4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a11      	ldr	r2, [pc, #68]	@ (8002034 <HAL_ADC_ConfigChannel+0x2a8>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0c9a      	lsrs	r2, r3, #18
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ffe:	e002      	b.n	8002006 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3b01      	subs	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f9      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	10000012 	.word	0x10000012
 8002028:	40012000 	.word	0x40012000
 800202c:	40012300 	.word	0x40012300
 8002030:	2000000c 	.word	0x2000000c
 8002034:	431bde83 	.word	0x431bde83

08002038 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002040:	4b78      	ldr	r3, [pc, #480]	@ (8002224 <ADC_Init+0x1ec>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a77      	ldr	r2, [pc, #476]	@ (8002224 <ADC_Init+0x1ec>)
 8002046:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800204a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800204c:	4b75      	ldr	r3, [pc, #468]	@ (8002224 <ADC_Init+0x1ec>)
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4973      	ldr	r1, [pc, #460]	@ (8002224 <ADC_Init+0x1ec>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002068:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	021a      	lsls	r2, r3, #8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800208c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6899      	ldr	r1, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c6:	4a58      	ldr	r2, [pc, #352]	@ (8002228 <ADC_Init+0x1f0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d022      	beq.n	8002112 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6899      	ldr	r1, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6899      	ldr	r1, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	e00f      	b.n	8002132 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002120:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002130:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0202 	bic.w	r2, r2, #2
 8002140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6899      	ldr	r1, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	005a      	lsls	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01b      	beq.n	8002198 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800216e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800217e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	3b01      	subs	r3, #1
 800218c:	035a      	lsls	r2, r3, #13
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	e007      	b.n	80021a8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80021b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	051a      	lsls	r2, r3, #20
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6899      	ldr	r1, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021ea:	025a      	lsls	r2, r3, #9
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002202:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	029a      	lsls	r2, r3, #10
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	609a      	str	r2, [r3, #8]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40012300 	.word	0x40012300
 8002228:	0f000001 	.word	0x0f000001

0800222c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002238:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002242:	2b00      	cmp	r3, #0
 8002244:	d13c      	bne.n	80022c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d12b      	bne.n	80022b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002264:	2b00      	cmp	r3, #0
 8002266:	d127      	bne.n	80022b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002280:	2b00      	cmp	r3, #0
 8002282:	d119      	bne.n	80022b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0220 	bic.w	r2, r2, #32
 8002292:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7fe fe09 	bl	8000ed0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022be:	e00e      	b.n	80022de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f7ff fd53 	bl	8001d78 <HAL_ADC_ErrorCallback>
}
 80022d2:	e004      	b.n	80022de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7ff fd2b 	bl	8001d50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800230e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2240      	movs	r2, #64	@ 0x40
 8002314:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f043 0204 	orr.w	r2, r3, #4
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f7ff fd28 	bl	8001d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <__NVIC_SetPriorityGrouping+0x40>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	4313      	orrs	r3, r2
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <__NVIC_SetPriorityGrouping+0x40>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00
 8002388:	05fa0000 	.word	0x05fa0000

0800238c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002390:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 0307 	and.w	r3, r3, #7
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db0b      	blt.n	80023d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4907      	ldr	r1, [pc, #28]	@ (80023e0 <__NVIC_EnableIRQ+0x38>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2001      	movs	r0, #1
 80023ca:	fa00 f202 	lsl.w	r2, r0, r2
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	@ (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	@ 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f7ff ff8e 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff29 	bl	8002344 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff3e 	bl	800238c <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff8e 	bl	8002438 <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5d 	bl	80023e4 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff31 	bl	80023a8 <__NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffa2 	bl	80024a0 <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800256c:	f3bf 8f5f 	dmb	sy
}
 8002570:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002572:	4b07      	ldr	r3, [pc, #28]	@ (8002590 <HAL_MPU_Disable+0x28>)
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	4a06      	ldr	r2, [pc, #24]	@ (8002590 <HAL_MPU_Disable+0x28>)
 8002578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800257c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800257e:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <HAL_MPU_Disable+0x2c>)
 8002580:	2200      	movs	r2, #0
 8002582:	605a      	str	r2, [r3, #4]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000ed00 	.word	0xe000ed00
 8002594:	e000ed90 	.word	0xe000ed90

08002598 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80025a0:	4a0b      	ldr	r2, [pc, #44]	@ (80025d0 <HAL_MPU_Enable+0x38>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80025aa:	4b0a      	ldr	r3, [pc, #40]	@ (80025d4 <HAL_MPU_Enable+0x3c>)
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	4a09      	ldr	r2, [pc, #36]	@ (80025d4 <HAL_MPU_Enable+0x3c>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80025b6:	f3bf 8f4f 	dsb	sy
}
 80025ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025bc:	f3bf 8f6f 	isb	sy
}
 80025c0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000ed90 	.word	0xe000ed90
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	785a      	ldrb	r2, [r3, #1]
 80025e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <HAL_MPU_ConfigRegion+0x7c>)
 80025e6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80025e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <HAL_MPU_ConfigRegion+0x7c>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4a19      	ldr	r2, [pc, #100]	@ (8002654 <HAL_MPU_ConfigRegion+0x7c>)
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80025f4:	4a17      	ldr	r2, [pc, #92]	@ (8002654 <HAL_MPU_ConfigRegion+0x7c>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7b1b      	ldrb	r3, [r3, #12]
 8002600:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7adb      	ldrb	r3, [r3, #11]
 8002606:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002608:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7a9b      	ldrb	r3, [r3, #10]
 800260e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002610:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7b5b      	ldrb	r3, [r3, #13]
 8002616:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002618:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7b9b      	ldrb	r3, [r3, #14]
 800261e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002620:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7bdb      	ldrb	r3, [r3, #15]
 8002626:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002628:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7a5b      	ldrb	r3, [r3, #9]
 800262e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002630:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7a1b      	ldrb	r3, [r3, #8]
 8002636:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002638:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002640:	4a04      	ldr	r2, [pc, #16]	@ (8002654 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002642:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002644:	6113      	str	r3, [r2, #16]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000ed90 	.word	0xe000ed90

08002658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff f89c 	bl	80017a0 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e099      	b.n	80027a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002694:	e00f      	b.n	80026b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002696:	f7ff f883 	bl	80017a0 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d908      	bls.n	80026b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2220      	movs	r2, #32
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2203      	movs	r2, #3
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e078      	b.n	80027a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1e8      	bne.n	8002696 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4b38      	ldr	r3, [pc, #224]	@ (80027b0 <HAL_DMA_Init+0x158>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	2b04      	cmp	r3, #4
 800270e:	d107      	bne.n	8002720 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	4313      	orrs	r3, r2
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f023 0307 	bic.w	r3, r3, #7
 8002736:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	2b04      	cmp	r3, #4
 8002748:	d117      	bne.n	800277a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00e      	beq.n	800277a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fae7 	bl	8002d30 <DMA_CheckFifoParam>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2240      	movs	r2, #64	@ 0x40
 800276c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002776:	2301      	movs	r3, #1
 8002778:	e016      	b.n	80027a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fa9e 	bl	8002cc4 <DMA_CalcBaseAndBitshift>
 8002788:	4603      	mov	r3, r0
 800278a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002790:	223f      	movs	r2, #63	@ 0x3f
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	e010803f 	.word	0xe010803f

080027b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_DMA_Start_IT+0x26>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e048      	b.n	800286c <HAL_DMA_Start_IT+0xb8>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d137      	bne.n	800285e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2202      	movs	r2, #2
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fa30 	bl	8002c68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280c:	223f      	movs	r2, #63	@ 0x3f
 800280e:	409a      	lsls	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0216 	orr.w	r2, r2, #22
 8002822:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002832:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0208 	orr.w	r2, r2, #8
 800284a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e005      	b.n	800286a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002866:	2302      	movs	r3, #2
 8002868:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800286a:	7dfb      	ldrb	r3, [r7, #23]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002880:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002882:	f7fe ff8d 	bl	80017a0 <HAL_GetTick>
 8002886:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d008      	beq.n	80028a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2280      	movs	r2, #128	@ 0x80
 8002898:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e052      	b.n	800294c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0216 	bic.w	r2, r2, #22
 80028b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d103      	bne.n	80028d6 <HAL_DMA_Abort+0x62>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0208 	bic.w	r2, r2, #8
 80028e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f6:	e013      	b.n	8002920 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028f8:	f7fe ff52 	bl	80017a0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b05      	cmp	r3, #5
 8002904:	d90c      	bls.n	8002920 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2220      	movs	r2, #32
 800290a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2203      	movs	r2, #3
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e015      	b.n	800294c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1e4      	bne.n	80028f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002932:	223f      	movs	r2, #63	@ 0x3f
 8002934:	409a      	lsls	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002960:	4b8e      	ldr	r3, [pc, #568]	@ (8002b9c <HAL_DMA_IRQHandler+0x248>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a8e      	ldr	r2, [pc, #568]	@ (8002ba0 <HAL_DMA_IRQHandler+0x24c>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0a9b      	lsrs	r3, r3, #10
 800296c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002972:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297e:	2208      	movs	r2, #8
 8002980:	409a      	lsls	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01a      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0204 	bic.w	r2, r2, #4
 80029a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ac:	2208      	movs	r2, #8
 80029ae:	409a      	lsls	r2, r3
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c4:	2201      	movs	r2, #1
 80029c6:	409a      	lsls	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d012      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e2:	2201      	movs	r2, #1
 80029e4:	409a      	lsls	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ee:	f043 0202 	orr.w	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fa:	2204      	movs	r2, #4
 80029fc:	409a      	lsls	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d012      	beq.n	8002a2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00b      	beq.n	8002a2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a18:	2204      	movs	r2, #4
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a24:	f043 0204 	orr.w	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a30:	2210      	movs	r2, #16
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d043      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d03c      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4e:	2210      	movs	r2, #16
 8002a50:	409a      	lsls	r2, r3
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d018      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d108      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d024      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
 8002a82:	e01f      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
 8002a94:	e016      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d107      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0208 	bic.w	r2, r2, #8
 8002ab2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac8:	2220      	movs	r2, #32
 8002aca:	409a      	lsls	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 808f 	beq.w	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8087 	beq.w	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aea:	2220      	movs	r2, #32
 8002aec:	409a      	lsls	r2, r3
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d136      	bne.n	8002b6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0216 	bic.w	r2, r2, #22
 8002b0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <HAL_DMA_IRQHandler+0x1da>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0208 	bic.w	r2, r2, #8
 8002b3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b42:	223f      	movs	r2, #63	@ 0x3f
 8002b44:	409a      	lsls	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d07e      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
        }
        return;
 8002b6a:	e079      	b.n	8002c60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01d      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d031      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
 8002b98:	e02c      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
 8002b9a:	bf00      	nop
 8002b9c:	2000000c 	.word	0x2000000c
 8002ba0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d023      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
 8002bb4:	e01e      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10f      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0210 	bic.w	r2, r2, #16
 8002bd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d032      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d022      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2205      	movs	r2, #5
 8002c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	3301      	adds	r3, #1
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d307      	bcc.n	8002c3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f2      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x2cc>
 8002c3a:	e000      	b.n	8002c3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4798      	blx	r3
 8002c5e:	e000      	b.n	8002c62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c60:	bf00      	nop
    }
  }
}
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b40      	cmp	r3, #64	@ 0x40
 8002c94:	d108      	bne.n	8002ca8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ca6:	e007      	b.n	8002cb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3b10      	subs	r3, #16
 8002cd4:	4a13      	ldr	r2, [pc, #76]	@ (8002d24 <DMA_CalcBaseAndBitshift+0x60>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cde:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <DMA_CalcBaseAndBitshift+0x64>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d908      	bls.n	8002d04 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <DMA_CalcBaseAndBitshift+0x68>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	1d1a      	adds	r2, r3, #4
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d02:	e006      	b.n	8002d12 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <DMA_CalcBaseAndBitshift+0x68>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	aaaaaaab 	.word	0xaaaaaaab
 8002d28:	0800bb30 	.word	0x0800bb30
 8002d2c:	fffffc00 	.word	0xfffffc00

08002d30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11f      	bne.n	8002d8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d856      	bhi.n	8002dfe <DMA_CheckFifoParam+0xce>
 8002d50:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <DMA_CheckFifoParam+0x28>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d69 	.word	0x08002d69
 8002d5c:	08002d7b 	.word	0x08002d7b
 8002d60:	08002d69 	.word	0x08002d69
 8002d64:	08002dff 	.word	0x08002dff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d046      	beq.n	8002e02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d78:	e043      	b.n	8002e02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d82:	d140      	bne.n	8002e06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d88:	e03d      	b.n	8002e06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d92:	d121      	bne.n	8002dd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d837      	bhi.n	8002e0a <DMA_CheckFifoParam+0xda>
 8002d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002da0 <DMA_CheckFifoParam+0x70>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002db1 	.word	0x08002db1
 8002da4:	08002db7 	.word	0x08002db7
 8002da8:	08002db1 	.word	0x08002db1
 8002dac:	08002dc9 	.word	0x08002dc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      break;
 8002db4:	e030      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d025      	beq.n	8002e0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc6:	e022      	b.n	8002e0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002dd0:	d11f      	bne.n	8002e12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dd6:	e01c      	b.n	8002e12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d903      	bls.n	8002de6 <DMA_CheckFifoParam+0xb6>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d003      	beq.n	8002dec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002de4:	e018      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dea:	e015      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00e      	beq.n	8002e16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfc:	e00b      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e00a      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e02:	bf00      	nop
 8002e04:	e008      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
 8002e08:	e006      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e004      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e002      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e16:	bf00      	nop
    }
  } 
  
  return status; 
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop

08002e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	@ 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	e175      	b.n	8003134 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f040 8164 	bne.w	800312e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d005      	beq.n	8002e7e <HAL_GPIO_Init+0x56>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d130      	bne.n	8002ee0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	2203      	movs	r2, #3
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0201 	and.w	r2, r3, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d017      	beq.n	8002f1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d123      	bne.n	8002f70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80be 	beq.w	800312e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb2:	4b66      	ldr	r3, [pc, #408]	@ (800314c <HAL_GPIO_Init+0x324>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	4a65      	ldr	r2, [pc, #404]	@ (800314c <HAL_GPIO_Init+0x324>)
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fbe:	4b63      	ldr	r3, [pc, #396]	@ (800314c <HAL_GPIO_Init+0x324>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fca:	4a61      	ldr	r2, [pc, #388]	@ (8003150 <HAL_GPIO_Init+0x328>)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	220f      	movs	r2, #15
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a58      	ldr	r2, [pc, #352]	@ (8003154 <HAL_GPIO_Init+0x32c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d037      	beq.n	8003066 <HAL_GPIO_Init+0x23e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a57      	ldr	r2, [pc, #348]	@ (8003158 <HAL_GPIO_Init+0x330>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d031      	beq.n	8003062 <HAL_GPIO_Init+0x23a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a56      	ldr	r2, [pc, #344]	@ (800315c <HAL_GPIO_Init+0x334>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d02b      	beq.n	800305e <HAL_GPIO_Init+0x236>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a55      	ldr	r2, [pc, #340]	@ (8003160 <HAL_GPIO_Init+0x338>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d025      	beq.n	800305a <HAL_GPIO_Init+0x232>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a54      	ldr	r2, [pc, #336]	@ (8003164 <HAL_GPIO_Init+0x33c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01f      	beq.n	8003056 <HAL_GPIO_Init+0x22e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a53      	ldr	r2, [pc, #332]	@ (8003168 <HAL_GPIO_Init+0x340>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d019      	beq.n	8003052 <HAL_GPIO_Init+0x22a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a52      	ldr	r2, [pc, #328]	@ (800316c <HAL_GPIO_Init+0x344>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_GPIO_Init+0x226>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a51      	ldr	r2, [pc, #324]	@ (8003170 <HAL_GPIO_Init+0x348>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00d      	beq.n	800304a <HAL_GPIO_Init+0x222>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a50      	ldr	r2, [pc, #320]	@ (8003174 <HAL_GPIO_Init+0x34c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <HAL_GPIO_Init+0x21e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4f      	ldr	r2, [pc, #316]	@ (8003178 <HAL_GPIO_Init+0x350>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_GPIO_Init+0x21a>
 800303e:	2309      	movs	r3, #9
 8003040:	e012      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003042:	230a      	movs	r3, #10
 8003044:	e010      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003046:	2308      	movs	r3, #8
 8003048:	e00e      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800304a:	2307      	movs	r3, #7
 800304c:	e00c      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800304e:	2306      	movs	r3, #6
 8003050:	e00a      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003052:	2305      	movs	r3, #5
 8003054:	e008      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003056:	2304      	movs	r3, #4
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800305a:	2303      	movs	r3, #3
 800305c:	e004      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800305e:	2302      	movs	r3, #2
 8003060:	e002      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003066:	2300      	movs	r3, #0
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f002 0203 	and.w	r2, r2, #3
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	4093      	lsls	r3, r2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003078:	4935      	ldr	r1, [pc, #212]	@ (8003150 <HAL_GPIO_Init+0x328>)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	3302      	adds	r3, #2
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003086:	4b3d      	ldr	r3, [pc, #244]	@ (800317c <HAL_GPIO_Init+0x354>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030aa:	4a34      	ldr	r2, [pc, #208]	@ (800317c <HAL_GPIO_Init+0x354>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b0:	4b32      	ldr	r3, [pc, #200]	@ (800317c <HAL_GPIO_Init+0x354>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030d4:	4a29      	ldr	r2, [pc, #164]	@ (800317c <HAL_GPIO_Init+0x354>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030da:	4b28      	ldr	r3, [pc, #160]	@ (800317c <HAL_GPIO_Init+0x354>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030fe:	4a1f      	ldr	r2, [pc, #124]	@ (800317c <HAL_GPIO_Init+0x354>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003104:	4b1d      	ldr	r3, [pc, #116]	@ (800317c <HAL_GPIO_Init+0x354>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003128:	4a14      	ldr	r2, [pc, #80]	@ (800317c <HAL_GPIO_Init+0x354>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3301      	adds	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b0f      	cmp	r3, #15
 8003138:	f67f ae86 	bls.w	8002e48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3724      	adds	r7, #36	@ 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	40013800 	.word	0x40013800
 8003154:	40020000 	.word	0x40020000
 8003158:	40020400 	.word	0x40020400
 800315c:	40020800 	.word	0x40020800
 8003160:	40020c00 	.word	0x40020c00
 8003164:	40021000 	.word	0x40021000
 8003168:	40021400 	.word	0x40021400
 800316c:	40021800 	.word	0x40021800
 8003170:	40021c00 	.word	0x40021c00
 8003174:	40022000 	.word	0x40022000
 8003178:	40022400 	.word	0x40022400
 800317c:	40013c00 	.word	0x40013c00

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800319c:	e003      	b.n	80031a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	041a      	lsls	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	619a      	str	r2, [r3, #24]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031be:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d006      	beq.n	80031d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031ca:	4a05      	ldr	r2, [pc, #20]	@ (80031e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd fe1e 	bl	8000e14 <HAL_GPIO_EXTI_Callback>
  }
}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40013c00 	.word	0x40013c00

080031e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e08b      	b.n	800330e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe f82e 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	@ 0x24
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003234:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003244:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d107      	bne.n	800325e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	e006      	b.n	800326c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800326a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d108      	bne.n	8003286 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	e007      	b.n	8003296 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003294:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003318 <HAL_I2C_Init+0x134>)
 80032a2:	430b      	orrs	r3, r1
 80032a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69d9      	ldr	r1, [r3, #28]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	02008000 	.word	0x02008000

0800331c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	4608      	mov	r0, r1
 8003326:	4611      	mov	r1, r2
 8003328:	461a      	mov	r2, r3
 800332a:	4603      	mov	r3, r0
 800332c:	817b      	strh	r3, [r7, #10]
 800332e:	460b      	mov	r3, r1
 8003330:	813b      	strh	r3, [r7, #8]
 8003332:	4613      	mov	r3, r2
 8003334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b20      	cmp	r3, #32
 8003340:	f040 80f9 	bne.w	8003536 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_I2C_Mem_Write+0x34>
 800334a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003356:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0ed      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_I2C_Mem_Write+0x4e>
 8003366:	2302      	movs	r3, #2
 8003368:	e0e6      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003372:	f7fe fa15 	bl	80017a0 <HAL_GetTick>
 8003376:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2319      	movs	r3, #25
 800337e:	2201      	movs	r2, #1
 8003380:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f955 	bl	8003634 <I2C_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0d1      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2221      	movs	r2, #33	@ 0x21
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2240      	movs	r2, #64	@ 0x40
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a3a      	ldr	r2, [r7, #32]
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033bc:	88f8      	ldrh	r0, [r7, #6]
 80033be:	893a      	ldrh	r2, [r7, #8]
 80033c0:	8979      	ldrh	r1, [r7, #10]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	4603      	mov	r3, r0
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f8b9 	bl	8003544 <I2C_RequestMemoryWrite>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0a9      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2bff      	cmp	r3, #255	@ 0xff
 80033ec:	d90e      	bls.n	800340c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	22ff      	movs	r2, #255	@ 0xff
 80033f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	8979      	ldrh	r1, [r7, #10]
 80033fc:	2300      	movs	r3, #0
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fad9 	bl	80039bc <I2C_TransferConfig>
 800340a:	e00f      	b.n	800342c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341a:	b2da      	uxtb	r2, r3
 800341c:	8979      	ldrh	r1, [r7, #10]
 800341e:	2300      	movs	r3, #0
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fac8 	bl	80039bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f958 	bl	80036e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e07b      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d034      	beq.n	80034e4 <HAL_I2C_Mem_Write+0x1c8>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347e:	2b00      	cmp	r3, #0
 8003480:	d130      	bne.n	80034e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003488:	2200      	movs	r2, #0
 800348a:	2180      	movs	r1, #128	@ 0x80
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f8d1 	bl	8003634 <I2C_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e04d      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2bff      	cmp	r3, #255	@ 0xff
 80034a4:	d90e      	bls.n	80034c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	22ff      	movs	r2, #255	@ 0xff
 80034aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	8979      	ldrh	r1, [r7, #10]
 80034b4:	2300      	movs	r3, #0
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 fa7d 	bl	80039bc <I2C_TransferConfig>
 80034c2:	e00f      	b.n	80034e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	2300      	movs	r3, #0
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fa6c 	bl	80039bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d19e      	bne.n	800342c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f93e 	bl	8003774 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e01a      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2220      	movs	r2, #32
 8003508:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <HAL_I2C_Mem_Write+0x224>)
 8003516:	400b      	ands	r3, r1
 8003518:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	e000      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003536:	2302      	movs	r3, #2
  }
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	fe00e800 	.word	0xfe00e800

08003544 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	4608      	mov	r0, r1
 800354e:	4611      	mov	r1, r2
 8003550:	461a      	mov	r2, r3
 8003552:	4603      	mov	r3, r0
 8003554:	817b      	strh	r3, [r7, #10]
 8003556:	460b      	mov	r3, r1
 8003558:	813b      	strh	r3, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	8979      	ldrh	r1, [r7, #10]
 8003564:	4b20      	ldr	r3, [pc, #128]	@ (80035e8 <I2C_RequestMemoryWrite+0xa4>)
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fa25 	bl	80039bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	69b9      	ldr	r1, [r7, #24]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f8b5 	bl	80036e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e02c      	b.n	80035e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800358c:	893b      	ldrh	r3, [r7, #8]
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	629a      	str	r2, [r3, #40]	@ 0x28
 8003596:	e015      	b.n	80035c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003598:	893b      	ldrh	r3, [r7, #8]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	b29b      	uxth	r3, r3
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	69b9      	ldr	r1, [r7, #24]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f89b 	bl	80036e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e012      	b.n	80035e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ba:	893b      	ldrh	r3, [r7, #8]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2200      	movs	r2, #0
 80035cc:	2180      	movs	r1, #128	@ 0x80
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f830 	bl	8003634 <I2C_WaitOnFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	80002000 	.word	0x80002000

080035ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d103      	bne.n	800360a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2200      	movs	r2, #0
 8003608:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d007      	beq.n	8003628 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	619a      	str	r2, [r3, #24]
  }
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003644:	e03b      	b.n	80036be <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	6839      	ldr	r1, [r7, #0]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f8d6 	bl	80037fc <I2C_IsErrorOccurred>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e041      	b.n	80036de <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d02d      	beq.n	80036be <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7fe f89d 	bl	80017a0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d122      	bne.n	80036be <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	429a      	cmp	r2, r3
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	429a      	cmp	r2, r3
 8003694:	d113      	bne.n	80036be <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369a:	f043 0220 	orr.w	r2, r3, #32
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00f      	b.n	80036de <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4013      	ands	r3, r2
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	bf0c      	ite	eq
 80036ce:	2301      	moveq	r3, #1
 80036d0:	2300      	movne	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d0b4      	beq.n	8003646 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036f2:	e033      	b.n	800375c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f87f 	bl	80037fc <I2C_IsErrorOccurred>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e031      	b.n	800376c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d025      	beq.n	800375c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003710:	f7fe f846 	bl	80017a0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	429a      	cmp	r2, r3
 800371e:	d302      	bcc.n	8003726 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d11a      	bne.n	800375c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	d013      	beq.n	800375c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e007      	b.n	800376c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b02      	cmp	r3, #2
 8003768:	d1c4      	bne.n	80036f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003780:	e02f      	b.n	80037e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f838 	bl	80037fc <I2C_IsErrorOccurred>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e02d      	b.n	80037f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fe f803 	bl	80017a0 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d11a      	bne.n	80037e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d013      	beq.n	80037e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037be:	f043 0220 	orr.w	r2, r3, #32
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e007      	b.n	80037f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d1c8      	bne.n	8003782 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	@ 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	d068      	beq.n	80038fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2210      	movs	r2, #16
 800382e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003830:	e049      	b.n	80038c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d045      	beq.n	80038c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7fd ffb1 	bl	80017a0 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <I2C_IsErrorOccurred+0x54>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d13a      	bne.n	80038c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800385a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003862:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800386e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003872:	d121      	bne.n	80038b8 <I2C_IsErrorOccurred+0xbc>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800387a:	d01d      	beq.n	80038b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	2b20      	cmp	r3, #32
 8003880:	d01a      	beq.n	80038b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003890:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003892:	f7fd ff85 	bl	80017a0 <HAL_GetTick>
 8003896:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003898:	e00e      	b.n	80038b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800389a:	f7fd ff81 	bl	80017a0 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b19      	cmp	r3, #25
 80038a6:	d907      	bls.n	80038b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	f043 0320 	orr.w	r3, r3, #32
 80038ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80038b6:	e006      	b.n	80038c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d1e9      	bne.n	800389a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d003      	beq.n	80038dc <I2C_IsErrorOccurred+0xe0>
 80038d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0aa      	beq.n	8003832 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d103      	bne.n	80038ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2220      	movs	r2, #32
 80038ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00b      	beq.n	8003924 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800391c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	f043 0308 	orr.w	r3, r3, #8
 8003934:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800393e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00b      	beq.n	8003968 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f043 0302 	orr.w	r3, r3, #2
 8003956:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003960:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01c      	beq.n	80039aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7ff fe3b 	bl	80035ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6859      	ldr	r1, [r3, #4]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4b0d      	ldr	r3, [pc, #52]	@ (80039b8 <I2C_IsErrorOccurred+0x1bc>)
 8003982:	400b      	ands	r3, r1
 8003984:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80039aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3728      	adds	r7, #40	@ 0x28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	fe00e800 	.word	0xfe00e800

080039bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	817b      	strh	r3, [r7, #10]
 80039ca:	4613      	mov	r3, r2
 80039cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039ce:	897b      	ldrh	r3, [r7, #10]
 80039d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039d4:	7a7b      	ldrb	r3, [r7, #9]
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	0d5b      	lsrs	r3, r3, #21
 80039f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039fa:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <I2C_TransferConfig+0x60>)
 80039fc:	430b      	orrs	r3, r1
 80039fe:	43db      	mvns	r3, r3
 8003a00:	ea02 0103 	and.w	r1, r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	03ff63ff 	.word	0x03ff63ff

08003a20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d138      	bne.n	8003aa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e032      	b.n	8003aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2224      	movs	r2, #36	@ 0x24
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6819      	ldr	r1, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e000      	b.n	8003aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
  }
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b085      	sub	sp, #20
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d139      	bne.n	8003b40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e033      	b.n	8003b42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2224      	movs	r2, #36	@ 0x24
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e000      	b.n	8003b42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
  }
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af02      	add	r7, sp, #8
 8003b54:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e108      	b.n	8003d72 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f007 fae0 	bl	800b140 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2203      	movs	r2, #3
 8003b84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b8e:	d102      	bne.n	8003b96 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f003 fe43 	bl	8007826 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	7c1a      	ldrb	r2, [r3, #16]
 8003ba8:	f88d 2000 	strb.w	r2, [sp]
 8003bac:	3304      	adds	r3, #4
 8003bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bb0:	f003 fd2c 	bl	800760c <USB_CoreInit>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0d5      	b.n	8003d72 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f003 fe3b 	bl	8007848 <USB_SetCurrentMode>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0c6      	b.n	8003d72 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	e04a      	b.n	8003c80 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	3315      	adds	r3, #21
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bfe:	7bfa      	ldrb	r2, [r7, #15]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3314      	adds	r3, #20
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	b298      	uxth	r0, r3
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	332e      	adds	r3, #46	@ 0x2e
 8003c26:	4602      	mov	r2, r0
 8003c28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c2a:	7bfa      	ldrb	r2, [r7, #15]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3318      	adds	r3, #24
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	331c      	adds	r3, #28
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	3320      	adds	r3, #32
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c66:	7bfa      	ldrb	r2, [r7, #15]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	3324      	adds	r3, #36	@ 0x24
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	791b      	ldrb	r3, [r3, #4]
 8003c84:	7bfa      	ldrb	r2, [r7, #15]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3af      	bcc.n	8003bea <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]
 8003c8e:	e044      	b.n	8003d1a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c90:	7bfa      	ldrb	r2, [r7, #15]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003cb8:	7bfa      	ldrb	r2, [r7, #15]
 8003cba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cd2:	7bfa      	ldrb	r2, [r7, #15]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	3301      	adds	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	791b      	ldrb	r3, [r3, #4]
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d3b5      	bcc.n	8003c90 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	7c1a      	ldrb	r2, [r3, #16]
 8003d2c:	f88d 2000 	strb.w	r2, [sp]
 8003d30:	3304      	adds	r3, #4
 8003d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d34:	f003 fdd4 	bl	80078e0 <USB_DevInit>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e013      	b.n	8003d72 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	7b1b      	ldrb	r3, [r3, #12]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d102      	bne.n	8003d66 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f001 f959 	bl	8005018 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f004 fe13 	bl	8008996 <USB_DevDisconnect>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_PCD_Start+0x16>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e012      	b.n	8003db6 <HAL_PCD_Start+0x3c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f003 fd31 	bl	8007804 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f004 fdd4 	bl	8008954 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003dbe:	b590      	push	{r4, r7, lr}
 8003dc0:	b08d      	sub	sp, #52	@ 0x34
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f004 fe92 	bl	8008afe <USB_GetMode>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f040 84b9 	bne.w	8004754 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f004 fdf6 	bl	80089d8 <USB_ReadInterrupts>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 84af 	beq.w	8004752 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f004 fde3 	bl	80089d8 <USB_ReadInterrupts>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d107      	bne.n	8003e2c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f002 0202 	and.w	r2, r2, #2
 8003e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f004 fdd1 	bl	80089d8 <USB_ReadInterrupts>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b10      	cmp	r3, #16
 8003e3e:	d161      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0210 	bic.w	r2, r2, #16
 8003e4e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f003 020f 	and.w	r2, r3, #15
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	0c5b      	lsrs	r3, r3, #17
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d124      	bne.n	8003ec6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d035      	beq.n	8003ef4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	6a38      	ldr	r0, [r7, #32]
 8003e9c:	f004 fc08 	bl	80086b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eac:	441a      	add	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ebe:	441a      	add	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	615a      	str	r2, [r3, #20]
 8003ec4:	e016      	b.n	8003ef4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	0c5b      	lsrs	r3, r3, #17
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d110      	bne.n	8003ef4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ed8:	2208      	movs	r2, #8
 8003eda:	4619      	mov	r1, r3
 8003edc:	6a38      	ldr	r0, [r7, #32]
 8003ede:	f004 fbe7 	bl	80086b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eee:	441a      	add	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0210 	orr.w	r2, r2, #16
 8003f02:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f004 fd65 	bl	80089d8 <USB_ReadInterrupts>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f18:	f040 80a7 	bne.w	800406a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f004 fd6a 	bl	80089fe <USB_ReadDevAllOutEpInterrupt>
 8003f2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003f2c:	e099      	b.n	8004062 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 808e 	beq.w	8004056 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f004 fd8e 	bl	8008a66 <USB_ReadDevOutEPInterrupt>
 8003f4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00c      	beq.n	8003f70 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f62:	461a      	mov	r2, r3
 8003f64:	2301      	movs	r3, #1
 8003f66:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fece 	bl	8004d0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00c      	beq.n	8003f94 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f86:	461a      	mov	r2, r3
 8003f88:	2308      	movs	r3, #8
 8003f8a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 ffa4 	bl	8004edc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d008      	beq.n	8003fb0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003faa:	461a      	mov	r2, r3
 8003fac:	2310      	movs	r3, #16
 8003fae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d030      	beq.n	800401c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc2:	2b80      	cmp	r3, #128	@ 0x80
 8003fc4:	d109      	bne.n	8003fda <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fd8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4413      	add	r3, r2
 8003fec:	3304      	adds	r3, #4
 8003fee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	78db      	ldrb	r3, [r3, #3]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d108      	bne.n	800400a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	b2db      	uxtb	r3, r3
 8004002:	4619      	mov	r1, r3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f007 f9bf 	bl	800b388 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004016:	461a      	mov	r2, r3
 8004018:	2302      	movs	r3, #2
 800401a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004032:	461a      	mov	r2, r3
 8004034:	2320      	movs	r3, #32
 8004036:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d009      	beq.n	8004056 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800404e:	461a      	mov	r2, r3
 8004050:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004054:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	3301      	adds	r3, #1
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800405c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	f47f af62 	bne.w	8003f2e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f004 fcb2 	bl	80089d8 <USB_ReadInterrupts>
 8004074:	4603      	mov	r3, r0
 8004076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800407a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800407e:	f040 80db 	bne.w	8004238 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f004 fcd3 	bl	8008a32 <USB_ReadDevAllInEpInterrupt>
 800408c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004092:	e0cd      	b.n	8004230 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80c2 	beq.w	8004224 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	4611      	mov	r1, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f004 fcf9 	bl	8008aa2 <USB_ReadDevInEPInterrupt>
 80040b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d057      	beq.n	800416c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	2201      	movs	r2, #1
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69f9      	ldr	r1, [r7, #28]
 80040d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040dc:	4013      	ands	r3, r2
 80040de:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ec:	461a      	mov	r2, r3
 80040ee:	2301      	movs	r3, #1
 80040f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	799b      	ldrb	r3, [r3, #6]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d132      	bne.n	8004160 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	3320      	adds	r3, #32
 800410a:	6819      	ldr	r1, [r3, #0]
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4403      	add	r3, r0
 800411a:	331c      	adds	r3, #28
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4419      	add	r1, r3
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4403      	add	r3, r0
 800412e:	3320      	adds	r3, #32
 8004130:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	d113      	bne.n	8004160 <HAL_PCD_IRQHandler+0x3a2>
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	3324      	adds	r3, #36	@ 0x24
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d108      	bne.n	8004160 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004158:	461a      	mov	r2, r3
 800415a:	2101      	movs	r1, #1
 800415c:	f004 fd02 	bl	8008b64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f007 f889 	bl	800b27e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004182:	461a      	mov	r2, r3
 8004184:	2308      	movs	r3, #8
 8004186:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800419e:	461a      	mov	r2, r3
 80041a0:	2310      	movs	r3, #16
 80041a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ba:	461a      	mov	r2, r3
 80041bc:	2340      	movs	r3, #64	@ 0x40
 80041be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d023      	beq.n	8004212 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80041ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041cc:	6a38      	ldr	r0, [r7, #32]
 80041ce:	f003 fce5 	bl	8007b9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80041d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	3310      	adds	r3, #16
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	3304      	adds	r3, #4
 80041e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	78db      	ldrb	r3, [r3, #3]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d108      	bne.n	8004200 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2200      	movs	r2, #0
 80041f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	4619      	mov	r1, r3
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f007 f8d6 	bl	800b3ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800420c:	461a      	mov	r2, r3
 800420e:	2302      	movs	r3, #2
 8004210:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800421c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fce8 	bl	8004bf4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	3301      	adds	r3, #1
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800422a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004232:	2b00      	cmp	r3, #0
 8004234:	f47f af2e 	bne.w	8004094 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f004 fbcb 	bl	80089d8 <USB_ReadInterrupts>
 8004242:	4603      	mov	r3, r0
 8004244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800424c:	d122      	bne.n	8004294 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004268:	2b01      	cmp	r3, #1
 800426a:	d108      	bne.n	800427e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004274:	2100      	movs	r1, #0
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f007 fa50 	bl	800b71c <HAL_PCDEx_LPM_Callback>
 800427c:	e002      	b.n	8004284 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f007 f874 	bl	800b36c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004292:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f004 fb9d 	bl	80089d8 <USB_ReadInterrupts>
 800429e:	4603      	mov	r3, r0
 80042a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a8:	d112      	bne.n	80042d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d102      	bne.n	80042c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f007 f830 	bl	800b320 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80042ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f004 fb7f 	bl	80089d8 <USB_ReadInterrupts>
 80042da:	4603      	mov	r3, r0
 80042dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042e4:	d121      	bne.n	800432a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80042f4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d111      	bne.n	8004324 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	f003 020f 	and.w	r2, r3, #15
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800431a:	2101      	movs	r1, #1
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f007 f9fd 	bl	800b71c <HAL_PCDEx_LPM_Callback>
 8004322:	e002      	b.n	800432a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f006 fffb 	bl	800b320 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f004 fb52 	bl	80089d8 <USB_ReadInterrupts>
 8004334:	4603      	mov	r3, r0
 8004336:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800433a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433e:	f040 80b7 	bne.w	80044b0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004350:	f023 0301 	bic.w	r3, r3, #1
 8004354:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2110      	movs	r1, #16
 800435c:	4618      	mov	r0, r3
 800435e:	f003 fc1d 	bl	8007b9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004362:	2300      	movs	r3, #0
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004366:	e046      	b.n	80043f6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800437a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800437c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800438c:	0151      	lsls	r1, r2, #5
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	440a      	add	r2, r1
 8004392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004396:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800439a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a8:	461a      	mov	r2, r3
 80043aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043c0:	0151      	lsls	r1, r2, #5
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	440a      	add	r2, r1
 80043c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e0:	0151      	lsls	r1, r2, #5
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	440a      	add	r2, r1
 80043e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043ee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f2:	3301      	adds	r3, #1
 80043f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	791b      	ldrb	r3, [r3, #4]
 80043fa:	461a      	mov	r2, r3
 80043fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fe:	4293      	cmp	r3, r2
 8004400:	d3b2      	bcc.n	8004368 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004410:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004414:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7bdb      	ldrb	r3, [r3, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d016      	beq.n	800444c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800442e:	f043 030b 	orr.w	r3, r3, #11
 8004432:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800443c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004444:	f043 030b 	orr.w	r3, r3, #11
 8004448:	6453      	str	r3, [r2, #68]	@ 0x44
 800444a:	e015      	b.n	8004478 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800445a:	4619      	mov	r1, r3
 800445c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004460:	4313      	orrs	r3, r2
 8004462:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004472:	f043 030b 	orr.w	r3, r3, #11
 8004476:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004486:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800448a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800449a:	461a      	mov	r2, r3
 800449c:	f004 fb62 	bl	8008b64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695a      	ldr	r2, [r3, #20]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80044ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f004 fa8f 	bl	80089d8 <USB_ReadInterrupts>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c4:	d123      	bne.n	800450e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f004 fb26 	bl	8008b1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f003 fbda 	bl	8007c8e <USB_GetDevSpeed>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681c      	ldr	r4, [r3, #0]
 80044e6:	f001 fa6b 	bl	80059c0 <HAL_RCC_GetHCLKFreq>
 80044ea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044f0:	461a      	mov	r2, r3
 80044f2:	4620      	mov	r0, r4
 80044f4:	f003 f8e4 	bl	80076c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f006 fee8 	bl	800b2ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695a      	ldr	r2, [r3, #20]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800450c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f004 fa60 	bl	80089d8 <USB_ReadInterrupts>
 8004518:	4603      	mov	r3, r0
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b08      	cmp	r3, #8
 8004520:	d10a      	bne.n	8004538 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f006 fec5 	bl	800b2b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f002 0208 	and.w	r2, r2, #8
 8004536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f004 fa4b 	bl	80089d8 <USB_ReadInterrupts>
 8004542:	4603      	mov	r3, r0
 8004544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004548:	2b80      	cmp	r3, #128	@ 0x80
 800454a:	d123      	bne.n	8004594 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004558:	2301      	movs	r3, #1
 800455a:	627b      	str	r3, [r7, #36]	@ 0x24
 800455c:	e014      	b.n	8004588 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d105      	bne.n	8004582 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	b2db      	uxtb	r3, r3
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fb08 	bl	8004b92 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	3301      	adds	r3, #1
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	791b      	ldrb	r3, [r3, #4]
 800458c:	461a      	mov	r2, r3
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	4293      	cmp	r3, r2
 8004592:	d3e4      	bcc.n	800455e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f004 fa1d 	bl	80089d8 <USB_ReadInterrupts>
 800459e:	4603      	mov	r3, r0
 80045a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045a8:	d13c      	bne.n	8004624 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045aa:	2301      	movs	r3, #1
 80045ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ae:	e02b      	b.n	8004608 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	3318      	adds	r3, #24
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d115      	bne.n	8004602 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80045d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045d8:	2b00      	cmp	r3, #0
 80045da:	da12      	bge.n	8004602 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3317      	adds	r3, #23
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	4619      	mov	r1, r3
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fac8 	bl	8004b92 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	3301      	adds	r3, #1
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	791b      	ldrb	r3, [r3, #4]
 800460c:	461a      	mov	r2, r3
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	4293      	cmp	r3, r2
 8004612:	d3cd      	bcc.n	80045b0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004622:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f004 f9d5 	bl	80089d8 <USB_ReadInterrupts>
 800462e:	4603      	mov	r3, r0
 8004630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004634:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004638:	d156      	bne.n	80046e8 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800463a:	2301      	movs	r3, #1
 800463c:	627b      	str	r3, [r7, #36]	@ 0x24
 800463e:	e045      	b.n	80046cc <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d12e      	bne.n	80046c6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004668:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800466a:	2b00      	cmp	r3, #0
 800466c:	da2b      	bge.n	80046c6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800467a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800467e:	429a      	cmp	r2, r3
 8004680:	d121      	bne.n	80046c6 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046c2:	6053      	str	r3, [r2, #4]
            break;
 80046c4:	e008      	b.n	80046d8 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	3301      	adds	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	791b      	ldrb	r3, [r3, #4]
 80046d0:	461a      	mov	r2, r3
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d3b3      	bcc.n	8004640 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695a      	ldr	r2, [r3, #20]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80046e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f004 f973 	bl	80089d8 <USB_ReadInterrupts>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80046f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046fc:	d10a      	bne.n	8004714 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f006 fe66 	bl	800b3d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f004 f95d 	bl	80089d8 <USB_ReadInterrupts>
 800471e:	4603      	mov	r3, r0
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b04      	cmp	r3, #4
 8004726:	d115      	bne.n	8004754 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f006 fe56 	bl	800b3ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
 8004750:	e000      	b.n	8004754 <HAL_PCD_IRQHandler+0x996>
      return;
 8004752:	bf00      	nop
    }
  }
}
 8004754:	3734      	adds	r7, #52	@ 0x34
 8004756:	46bd      	mov	sp, r7
 8004758:	bd90      	pop	{r4, r7, pc}

0800475a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	460b      	mov	r3, r1
 8004764:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_PCD_SetAddress+0x1a>
 8004770:	2302      	movs	r3, #2
 8004772:	e012      	b.n	800479a <HAL_PCD_SetAddress+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	78fa      	ldrb	r2, [r7, #3]
 8004780:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	78fa      	ldrb	r2, [r7, #3]
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f004 f8bc 	bl	8008908 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	4608      	mov	r0, r1
 80047ac:	4611      	mov	r1, r2
 80047ae:	461a      	mov	r2, r3
 80047b0:	4603      	mov	r3, r0
 80047b2:	70fb      	strb	r3, [r7, #3]
 80047b4:	460b      	mov	r3, r1
 80047b6:	803b      	strh	r3, [r7, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	da0f      	bge.n	80047e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	f003 020f 	and.w	r2, r3, #15
 80047ce:	4613      	mov	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	3310      	adds	r3, #16
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	4413      	add	r3, r2
 80047dc:	3304      	adds	r3, #4
 80047de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	705a      	strb	r2, [r3, #1]
 80047e6:	e00f      	b.n	8004808 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	f003 020f 	and.w	r2, r3, #15
 80047ee:	4613      	mov	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	3304      	adds	r3, #4
 8004800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	b2da      	uxtb	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004814:	883a      	ldrh	r2, [r7, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	78ba      	ldrb	r2, [r7, #2]
 800481e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d004      	beq.n	8004832 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004832:	78bb      	ldrb	r3, [r7, #2]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d102      	bne.n	800483e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_PCD_EP_Open+0xaa>
 8004848:	2302      	movs	r3, #2
 800484a:	e00e      	b.n	800486a <HAL_PCD_EP_Open+0xc8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68f9      	ldr	r1, [r7, #12]
 800485a:	4618      	mov	r0, r3
 800485c:	f003 fa3c 	bl	8007cd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004868:	7afb      	ldrb	r3, [r7, #11]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800487e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004882:	2b00      	cmp	r3, #0
 8004884:	da0f      	bge.n	80048a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004886:	78fb      	ldrb	r3, [r7, #3]
 8004888:	f003 020f 	and.w	r2, r3, #15
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	3310      	adds	r3, #16
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	4413      	add	r3, r2
 800489a:	3304      	adds	r3, #4
 800489c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	705a      	strb	r2, [r3, #1]
 80048a4:	e00f      	b.n	80048c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	f003 020f 	and.w	r2, r3, #15
 80048ac:	4613      	mov	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	4413      	add	r3, r2
 80048bc:	3304      	adds	r3, #4
 80048be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_PCD_EP_Close+0x6e>
 80048dc:	2302      	movs	r3, #2
 80048de:	e00e      	b.n	80048fe <HAL_PCD_EP_Close+0x8c>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68f9      	ldr	r1, [r7, #12]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f003 fa7a 	bl	8007de8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b086      	sub	sp, #24
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	460b      	mov	r3, r1
 8004914:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004916:	7afb      	ldrb	r3, [r7, #11]
 8004918:	f003 020f 	and.w	r2, r3, #15
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	3304      	adds	r3, #4
 800492e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2200      	movs	r2, #0
 8004940:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004948:	7afb      	ldrb	r3, [r7, #11]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	b2da      	uxtb	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	799b      	ldrb	r3, [r3, #6]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d102      	bne.n	8004962 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	799b      	ldrb	r3, [r3, #6]
 800496a:	461a      	mov	r2, r3
 800496c:	6979      	ldr	r1, [r7, #20]
 800496e:	f003 fb17 	bl	8007fa0 <USB_EPStartXfer>

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	f003 020f 	and.w	r2, r3, #15
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800499e:	681b      	ldr	r3, [r3, #0]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	460b      	mov	r3, r1
 80049ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049bc:	7afb      	ldrb	r3, [r7, #11]
 80049be:	f003 020f 	and.w	r2, r3, #15
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	3310      	adds	r3, #16
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	3304      	adds	r3, #4
 80049d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2200      	movs	r2, #0
 80049e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2201      	movs	r2, #1
 80049ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049ec:	7afb      	ldrb	r3, [r7, #11]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	799b      	ldrb	r3, [r3, #6]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d102      	bne.n	8004a06 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	799b      	ldrb	r3, [r3, #6]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	6979      	ldr	r1, [r7, #20]
 8004a12:	f003 fac5 	bl	8007fa0 <USB_EPStartXfer>

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	7912      	ldrb	r2, [r2, #4]
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e04f      	b.n	8004ade <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	da0f      	bge.n	8004a66 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	f003 020f 	and.w	r2, r3, #15
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	3310      	adds	r3, #16
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	705a      	strb	r2, [r3, #1]
 8004a64:	e00d      	b.n	8004a82 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a66:	78fa      	ldrb	r2, [r7, #3]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	4413      	add	r3, r2
 8004a78:	3304      	adds	r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_PCD_EP_SetStall+0x82>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e01d      	b.n	8004ade <HAL_PCD_EP_SetStall+0xbe>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68f9      	ldr	r1, [r7, #12]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f003 fe55 	bl	8008760 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	7999      	ldrb	r1, [r3, #6]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f004 f848 	bl	8008b64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	460b      	mov	r3, r1
 8004af0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	7912      	ldrb	r2, [r2, #4]
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d901      	bls.n	8004b04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e042      	b.n	8004b8a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	da0f      	bge.n	8004b2c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	f003 020f 	and.w	r2, r3, #15
 8004b12:	4613      	mov	r3, r2
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	3310      	adds	r3, #16
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4413      	add	r3, r2
 8004b20:	3304      	adds	r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	705a      	strb	r2, [r3, #1]
 8004b2a:	e00f      	b.n	8004b4c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	f003 020f 	and.w	r2, r3, #15
 8004b32:	4613      	mov	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4413      	add	r3, r2
 8004b42:	3304      	adds	r3, #4
 8004b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_PCD_EP_ClrStall+0x86>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e00e      	b.n	8004b8a <HAL_PCD_EP_ClrStall+0xa4>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68f9      	ldr	r1, [r7, #12]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f003 fe5e 	bl	800883c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da0c      	bge.n	8004bc0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	f003 020f 	and.w	r2, r3, #15
 8004bac:	4613      	mov	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	3310      	adds	r3, #16
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	3304      	adds	r3, #4
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	e00c      	b.n	8004bda <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	f003 020f 	and.w	r2, r3, #15
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68f9      	ldr	r1, [r7, #12]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f003 fc7d 	bl	80084e0 <USB_EPStopXfer>
 8004be6:	4603      	mov	r3, r0
 8004be8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004bea:	7afb      	ldrb	r3, [r7, #11]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	@ 0x28
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	3310      	adds	r3, #16
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4413      	add	r3, r2
 8004c18:	3304      	adds	r3, #4
 8004c1a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d901      	bls.n	8004c2c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e06b      	b.n	8004d04 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d902      	bls.n	8004c48 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3303      	adds	r3, #3
 8004c4c:	089b      	lsrs	r3, r3, #2
 8004c4e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c50:	e02a      	b.n	8004ca8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d902      	bls.n	8004c6e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3303      	adds	r3, #3
 8004c72:	089b      	lsrs	r3, r3, #2
 8004c74:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68d9      	ldr	r1, [r3, #12]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	4603      	mov	r3, r0
 8004c8a:	6978      	ldr	r0, [r7, #20]
 8004c8c:	f003 fcd2 	bl	8008634 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	441a      	add	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	441a      	add	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d809      	bhi.n	8004cd2 <PCD_WriteEmptyTxFifo+0xde>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d203      	bcs.n	8004cd2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1bf      	bne.n	8004c52 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d811      	bhi.n	8004d02 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	6939      	ldr	r1, [r7, #16]
 8004cfa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cfe:	4013      	ands	r3, r2
 8004d00:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3720      	adds	r7, #32
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	333c      	adds	r3, #60	@ 0x3c
 8004d24:	3304      	adds	r3, #4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	799b      	ldrb	r3, [r3, #6]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d17b      	bne.n	8004e3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d015      	beq.n	8004d78 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	4a61      	ldr	r2, [pc, #388]	@ (8004ed4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	f240 80b9 	bls.w	8004ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80b3 	beq.w	8004ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d74:	6093      	str	r3, [r2, #8]
 8004d76:	e0a7      	b.n	8004ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8e:	461a      	mov	r2, r3
 8004d90:	2320      	movs	r3, #32
 8004d92:	6093      	str	r3, [r2, #8]
 8004d94:	e098      	b.n	8004ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f040 8093 	bne.w	8004ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	4a4b      	ldr	r2, [pc, #300]	@ (8004ed4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d90f      	bls.n	8004dca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc6:	6093      	str	r3, [r2, #8]
 8004dc8:	e07e      	b.n	8004ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4413      	add	r3, r2
 8004ddc:	3304      	adds	r3, #4
 8004dde:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a1a      	ldr	r2, [r3, #32]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	0159      	lsls	r1, r3, #5
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	440b      	add	r3, r1
 8004dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df6:	1ad2      	subs	r2, r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d114      	bne.n	8004e2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e14:	461a      	mov	r2, r3
 8004e16:	2101      	movs	r1, #1
 8004e18:	f003 fea4 	bl	8008b64 <USB_EP0_OutStart>
 8004e1c:	e006      	b.n	8004e2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	441a      	add	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f006 fa08 	bl	800b248 <HAL_PCD_DataOutStageCallback>
 8004e38:	e046      	b.n	8004ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	4a26      	ldr	r2, [pc, #152]	@ (8004ed8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d124      	bne.n	8004e8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e5e:	6093      	str	r3, [r2, #8]
 8004e60:	e032      	b.n	8004ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2320      	movs	r3, #32
 8004e7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	4619      	mov	r1, r3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f006 f9df 	bl	800b248 <HAL_PCD_DataOutStageCallback>
 8004e8a:	e01d      	b.n	8004ec8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d114      	bne.n	8004ebc <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	4613      	mov	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d108      	bne.n	8004ebc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	f003 fe54 	bl	8008b64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f006 f9c0 	bl	800b248 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3720      	adds	r7, #32
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	4f54300a 	.word	0x4f54300a
 8004ed8:	4f54310a 	.word	0x4f54310a

08004edc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	333c      	adds	r3, #60	@ 0x3c
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4a15      	ldr	r2, [pc, #84]	@ (8004f64 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d90e      	bls.n	8004f30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f006 f977 	bl	800b224 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a0a      	ldr	r2, [pc, #40]	@ (8004f64 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d90c      	bls.n	8004f58 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	799b      	ldrb	r3, [r3, #6]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d108      	bne.n	8004f58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f50:	461a      	mov	r2, r3
 8004f52:	2101      	movs	r1, #1
 8004f54:	f003 fe06 	bl	8008b64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	4f54300a 	.word	0x4f54300a

08004f68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	70fb      	strb	r3, [r7, #3]
 8004f74:	4613      	mov	r3, r2
 8004f76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d107      	bne.n	8004f96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f86:	883b      	ldrh	r3, [r7, #0]
 8004f88:	0419      	lsls	r1, r3, #16
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f94:	e028      	b.n	8004fe8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	73fb      	strb	r3, [r7, #15]
 8004fa8:	e00d      	b.n	8004fc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	3340      	adds	r3, #64	@ 0x40
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	0c1b      	lsrs	r3, r3, #16
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]
 8004fc6:	7bfa      	ldrb	r2, [r7, #15]
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d3ec      	bcc.n	8004faa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fd0:	883b      	ldrh	r3, [r7, #0]
 8004fd2:	0418      	lsls	r0, r3, #16
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6819      	ldr	r1, [r3, #0]
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	4302      	orrs	r2, r0
 8004fe0:	3340      	adds	r3, #64	@ 0x40
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	460b      	mov	r3, r1
 8005000:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	887a      	ldrh	r2, [r7, #2]
 8005008:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005046:	4b05      	ldr	r3, [pc, #20]	@ (800505c <HAL_PCDEx_ActivateLPM+0x44>)
 8005048:	4313      	orrs	r3, r2
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	10000003 	.word	0x10000003

08005060 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a04      	ldr	r2, [pc, #16]	@ (800507c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800506a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800506e:	6013      	str	r3, [r2, #0]
}
 8005070:	bf00      	nop
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40007000 	.word	0x40007000

08005080 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005088:	2300      	movs	r3, #0
 800508a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e29b      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8087 	beq.w	80051b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050a4:	4b96      	ldr	r3, [pc, #600]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 030c 	and.w	r3, r3, #12
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d00c      	beq.n	80050ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050b0:	4b93      	ldr	r3, [pc, #588]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d112      	bne.n	80050e2 <HAL_RCC_OscConfig+0x62>
 80050bc:	4b90      	ldr	r3, [pc, #576]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050c8:	d10b      	bne.n	80050e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d06c      	beq.n	80051b0 <HAL_RCC_OscConfig+0x130>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d168      	bne.n	80051b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e275      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ea:	d106      	bne.n	80050fa <HAL_RCC_OscConfig+0x7a>
 80050ec:	4b84      	ldr	r3, [pc, #528]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a83      	ldr	r2, [pc, #524]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80050f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	e02e      	b.n	8005158 <HAL_RCC_OscConfig+0xd8>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0x9c>
 8005102:	4b7f      	ldr	r3, [pc, #508]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a7e      	ldr	r2, [pc, #504]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	4b7c      	ldr	r3, [pc, #496]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a7b      	ldr	r2, [pc, #492]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005114:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e01d      	b.n	8005158 <HAL_RCC_OscConfig+0xd8>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005124:	d10c      	bne.n	8005140 <HAL_RCC_OscConfig+0xc0>
 8005126:	4b76      	ldr	r3, [pc, #472]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a75      	ldr	r2, [pc, #468]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 800512c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	4b73      	ldr	r3, [pc, #460]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a72      	ldr	r2, [pc, #456]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	e00b      	b.n	8005158 <HAL_RCC_OscConfig+0xd8>
 8005140:	4b6f      	ldr	r3, [pc, #444]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a6e      	ldr	r2, [pc, #440]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	4b6c      	ldr	r3, [pc, #432]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a6b      	ldr	r2, [pc, #428]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d013      	beq.n	8005188 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005160:	f7fc fb1e 	bl	80017a0 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005168:	f7fc fb1a 	bl	80017a0 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b64      	cmp	r3, #100	@ 0x64
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e229      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517a:	4b61      	ldr	r3, [pc, #388]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0xe8>
 8005186:	e014      	b.n	80051b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fc fb0a 	bl	80017a0 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005190:	f7fc fb06 	bl	80017a0 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b64      	cmp	r3, #100	@ 0x64
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e215      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051a2:	4b57      	ldr	r3, [pc, #348]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x110>
 80051ae:	e000      	b.n	80051b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d069      	beq.n	8005292 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051be:	4b50      	ldr	r3, [pc, #320]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 030c 	and.w	r3, r3, #12
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d11c      	bne.n	8005210 <HAL_RCC_OscConfig+0x190>
 80051d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d116      	bne.n	8005210 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e2:	4b47      	ldr	r3, [pc, #284]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <HAL_RCC_OscConfig+0x17a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d001      	beq.n	80051fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e1e9      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fa:	4b41      	ldr	r3, [pc, #260]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	493d      	ldr	r1, [pc, #244]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 800520a:	4313      	orrs	r3, r2
 800520c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800520e:	e040      	b.n	8005292 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d023      	beq.n	8005260 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005218:	4b39      	ldr	r3, [pc, #228]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a38      	ldr	r2, [pc, #224]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 800521e:	f043 0301 	orr.w	r3, r3, #1
 8005222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005224:	f7fc fabc 	bl	80017a0 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800522c:	f7fc fab8 	bl	80017a0 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e1c7      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800523e:	4b30      	ldr	r3, [pc, #192]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524a:	4b2d      	ldr	r3, [pc, #180]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4929      	ldr	r1, [pc, #164]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 800525a:	4313      	orrs	r3, r2
 800525c:	600b      	str	r3, [r1, #0]
 800525e:	e018      	b.n	8005292 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005260:	4b27      	ldr	r3, [pc, #156]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a26      	ldr	r2, [pc, #152]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fc fa98 	bl	80017a0 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005274:	f7fc fa94 	bl	80017a0 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e1a3      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005286:	4b1e      	ldr	r3, [pc, #120]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f0      	bne.n	8005274 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d038      	beq.n	8005310 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d019      	beq.n	80052da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052a6:	4b16      	ldr	r3, [pc, #88]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80052a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052aa:	4a15      	ldr	r2, [pc, #84]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80052ac:	f043 0301 	orr.w	r3, r3, #1
 80052b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b2:	f7fc fa75 	bl	80017a0 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ba:	f7fc fa71 	bl	80017a0 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e180      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80052ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCC_OscConfig+0x23a>
 80052d8:	e01a      	b.n	8005310 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052da:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80052dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052de:	4a08      	ldr	r2, [pc, #32]	@ (8005300 <HAL_RCC_OscConfig+0x280>)
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e6:	f7fc fa5b 	bl	80017a0 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ec:	e00a      	b.n	8005304 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ee:	f7fc fa57 	bl	80017a0 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d903      	bls.n	8005304 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e166      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
 8005300:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005304:	4b92      	ldr	r3, [pc, #584]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 8005306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1ee      	bne.n	80052ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80a4 	beq.w	8005466 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800531e:	4b8c      	ldr	r3, [pc, #560]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 8005320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10d      	bne.n	8005346 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800532a:	4b89      	ldr	r3, [pc, #548]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 800532c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532e:	4a88      	ldr	r2, [pc, #544]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005334:	6413      	str	r3, [r2, #64]	@ 0x40
 8005336:	4b86      	ldr	r3, [pc, #536]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005342:	2301      	movs	r3, #1
 8005344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005346:	4b83      	ldr	r3, [pc, #524]	@ (8005554 <HAL_RCC_OscConfig+0x4d4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d118      	bne.n	8005384 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005352:	4b80      	ldr	r3, [pc, #512]	@ (8005554 <HAL_RCC_OscConfig+0x4d4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a7f      	ldr	r2, [pc, #508]	@ (8005554 <HAL_RCC_OscConfig+0x4d4>)
 8005358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800535c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535e:	f7fc fa1f 	bl	80017a0 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005366:	f7fc fa1b 	bl	80017a0 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b64      	cmp	r3, #100	@ 0x64
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e12a      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005378:	4b76      	ldr	r3, [pc, #472]	@ (8005554 <HAL_RCC_OscConfig+0x4d4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f0      	beq.n	8005366 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d106      	bne.n	800539a <HAL_RCC_OscConfig+0x31a>
 800538c:	4b70      	ldr	r3, [pc, #448]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005390:	4a6f      	ldr	r2, [pc, #444]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 8005392:	f043 0301 	orr.w	r3, r3, #1
 8005396:	6713      	str	r3, [r2, #112]	@ 0x70
 8005398:	e02d      	b.n	80053f6 <HAL_RCC_OscConfig+0x376>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10c      	bne.n	80053bc <HAL_RCC_OscConfig+0x33c>
 80053a2:	4b6b      	ldr	r3, [pc, #428]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a6:	4a6a      	ldr	r2, [pc, #424]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ae:	4b68      	ldr	r3, [pc, #416]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b2:	4a67      	ldr	r2, [pc, #412]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80053b4:	f023 0304 	bic.w	r3, r3, #4
 80053b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ba:	e01c      	b.n	80053f6 <HAL_RCC_OscConfig+0x376>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b05      	cmp	r3, #5
 80053c2:	d10c      	bne.n	80053de <HAL_RCC_OscConfig+0x35e>
 80053c4:	4b62      	ldr	r3, [pc, #392]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c8:	4a61      	ldr	r2, [pc, #388]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80053ca:	f043 0304 	orr.w	r3, r3, #4
 80053ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d0:	4b5f      	ldr	r3, [pc, #380]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d4:	4a5e      	ldr	r2, [pc, #376]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	6713      	str	r3, [r2, #112]	@ 0x70
 80053dc:	e00b      	b.n	80053f6 <HAL_RCC_OscConfig+0x376>
 80053de:	4b5c      	ldr	r3, [pc, #368]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e2:	4a5b      	ldr	r2, [pc, #364]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ea:	4b59      	ldr	r3, [pc, #356]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ee:	4a58      	ldr	r2, [pc, #352]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80053f0:	f023 0304 	bic.w	r3, r3, #4
 80053f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d015      	beq.n	800542a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fe:	f7fc f9cf 	bl	80017a0 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005404:	e00a      	b.n	800541c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005406:	f7fc f9cb 	bl	80017a0 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005414:	4293      	cmp	r3, r2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e0d8      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541c:	4b4c      	ldr	r3, [pc, #304]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 800541e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0ee      	beq.n	8005406 <HAL_RCC_OscConfig+0x386>
 8005428:	e014      	b.n	8005454 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542a:	f7fc f9b9 	bl	80017a0 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005430:	e00a      	b.n	8005448 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005432:	f7fc f9b5 	bl	80017a0 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e0c2      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005448:	4b41      	ldr	r3, [pc, #260]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 800544a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1ee      	bne.n	8005432 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d105      	bne.n	8005466 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800545a:	4b3d      	ldr	r3, [pc, #244]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	4a3c      	ldr	r2, [pc, #240]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 8005460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005464:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80ae 	beq.w	80055cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005470:	4b37      	ldr	r3, [pc, #220]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 030c 	and.w	r3, r3, #12
 8005478:	2b08      	cmp	r3, #8
 800547a:	d06d      	beq.n	8005558 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d14b      	bne.n	800551c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005484:	4b32      	ldr	r3, [pc, #200]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a31      	ldr	r2, [pc, #196]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 800548a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800548e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005490:	f7fc f986 	bl	80017a0 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005498:	f7fc f982 	bl	80017a0 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e091      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054aa:	4b29      	ldr	r3, [pc, #164]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69da      	ldr	r2, [r3, #28]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	019b      	lsls	r3, r3, #6
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	3b01      	subs	r3, #1
 80054d0:	041b      	lsls	r3, r3, #16
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d8:	061b      	lsls	r3, r3, #24
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e0:	071b      	lsls	r3, r3, #28
 80054e2:	491b      	ldr	r1, [pc, #108]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e8:	4b19      	ldr	r3, [pc, #100]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a18      	ldr	r2, [pc, #96]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 80054ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f4:	f7fc f954 	bl	80017a0 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054fc:	f7fc f950 	bl	80017a0 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e05f      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550e:	4b10      	ldr	r3, [pc, #64]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0x47c>
 800551a:	e057      	b.n	80055cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551c:	4b0c      	ldr	r3, [pc, #48]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0b      	ldr	r2, [pc, #44]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 8005522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fc f93a 	bl	80017a0 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005530:	f7fc f936 	bl	80017a0 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e045      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005542:	4b03      	ldr	r3, [pc, #12]	@ (8005550 <HAL_RCC_OscConfig+0x4d0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x4b0>
 800554e:	e03d      	b.n	80055cc <HAL_RCC_OscConfig+0x54c>
 8005550:	40023800 	.word	0x40023800
 8005554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005558:	4b1f      	ldr	r3, [pc, #124]	@ (80055d8 <HAL_RCC_OscConfig+0x558>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d030      	beq.n	80055c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d129      	bne.n	80055c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557e:	429a      	cmp	r2, r3
 8005580:	d122      	bne.n	80055c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800558e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005590:	4293      	cmp	r3, r2
 8005592:	d119      	bne.n	80055c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	3b01      	subs	r3, #1
 80055a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d10f      	bne.n	80055c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d107      	bne.n	80055c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	40023800 	.word	0x40023800

080055dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0d0      	b.n	8005796 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055f4:	4b6a      	ldr	r3, [pc, #424]	@ (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d910      	bls.n	8005624 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4b67      	ldr	r3, [pc, #412]	@ (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 020f 	bic.w	r2, r3, #15
 800560a:	4965      	ldr	r1, [pc, #404]	@ (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b63      	ldr	r3, [pc, #396]	@ (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0b8      	b.n	8005796 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d020      	beq.n	8005672 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800563c:	4b59      	ldr	r3, [pc, #356]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4a58      	ldr	r2, [pc, #352]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005642:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005646:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005654:	4b53      	ldr	r3, [pc, #332]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	4a52      	ldr	r2, [pc, #328]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 800565a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800565e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005660:	4b50      	ldr	r3, [pc, #320]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	494d      	ldr	r1, [pc, #308]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d040      	beq.n	8005700 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005686:	4b47      	ldr	r3, [pc, #284]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d115      	bne.n	80056be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e07f      	b.n	8005796 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800569e:	4b41      	ldr	r3, [pc, #260]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e073      	b.n	8005796 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ae:	4b3d      	ldr	r3, [pc, #244]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e06b      	b.n	8005796 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056be:	4b39      	ldr	r3, [pc, #228]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f023 0203 	bic.w	r2, r3, #3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	4936      	ldr	r1, [pc, #216]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d0:	f7fc f866 	bl	80017a0 <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d8:	f7fc f862 	bl	80017a0 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e053      	b.n	8005796 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ee:	4b2d      	ldr	r3, [pc, #180]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 020c 	and.w	r2, r3, #12
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d1eb      	bne.n	80056d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005700:	4b27      	ldr	r3, [pc, #156]	@ (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d210      	bcs.n	8005730 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4b24      	ldr	r3, [pc, #144]	@ (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 020f 	bic.w	r2, r3, #15
 8005716:	4922      	ldr	r1, [pc, #136]	@ (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b20      	ldr	r3, [pc, #128]	@ (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e032      	b.n	8005796 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800573c:	4b19      	ldr	r3, [pc, #100]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4916      	ldr	r1, [pc, #88]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 800574a:	4313      	orrs	r3, r2
 800574c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800575a:	4b12      	ldr	r3, [pc, #72]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	490e      	ldr	r1, [pc, #56]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 800576a:	4313      	orrs	r3, r2
 800576c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800576e:	f000 f821 	bl	80057b4 <HAL_RCC_GetSysClockFreq>
 8005772:	4602      	mov	r2, r0
 8005774:	4b0b      	ldr	r3, [pc, #44]	@ (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	091b      	lsrs	r3, r3, #4
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	490a      	ldr	r1, [pc, #40]	@ (80057a8 <HAL_RCC_ClockConfig+0x1cc>)
 8005780:	5ccb      	ldrb	r3, [r1, r3]
 8005782:	fa22 f303 	lsr.w	r3, r2, r3
 8005786:	4a09      	ldr	r2, [pc, #36]	@ (80057ac <HAL_RCC_ClockConfig+0x1d0>)
 8005788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800578a:	4b09      	ldr	r3, [pc, #36]	@ (80057b0 <HAL_RCC_ClockConfig+0x1d4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f7fb ffc2 	bl	8001718 <HAL_InitTick>

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40023c00 	.word	0x40023c00
 80057a4:	40023800 	.word	0x40023800
 80057a8:	0800bb20 	.word	0x0800bb20
 80057ac:	2000000c 	.word	0x2000000c
 80057b0:	20000010 	.word	0x20000010

080057b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057b8:	b094      	sub	sp, #80	@ 0x50
 80057ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	647b      	str	r3, [r7, #68]	@ 0x44
 80057c0:	2300      	movs	r3, #0
 80057c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057c4:	2300      	movs	r3, #0
 80057c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057cc:	4b79      	ldr	r3, [pc, #484]	@ (80059b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 030c 	and.w	r3, r3, #12
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d00d      	beq.n	80057f4 <HAL_RCC_GetSysClockFreq+0x40>
 80057d8:	2b08      	cmp	r3, #8
 80057da:	f200 80e1 	bhi.w	80059a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <HAL_RCC_GetSysClockFreq+0x34>
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d003      	beq.n	80057ee <HAL_RCC_GetSysClockFreq+0x3a>
 80057e6:	e0db      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057e8:	4b73      	ldr	r3, [pc, #460]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80057ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057ec:	e0db      	b.n	80059a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057ee:	4b73      	ldr	r3, [pc, #460]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x208>)
 80057f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057f2:	e0d8      	b.n	80059a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057f4:	4b6f      	ldr	r3, [pc, #444]	@ (80059b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80057fe:	4b6d      	ldr	r3, [pc, #436]	@ (80059b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d063      	beq.n	80058d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800580a:	4b6a      	ldr	r3, [pc, #424]	@ (80059b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	099b      	lsrs	r3, r3, #6
 8005810:	2200      	movs	r2, #0
 8005812:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005814:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581c:	633b      	str	r3, [r7, #48]	@ 0x30
 800581e:	2300      	movs	r3, #0
 8005820:	637b      	str	r3, [r7, #52]	@ 0x34
 8005822:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005826:	4622      	mov	r2, r4
 8005828:	462b      	mov	r3, r5
 800582a:	f04f 0000 	mov.w	r0, #0
 800582e:	f04f 0100 	mov.w	r1, #0
 8005832:	0159      	lsls	r1, r3, #5
 8005834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005838:	0150      	lsls	r0, r2, #5
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	4621      	mov	r1, r4
 8005840:	1a51      	subs	r1, r2, r1
 8005842:	6139      	str	r1, [r7, #16]
 8005844:	4629      	mov	r1, r5
 8005846:	eb63 0301 	sbc.w	r3, r3, r1
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005858:	4659      	mov	r1, fp
 800585a:	018b      	lsls	r3, r1, #6
 800585c:	4651      	mov	r1, sl
 800585e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005862:	4651      	mov	r1, sl
 8005864:	018a      	lsls	r2, r1, #6
 8005866:	4651      	mov	r1, sl
 8005868:	ebb2 0801 	subs.w	r8, r2, r1
 800586c:	4659      	mov	r1, fp
 800586e:	eb63 0901 	sbc.w	r9, r3, r1
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800587e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005886:	4690      	mov	r8, r2
 8005888:	4699      	mov	r9, r3
 800588a:	4623      	mov	r3, r4
 800588c:	eb18 0303 	adds.w	r3, r8, r3
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	462b      	mov	r3, r5
 8005894:	eb49 0303 	adc.w	r3, r9, r3
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058a6:	4629      	mov	r1, r5
 80058a8:	024b      	lsls	r3, r1, #9
 80058aa:	4621      	mov	r1, r4
 80058ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058b0:	4621      	mov	r1, r4
 80058b2:	024a      	lsls	r2, r1, #9
 80058b4:	4610      	mov	r0, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ba:	2200      	movs	r2, #0
 80058bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058c4:	f7fa fcc2 	bl	800024c <__aeabi_uldivmod>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4613      	mov	r3, r2
 80058ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058d0:	e058      	b.n	8005984 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058d2:	4b38      	ldr	r3, [pc, #224]	@ (80059b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	099b      	lsrs	r3, r3, #6
 80058d8:	2200      	movs	r2, #0
 80058da:	4618      	mov	r0, r3
 80058dc:	4611      	mov	r1, r2
 80058de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058e2:	623b      	str	r3, [r7, #32]
 80058e4:	2300      	movs	r3, #0
 80058e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80058e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058ec:	4642      	mov	r2, r8
 80058ee:	464b      	mov	r3, r9
 80058f0:	f04f 0000 	mov.w	r0, #0
 80058f4:	f04f 0100 	mov.w	r1, #0
 80058f8:	0159      	lsls	r1, r3, #5
 80058fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058fe:	0150      	lsls	r0, r2, #5
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4641      	mov	r1, r8
 8005906:	ebb2 0a01 	subs.w	sl, r2, r1
 800590a:	4649      	mov	r1, r9
 800590c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800591c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005920:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005924:	ebb2 040a 	subs.w	r4, r2, sl
 8005928:	eb63 050b 	sbc.w	r5, r3, fp
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	00eb      	lsls	r3, r5, #3
 8005936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800593a:	00e2      	lsls	r2, r4, #3
 800593c:	4614      	mov	r4, r2
 800593e:	461d      	mov	r5, r3
 8005940:	4643      	mov	r3, r8
 8005942:	18e3      	adds	r3, r4, r3
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	464b      	mov	r3, r9
 8005948:	eb45 0303 	adc.w	r3, r5, r3
 800594c:	607b      	str	r3, [r7, #4]
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	e9d7 4500 	ldrd	r4, r5, [r7]
 800595a:	4629      	mov	r1, r5
 800595c:	028b      	lsls	r3, r1, #10
 800595e:	4621      	mov	r1, r4
 8005960:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005964:	4621      	mov	r1, r4
 8005966:	028a      	lsls	r2, r1, #10
 8005968:	4610      	mov	r0, r2
 800596a:	4619      	mov	r1, r3
 800596c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800596e:	2200      	movs	r2, #0
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	61fa      	str	r2, [r7, #28]
 8005974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005978:	f7fa fc68 	bl	800024c <__aeabi_uldivmod>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4613      	mov	r3, r2
 8005982:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005984:	4b0b      	ldr	r3, [pc, #44]	@ (80059b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	0c1b      	lsrs	r3, r3, #16
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	3301      	adds	r3, #1
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005994:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005998:	fbb2 f3f3 	udiv	r3, r2, r3
 800599c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800599e:	e002      	b.n	80059a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059a0:	4b05      	ldr	r3, [pc, #20]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80059a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3750      	adds	r7, #80	@ 0x50
 80059ac:	46bd      	mov	sp, r7
 80059ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059b2:	bf00      	nop
 80059b4:	40023800 	.word	0x40023800
 80059b8:	00f42400 	.word	0x00f42400
 80059bc:	007a1200 	.word	0x007a1200

080059c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059c4:	4b03      	ldr	r3, [pc, #12]	@ (80059d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80059c6:	681b      	ldr	r3, [r3, #0]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	2000000c 	.word	0x2000000c

080059d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d012      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a00:	4b69      	ldr	r3, [pc, #420]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	4a68      	ldr	r2, [pc, #416]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a06:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a0a:	6093      	str	r3, [r2, #8]
 8005a0c:	4b66      	ldr	r3, [pc, #408]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a14:	4964      	ldr	r1, [pc, #400]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005a22:	2301      	movs	r3, #1
 8005a24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d017      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a32:	4b5d      	ldr	r3, [pc, #372]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a40:	4959      	ldr	r1, [pc, #356]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a50:	d101      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005a52:	2301      	movs	r3, #1
 8005a54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d017      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a74:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7c:	494a      	ldr	r1, [pc, #296]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a8c:	d101      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 808b 	beq.w	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005abc:	4b3a      	ldr	r3, [pc, #232]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac0:	4a39      	ldr	r2, [pc, #228]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ac8:	4b37      	ldr	r3, [pc, #220]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ad4:	4b35      	ldr	r3, [pc, #212]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a34      	ldr	r2, [pc, #208]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae0:	f7fb fe5e 	bl	80017a0 <HAL_GetTick>
 8005ae4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae8:	f7fb fe5a 	bl	80017a0 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b64      	cmp	r3, #100	@ 0x64
 8005af4:	d901      	bls.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e38f      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005afa:	4b2c      	ldr	r3, [pc, #176]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b06:	4b28      	ldr	r3, [pc, #160]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d035      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d02e      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b24:	4b20      	ldr	r3, [pc, #128]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b32:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b38:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b44:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b46:	4a18      	ldr	r2, [pc, #96]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b4c:	4b16      	ldr	r3, [pc, #88]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d114      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b58:	f7fb fe22 	bl	80017a0 <HAL_GetTick>
 8005b5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b60:	f7fb fe1e 	bl	80017a0 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e351      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b76:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0ee      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b8e:	d111      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005b90:	4b05      	ldr	r3, [pc, #20]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005b9c:	4b04      	ldr	r3, [pc, #16]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b9e:	400b      	ands	r3, r1
 8005ba0:	4901      	ldr	r1, [pc, #4]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	608b      	str	r3, [r1, #8]
 8005ba6:	e00b      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	40007000 	.word	0x40007000
 8005bb0:	0ffffcff 	.word	0x0ffffcff
 8005bb4:	4bac      	ldr	r3, [pc, #688]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	4aab      	ldr	r2, [pc, #684]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005bbe:	6093      	str	r3, [r2, #8]
 8005bc0:	4ba9      	ldr	r3, [pc, #676]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bcc:	49a6      	ldr	r1, [pc, #664]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d010      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bde:	4ba2      	ldr	r3, [pc, #648]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005be4:	4aa0      	ldr	r2, [pc, #640]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005bee:	4b9e      	ldr	r3, [pc, #632]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	499b      	ldr	r1, [pc, #620]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c0c:	4b96      	ldr	r3, [pc, #600]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c12:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c1a:	4993      	ldr	r1, [pc, #588]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c2e:	4b8e      	ldr	r3, [pc, #568]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c3c:	498a      	ldr	r1, [pc, #552]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c50:	4b85      	ldr	r3, [pc, #532]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c5e:	4982      	ldr	r1, [pc, #520]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c72:	4b7d      	ldr	r3, [pc, #500]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c80:	4979      	ldr	r1, [pc, #484]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c94:	4b74      	ldr	r3, [pc, #464]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9a:	f023 0203 	bic.w	r2, r3, #3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca2:	4971      	ldr	r1, [pc, #452]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cb6:	4b6c      	ldr	r3, [pc, #432]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cbc:	f023 020c 	bic.w	r2, r3, #12
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cc4:	4968      	ldr	r1, [pc, #416]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cd8:	4b63      	ldr	r3, [pc, #396]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cde:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce6:	4960      	ldr	r1, [pc, #384]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d00:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d08:	4957      	ldr	r1, [pc, #348]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d1c:	4b52      	ldr	r3, [pc, #328]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2a:	494f      	ldr	r1, [pc, #316]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d44:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4c:	4946      	ldr	r1, [pc, #280]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d60:	4b41      	ldr	r3, [pc, #260]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d66:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d6e:	493e      	ldr	r1, [pc, #248]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d82:	4b39      	ldr	r3, [pc, #228]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d90:	4935      	ldr	r1, [pc, #212]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005da4:	4b30      	ldr	r3, [pc, #192]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005daa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005db2:	492d      	ldr	r1, [pc, #180]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d011      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005dc6:	4b28      	ldr	r3, [pc, #160]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dcc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dd4:	4924      	ldr	r1, [pc, #144]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005de4:	d101      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005de6:	2301      	movs	r3, #1
 8005de8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005df6:	2301      	movs	r3, #1
 8005df8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e06:	4b18      	ldr	r3, [pc, #96]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e0c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e14:	4914      	ldr	r1, [pc, #80]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e28:	4b0f      	ldr	r3, [pc, #60]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e38:	490b      	ldr	r1, [pc, #44]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00f      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005e4c:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e52:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e5c:	4902      	ldr	r1, [pc, #8]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005e64:	e002      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005e66:	bf00      	nop
 8005e68:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e78:	4b8a      	ldr	r3, [pc, #552]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e88:	4986      	ldr	r1, [pc, #536]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005e9c:	4b81      	ldr	r3, [pc, #516]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ea2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005eac:	497d      	ldr	r1, [pc, #500]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d006      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 80d6 	beq.w	8006074 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ec8:	4b76      	ldr	r3, [pc, #472]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a75      	ldr	r2, [pc, #468]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ece:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed4:	f7fb fc64 	bl	80017a0 <HAL_GetTick>
 8005ed8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005edc:	f7fb fc60 	bl	80017a0 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b64      	cmp	r3, #100	@ 0x64
 8005ee8:	d901      	bls.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e195      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005eee:	4b6d      	ldr	r3, [pc, #436]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f0      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d021      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d11d      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f0e:	4b65      	ldr	r3, [pc, #404]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f14:	0c1b      	lsrs	r3, r3, #16
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f1c:	4b61      	ldr	r3, [pc, #388]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f22:	0e1b      	lsrs	r3, r3, #24
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	019a      	lsls	r2, r3, #6
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	041b      	lsls	r3, r3, #16
 8005f34:	431a      	orrs	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	061b      	lsls	r3, r3, #24
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	071b      	lsls	r3, r3, #28
 8005f42:	4958      	ldr	r1, [pc, #352]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f5e:	d00a      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d02e      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f74:	d129      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f76:	4b4b      	ldr	r3, [pc, #300]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f7c:	0c1b      	lsrs	r3, r3, #16
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f84:	4b47      	ldr	r3, [pc, #284]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f8a:	0f1b      	lsrs	r3, r3, #28
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	019a      	lsls	r2, r3, #6
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	041b      	lsls	r3, r3, #16
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	061b      	lsls	r3, r3, #24
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	071b      	lsls	r3, r3, #28
 8005faa:	493e      	ldr	r1, [pc, #248]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fb8:	f023 021f 	bic.w	r2, r3, #31
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	4938      	ldr	r1, [pc, #224]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01d      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fd6:	4b33      	ldr	r3, [pc, #204]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fdc:	0e1b      	lsrs	r3, r3, #24
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fea:	0f1b      	lsrs	r3, r3, #28
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	019a      	lsls	r2, r3, #6
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	041b      	lsls	r3, r3, #16
 8005ffe:	431a      	orrs	r2, r3
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	061b      	lsls	r3, r3, #24
 8006004:	431a      	orrs	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	071b      	lsls	r3, r3, #28
 800600a:	4926      	ldr	r1, [pc, #152]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d011      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	019a      	lsls	r2, r3, #6
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	041b      	lsls	r3, r3, #16
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	061b      	lsls	r3, r3, #24
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	071b      	lsls	r3, r3, #28
 800603a:	491a      	ldr	r1, [pc, #104]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006042:	4b18      	ldr	r3, [pc, #96]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a17      	ldr	r2, [pc, #92]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006048:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800604c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800604e:	f7fb fba7 	bl	80017a0 <HAL_GetTick>
 8006052:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006054:	e008      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006056:	f7fb fba3 	bl	80017a0 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b64      	cmp	r3, #100	@ 0x64
 8006062:	d901      	bls.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e0d8      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006068:	4b0e      	ldr	r3, [pc, #56]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f0      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	2b01      	cmp	r3, #1
 8006078:	f040 80ce 	bne.w	8006218 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800607c:	4b09      	ldr	r3, [pc, #36]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a08      	ldr	r2, [pc, #32]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006088:	f7fb fb8a 	bl	80017a0 <HAL_GetTick>
 800608c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800608e:	e00b      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006090:	f7fb fb86 	bl	80017a0 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b64      	cmp	r3, #100	@ 0x64
 800609c:	d904      	bls.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e0bb      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80060a2:	bf00      	nop
 80060a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060a8:	4b5e      	ldr	r3, [pc, #376]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b4:	d0ec      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d02e      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d12a      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80060de:	4b51      	ldr	r3, [pc, #324]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e4:	0c1b      	lsrs	r3, r3, #16
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f2:	0f1b      	lsrs	r3, r3, #28
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	019a      	lsls	r2, r3, #6
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	061b      	lsls	r3, r3, #24
 800610c:	431a      	orrs	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	071b      	lsls	r3, r3, #28
 8006112:	4944      	ldr	r1, [pc, #272]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800611a:	4b42      	ldr	r3, [pc, #264]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800611c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006120:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006128:	3b01      	subs	r3, #1
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	493d      	ldr	r1, [pc, #244]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d022      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006144:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006148:	d11d      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800614a:	4b36      	ldr	r3, [pc, #216]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006150:	0e1b      	lsrs	r3, r3, #24
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006158:	4b32      	ldr	r3, [pc, #200]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615e:	0f1b      	lsrs	r3, r3, #28
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	019a      	lsls	r2, r3, #6
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	041b      	lsls	r3, r3, #16
 8006172:	431a      	orrs	r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	061b      	lsls	r3, r3, #24
 8006178:	431a      	orrs	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	071b      	lsls	r3, r3, #28
 800617e:	4929      	ldr	r1, [pc, #164]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d028      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006192:	4b24      	ldr	r3, [pc, #144]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006198:	0e1b      	lsrs	r3, r3, #24
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061a0:	4b20      	ldr	r3, [pc, #128]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a6:	0c1b      	lsrs	r3, r3, #16
 80061a8:	f003 0303 	and.w	r3, r3, #3
 80061ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	019a      	lsls	r2, r3, #6
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	041b      	lsls	r3, r3, #16
 80061b8:	431a      	orrs	r2, r3
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	061b      	lsls	r3, r3, #24
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	071b      	lsls	r3, r3, #28
 80061c6:	4917      	ldr	r1, [pc, #92]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80061ce:	4b15      	ldr	r3, [pc, #84]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	4911      	ldr	r1, [pc, #68]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80061e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f0:	f7fb fad6 	bl	80017a0 <HAL_GetTick>
 80061f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061f6:	e008      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061f8:	f7fb fad2 	bl	80017a0 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b64      	cmp	r3, #100	@ 0x64
 8006204:	d901      	bls.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e007      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800620a:	4b06      	ldr	r3, [pc, #24]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006216:	d1ef      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	40023800 	.word	0x40023800

08006228 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006246:	f040 80a4 	bne.w	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800624a:	4ba6      	ldr	r3, [pc, #664]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800624c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006250:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006258:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006260:	f000 808a 	beq.w	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800626a:	f200 8091 	bhi.w	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006274:	d07d      	beq.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800627c:	f200 8088 	bhi.w	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d004      	beq.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800628c:	d039      	beq.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800628e:	e07f      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006290:	4b94      	ldr	r3, [pc, #592]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d108      	bne.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800629c:	4b91      	ldr	r3, [pc, #580]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062a4:	4a90      	ldr	r2, [pc, #576]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80062a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	e007      	b.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80062ae:	4b8d      	ldr	r3, [pc, #564]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062b6:	4a8d      	ldr	r2, [pc, #564]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80062b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062bc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80062be:	4b89      	ldr	r3, [pc, #548]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80062c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c4:	0e1b      	lsrs	r3, r3, #24
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80062cc:	4b85      	ldr	r3, [pc, #532]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80062ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d2:	099b      	lsrs	r3, r3, #6
 80062d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	fb03 f202 	mul.w	r2, r3, r2
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80062e6:	4b7f      	ldr	r3, [pc, #508]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80062e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062ec:	0a1b      	lsrs	r3, r3, #8
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fe:	617b      	str	r3, [r7, #20]
        break;
 8006300:	e047      	b.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006302:	4b78      	ldr	r3, [pc, #480]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d108      	bne.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800630e:	4b75      	ldr	r3, [pc, #468]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006316:	4a74      	ldr	r2, [pc, #464]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006318:	fbb2 f3f3 	udiv	r3, r2, r3
 800631c:	613b      	str	r3, [r7, #16]
 800631e:	e007      	b.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006320:	4b70      	ldr	r3, [pc, #448]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006328:	4a70      	ldr	r2, [pc, #448]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800632a:	fbb2 f3f3 	udiv	r3, r2, r3
 800632e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006330:	4b6c      	ldr	r3, [pc, #432]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006336:	0e1b      	lsrs	r3, r3, #24
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800633e:	4b69      	ldr	r3, [pc, #420]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006344:	099b      	lsrs	r3, r3, #6
 8006346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	fb03 f202 	mul.w	r2, r3, r2
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	fbb2 f3f3 	udiv	r3, r2, r3
 8006356:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006358:	4b62      	ldr	r3, [pc, #392]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800635a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800635e:	f003 031f 	and.w	r3, r3, #31
 8006362:	3301      	adds	r3, #1
 8006364:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	fbb2 f3f3 	udiv	r3, r2, r3
 800636e:	617b      	str	r3, [r7, #20]
        break;
 8006370:	e00f      	b.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006372:	4b5f      	ldr	r3, [pc, #380]	@ (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006374:	617b      	str	r3, [r7, #20]
        break;
 8006376:	e00c      	b.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006378:	4b5a      	ldr	r3, [pc, #360]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8006384:	4b58      	ldr	r3, [pc, #352]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006386:	617b      	str	r3, [r7, #20]
        break;
 8006388:	e003      	b.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 800638a:	4b58      	ldr	r3, [pc, #352]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800638c:	617b      	str	r3, [r7, #20]
        break;
 800638e:	e000      	b.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 8006390:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006398:	f040 80ad 	bne.w	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;
 800639c:	4b51      	ldr	r3, [pc, #324]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800639e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063a2:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80063aa:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80063b2:	f000 808a 	beq.w	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80063bc:	f200 809a 	bhi.w	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80063c6:	d07d      	beq.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80063ce:	f200 8091 	bhi.w	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d004      	beq.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063de:	d039      	beq.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80063e0:	e088      	b.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80063e2:	4b40      	ldr	r3, [pc, #256]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d108      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80063ee:	4b3d      	ldr	r3, [pc, #244]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063f6:	4a3c      	ldr	r2, [pc, #240]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	e007      	b.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006400:	4b38      	ldr	r3, [pc, #224]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006408:	4a38      	ldr	r2, [pc, #224]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800640a:	fbb2 f3f3 	udiv	r3, r2, r3
 800640e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006410:	4b34      	ldr	r3, [pc, #208]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006416:	0e1b      	lsrs	r3, r3, #24
 8006418:	f003 030f 	and.w	r3, r3, #15
 800641c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800641e:	4b31      	ldr	r3, [pc, #196]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006424:	099b      	lsrs	r3, r3, #6
 8006426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	fb03 f202 	mul.w	r2, r3, r2
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	fbb2 f3f3 	udiv	r3, r2, r3
 8006436:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006438:	4b2a      	ldr	r3, [pc, #168]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800643a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800643e:	0a1b      	lsrs	r3, r3, #8
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	3301      	adds	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006450:	617b      	str	r3, [r7, #20]
        break;
 8006452:	e050      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006454:	4b23      	ldr	r3, [pc, #140]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d108      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006460:	4b20      	ldr	r3, [pc, #128]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006468:	4a1f      	ldr	r2, [pc, #124]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800646a:	fbb2 f3f3 	udiv	r3, r2, r3
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	e007      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006472:	4b1c      	ldr	r3, [pc, #112]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800647a:	4a1c      	ldr	r2, [pc, #112]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006482:	4b18      	ldr	r3, [pc, #96]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006488:	0e1b      	lsrs	r3, r3, #24
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006490:	4b14      	ldr	r3, [pc, #80]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006496:	099b      	lsrs	r3, r3, #6
 8006498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	fb03 f202 	mul.w	r2, r3, r2
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80064aa:	4b0e      	ldr	r3, [pc, #56]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80064ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	3301      	adds	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c0:	617b      	str	r3, [r7, #20]
        break;
 80064c2:	e018      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 80064c4:	4b0a      	ldr	r3, [pc, #40]	@ (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80064c6:	617b      	str	r3, [r7, #20]
        break;
 80064c8:	e015      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80064ca:	4b06      	ldr	r3, [pc, #24]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d102      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 80064d6:	4b04      	ldr	r3, [pc, #16]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80064d8:	617b      	str	r3, [r7, #20]
        break;
 80064da:	e00c      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 80064dc:	4b03      	ldr	r3, [pc, #12]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80064de:	617b      	str	r3, [r7, #20]
        break;
 80064e0:	e009      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800
 80064e8:	00f42400 	.word	0x00f42400
 80064ec:	007a1200 	.word	0x007a1200
 80064f0:	00bb8000 	.word	0x00bb8000
        break;
 80064f4:	bf00      	nop
      }
    }
  }

  return frequency;
 80064f6:	697b      	ldr	r3, [r7, #20]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b02      	cmp	r3, #2
 800651a:	d904      	bls.n	8006526 <HAL_SAI_InitProtocol+0x22>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	3b03      	subs	r3, #3
 8006520:	2b01      	cmp	r3, #1
 8006522:	d812      	bhi.n	800654a <HAL_SAI_InitProtocol+0x46>
 8006524:	e008      	b.n	8006538 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 fad3 	bl	8006ad8 <SAI_InitI2S>
 8006532:	4603      	mov	r3, r0
 8006534:	75fb      	strb	r3, [r7, #23]
      break;
 8006536:	e00b      	b.n	8006550 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fb78 	bl	8006c34 <SAI_InitPCM>
 8006544:	4603      	mov	r3, r0
 8006546:	75fb      	strb	r3, [r7, #23]
      break;
 8006548:	e002      	b.n	8006550 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	75fb      	strb	r3, [r7, #23]
      break;
 800654e:	bf00      	nop
  }

  if (status == HAL_OK)
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d104      	bne.n	8006560 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 f808 	bl	800656c <HAL_SAI_Init>
 800655c:	4603      	mov	r3, r0
 800655e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006560:	7dfb      	ldrb	r3, [r7, #23]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e156      	b.n	8006838 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fa fee2 	bl	8001368 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fbf7 	bl	8006da0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d00c      	beq.n	80065d4 <HAL_SAI_Init+0x68>
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d80d      	bhi.n	80065da <HAL_SAI_Init+0x6e>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <HAL_SAI_Init+0x5c>
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d003      	beq.n	80065ce <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80065c6:	e008      	b.n	80065da <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61fb      	str	r3, [r7, #28]
      break;
 80065cc:	e006      	b.n	80065dc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80065ce:	2310      	movs	r3, #16
 80065d0:	61fb      	str	r3, [r7, #28]
      break;
 80065d2:	e003      	b.n	80065dc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80065d4:	2320      	movs	r3, #32
 80065d6:	61fb      	str	r3, [r7, #28]
      break;
 80065d8:	e000      	b.n	80065dc <HAL_SAI_Init+0x70>
      break;
 80065da:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d81e      	bhi.n	8006622 <HAL_SAI_Init+0xb6>
 80065e4:	a201      	add	r2, pc, #4	@ (adr r2, 80065ec <HAL_SAI_Init+0x80>)
 80065e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ea:	bf00      	nop
 80065ec:	080065fd 	.word	0x080065fd
 80065f0:	08006603 	.word	0x08006603
 80065f4:	0800660b 	.word	0x0800660b
 80065f8:	08006613 	.word	0x08006613
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80065fc:	2300      	movs	r3, #0
 80065fe:	617b      	str	r3, [r7, #20]
    }
    break;
 8006600:	e010      	b.n	8006624 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006602:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006606:	617b      	str	r3, [r7, #20]
    }
    break;
 8006608:	e00c      	b.n	8006624 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800660a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800660e:	617b      	str	r3, [r7, #20]
    }
    break;
 8006610:	e008      	b.n	8006624 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006612:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006616:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f043 0301 	orr.w	r3, r3, #1
 800661e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8006620:	e000      	b.n	8006624 <HAL_SAI_Init+0xb8>
    default:
      break;
 8006622:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a85      	ldr	r2, [pc, #532]	@ (8006840 <HAL_SAI_Init+0x2d4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <HAL_SAI_Init+0xcc>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a84      	ldr	r2, [pc, #528]	@ (8006844 <HAL_SAI_Init+0x2d8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d103      	bne.n	8006640 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006638:	4a83      	ldr	r2, [pc, #524]	@ (8006848 <HAL_SAI_Init+0x2dc>)
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	e002      	b.n	8006646 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006640:	4a82      	ldr	r2, [pc, #520]	@ (800684c <HAL_SAI_Init+0x2e0>)
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d04c      	beq.n	80066e8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a7a      	ldr	r2, [pc, #488]	@ (8006840 <HAL_SAI_Init+0x2d4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d004      	beq.n	8006666 <HAL_SAI_Init+0xfa>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a78      	ldr	r2, [pc, #480]	@ (8006844 <HAL_SAI_Init+0x2d8>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d104      	bne.n	8006670 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006666:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800666a:	f7ff fddd 	bl	8006228 <HAL_RCCEx_GetPeriphCLKFreq>
 800666e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a76      	ldr	r2, [pc, #472]	@ (8006850 <HAL_SAI_Init+0x2e4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <HAL_SAI_Init+0x118>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a75      	ldr	r2, [pc, #468]	@ (8006854 <HAL_SAI_Init+0x2e8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d104      	bne.n	800668e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006684:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006688:	f7ff fdce 	bl	8006228 <HAL_RCCEx_GetPeriphCLKFreq>
 800668c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	461a      	mov	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	025b      	lsls	r3, r3, #9
 80066a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4a6b      	ldr	r2, [pc, #428]	@ (8006858 <HAL_SAI_Init+0x2ec>)
 80066aa:	fba2 2303 	umull	r2, r3, r2, r3
 80066ae:	08da      	lsrs	r2, r3, #3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80066b4:	68f9      	ldr	r1, [r7, #12]
 80066b6:	4b68      	ldr	r3, [pc, #416]	@ (8006858 <HAL_SAI_Init+0x2ec>)
 80066b8:	fba3 2301 	umull	r2, r3, r3, r1
 80066bc:	08da      	lsrs	r2, r3, #3
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	1aca      	subs	r2, r1, r3
 80066c8:	2a08      	cmp	r2, #8
 80066ca:	d904      	bls.n	80066d6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d104      	bne.n	80066e8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	085a      	lsrs	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <HAL_SAI_Init+0x18c>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d109      	bne.n	800670c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_SAI_Init+0x198>
 8006700:	2300      	movs	r3, #0
 8006702:	e001      	b.n	8006708 <HAL_SAI_Init+0x19c>
 8006704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	e008      	b.n	800671e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006710:	2b01      	cmp	r3, #1
 8006712:	d102      	bne.n	800671a <HAL_SAI_Init+0x1ae>
 8006714:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006718:	e000      	b.n	800671c <HAL_SAI_Init+0x1b0>
 800671a:	2300      	movs	r3, #0
 800671c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4b4c      	ldr	r3, [pc, #304]	@ (800685c <HAL_SAI_Init+0x2f0>)
 800672a:	400b      	ands	r3, r1
 800672c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6819      	ldr	r1, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800673c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006742:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006748:	431a      	orrs	r2, r3
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8006756:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006762:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	051b      	lsls	r3, r3, #20
 800676a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6859      	ldr	r1, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4b38      	ldr	r3, [pc, #224]	@ (8006860 <HAL_SAI_Init+0x2f4>)
 8006780:	400b      	ands	r3, r1
 8006782:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6859      	ldr	r1, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6899      	ldr	r1, [r3, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b2d      	ldr	r3, [pc, #180]	@ (8006864 <HAL_SAI_Init+0x2f8>)
 80067ae:	400b      	ands	r3, r1
 80067b0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6899      	ldr	r1, [r3, #8]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067bc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80067c2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80067c8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80067ce:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d4:	3b01      	subs	r3, #1
 80067d6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80067d8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68d9      	ldr	r1, [r3, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80067f0:	400b      	ands	r3, r1
 80067f2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68d9      	ldr	r1, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006802:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006808:	041b      	lsls	r3, r3, #16
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006810:	3b01      	subs	r3, #1
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	40015804 	.word	0x40015804
 8006844:	40015824 	.word	0x40015824
 8006848:	40015800 	.word	0x40015800
 800684c:	40015c00 	.word	0x40015c00
 8006850:	40015c04 	.word	0x40015c04
 8006854:	40015c24 	.word	0x40015c24
 8006858:	cccccccd 	.word	0xcccccccd
 800685c:	ff05c010 	.word	0xff05c010
 8006860:	ffff1ff0 	.word	0xffff1ff0
 8006864:	fff88000 	.word	0xfff88000

08006868 <HAL_SAI_DMAPause>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <HAL_SAI_DMAPause+0x16>
 800687a:	2302      	movs	r3, #2
 800687c:	e010      	b.n	80068a0 <HAL_SAI_DMAPause+0x38>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Pause the audio file playing by disabling the SAI DMA requests */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006894:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d101      	bne.n	80068c6 <HAL_SAI_DMAStop+0x1a>
 80068c2:	2302      	movs	r3, #2
 80068c4:	e061      	b.n	800698a <HAL_SAI_DMAStop+0xde>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa66 	bl	8006da0 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80068e2:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01c      	beq.n	8006926 <HAL_SAI_DMAStop+0x7a>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b12      	cmp	r3, #18
 80068f6:	d116      	bne.n	8006926 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fb ffb9 	bl	8002874 <HAL_DMA_Abort>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00e      	beq.n	8006926 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800690c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800690e:	2b80      	cmp	r3, #128	@ 0x80
 8006910:	d009      	beq.n	8006926 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800691c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01c      	beq.n	8006968 <HAL_SAI_DMAStop+0xbc>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b22      	cmp	r3, #34	@ 0x22
 8006938:	d116      	bne.n	8006968 <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800693e:	4618      	mov	r0, r3
 8006940:	f7fb ff98 	bl	8002874 <HAL_DMA_Abort>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00e      	beq.n	8006968 <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006950:	2b80      	cmp	r3, #128	@ 0x80
 8006952:	d009      	beq.n	8006968 <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800695e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0208 	orr.w	r2, r2, #8
 8006976:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <HAL_SAI_Receive_DMA+0x1a>
 80069a8:	88fb      	ldrh	r3, [r7, #6]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e074      	b.n	8006a9c <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d16d      	bne.n	8006a9a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_SAI_Receive_DMA+0x38>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e067      	b.n	8006a9c <HAL_SAI_Receive_DMA+0x108>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	88fa      	ldrh	r2, [r7, #6]
 80069de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	88fa      	ldrh	r2, [r7, #6]
 80069e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2222      	movs	r2, #34	@ 0x22
 80069f6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069fe:	4a29      	ldr	r2, [pc, #164]	@ (8006aa4 <HAL_SAI_Receive_DMA+0x110>)
 8006a00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a06:	4a28      	ldr	r2, [pc, #160]	@ (8006aa8 <HAL_SAI_Receive_DMA+0x114>)
 8006a08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0e:	4a27      	ldr	r2, [pc, #156]	@ (8006aac <HAL_SAI_Receive_DMA+0x118>)
 8006a10:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a16:	2200      	movs	r2, #0
 8006a18:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	331c      	adds	r3, #28
 8006a24:	4619      	mov	r1, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a32:	f7fb febf 	bl	80027b4 <HAL_DMA_Start_IT>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d005      	beq.n	8006a48 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e029      	b.n	8006a9c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006a48:	2100      	movs	r1, #0
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 f972 	bl	8006d34 <SAI_InterruptFlag>
 8006a50:	4601      	mov	r1, r0
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006a6e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d107      	bne.n	8006a8e <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006a8c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e000      	b.n	8006a9c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8006a9a:	2302      	movs	r3, #2
  }
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	08006e71 	.word	0x08006e71
 8006aa8:	08006e11 	.word	0x08006e11
 8006aac:	08006e8d 	.word	0x08006e8d

08006ab0 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <SAI_InitI2S+0x2a>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d103      	bne.n	8006b0a <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006b08:	e002      	b.n	8006b10 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006b16:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e076      	b.n	8006c28 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d107      	bne.n	8006b50 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006b4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b4e:	e006      	b.n	8006b5e <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006b56:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d84f      	bhi.n	8006c04 <SAI_InitI2S+0x12c>
 8006b64:	a201      	add	r2, pc, #4	@ (adr r2, 8006b6c <SAI_InitI2S+0x94>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006b7d 	.word	0x08006b7d
 8006b70:	08006b9f 	.word	0x08006b9f
 8006b74:	08006bc1 	.word	0x08006bc1
 8006b78:	08006be3 	.word	0x08006be3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2280      	movs	r2, #128	@ 0x80
 8006b80:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	085b      	lsrs	r3, r3, #1
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	011a      	lsls	r2, r3, #4
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2240      	movs	r2, #64	@ 0x40
 8006b9a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006b9c:	e034      	b.n	8006c08 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2280      	movs	r2, #128	@ 0x80
 8006ba2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	019a      	lsls	r2, r3, #6
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	085b      	lsrs	r3, r3, #1
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2280      	movs	r2, #128	@ 0x80
 8006bbc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006bbe:	e023      	b.n	8006c08 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	22c0      	movs	r2, #192	@ 0xc0
 8006bc4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	085b      	lsrs	r3, r3, #1
 8006bca:	019a      	lsls	r2, r3, #6
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2280      	movs	r2, #128	@ 0x80
 8006bde:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006be0:	e012      	b.n	8006c08 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	22e0      	movs	r2, #224	@ 0xe0
 8006be6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	019a      	lsls	r2, r3, #6
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	085b      	lsrs	r3, r3, #1
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2280      	movs	r2, #128	@ 0x80
 8006c00:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006c02:	e001      	b.n	8006c08 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e00f      	b.n	8006c28 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d10b      	bne.n	8006c26 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d102      	bne.n	8006c1a <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2210      	movs	r2, #16
 8006c18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d102      	bne.n	8006c26 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2208      	movs	r2, #8
 8006c24:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <SAI_InitPCM+0x2a>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d103      	bne.n	8006c66 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006c64:	e002      	b.n	8006c6c <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006c78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006c80:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c94:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d103      	bne.n	8006ca4 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	645a      	str	r2, [r3, #68]	@ 0x44
 8006ca2:	e002      	b.n	8006caa <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	220d      	movs	r2, #13
 8006ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d837      	bhi.n	8006d20 <SAI_InitPCM+0xec>
 8006cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <SAI_InitPCM+0x84>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006cc9 	.word	0x08006cc9
 8006cbc:	08006cdf 	.word	0x08006cdf
 8006cc0:	08006cf5 	.word	0x08006cf5
 8006cc4:	08006d0b 	.word	0x08006d0b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2280      	movs	r2, #128	@ 0x80
 8006ccc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	011a      	lsls	r2, r3, #4
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2240      	movs	r2, #64	@ 0x40
 8006cda:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006cdc:	e022      	b.n	8006d24 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2280      	movs	r2, #128	@ 0x80
 8006ce2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2280      	movs	r2, #128	@ 0x80
 8006cf0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006cf2:	e017      	b.n	8006d24 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	22c0      	movs	r2, #192	@ 0xc0
 8006cf8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2280      	movs	r2, #128	@ 0x80
 8006d06:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006d08:	e00c      	b.n	8006d24 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	22e0      	movs	r2, #224	@ 0xe0
 8006d0e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2280      	movs	r2, #128	@ 0x80
 8006d1c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8006d1e:	e001      	b.n	8006d24 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e000      	b.n	8006d26 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop

08006d34 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d103      	bne.n	8006d50 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f043 0308 	orr.w	r3, r3, #8
 8006d4e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d10b      	bne.n	8006d70 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d003      	beq.n	8006d68 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d103      	bne.n	8006d70 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f043 0310 	orr.w	r3, r3, #16
 8006d6e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d003      	beq.n	8006d80 <SAI_InterruptFlag+0x4c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d104      	bne.n	8006d8a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	e003      	b.n	8006d92 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f043 0304 	orr.w	r3, r3, #4
 8006d90:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006d92:	68fb      	ldr	r3, [r7, #12]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006da8:	4b17      	ldr	r3, [pc, #92]	@ (8006e08 <SAI_Disable+0x68>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a17      	ldr	r2, [pc, #92]	@ (8006e0c <SAI_Disable+0x6c>)
 8006dae:	fba2 2303 	umull	r2, r3, r2, r3
 8006db2:	0b1b      	lsrs	r3, r3, #12
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006dca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	1e5a      	subs	r2, r3, #1
 8006dd0:	60fa      	str	r2, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10a      	bne.n	8006dec <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ddc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	72fb      	strb	r3, [r7, #11]
      break;
 8006dea:	e006      	b.n	8006dfa <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e8      	bne.n	8006dcc <SAI_Disable+0x2c>

  return status;
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	2000000c 	.word	0x2000000c
 8006e0c:	95cbec1b 	.word	0x95cbec1b

08006e10 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e26:	d01c      	beq.n	8006e62 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006e36:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006e40:	2100      	movs	r1, #0
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff ff76 	bl	8006d34 <SAI_InterruptFlag>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	43d9      	mvns	r1, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691a      	ldr	r2, [r3, #16]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	400a      	ands	r2, r1
 8006e58:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7f9 ffea 	bl	8000e3c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7ff fe16 	bl	8006ab0 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006e84:	bf00      	nop
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e98:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ea0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d004      	beq.n	8006ebe <SAI_DMAError+0x32>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d112      	bne.n	8006ee4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006ecc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7ff ff66 	bl	8006da0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff fded 	bl	8006ac4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006eea:	bf00      	nop
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e049      	b.n	8006f98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fa fa07 	bl	800132c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2202      	movs	r2, #2
 8006f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4610      	mov	r0, r2
 8006f32:	f000 f997 	bl	8007264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d001      	beq.n	8006fb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e04c      	b.n	8007052 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a26      	ldr	r2, [pc, #152]	@ (8007060 <HAL_TIM_Base_Start+0xc0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d022      	beq.n	8007010 <HAL_TIM_Base_Start+0x70>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd2:	d01d      	beq.n	8007010 <HAL_TIM_Base_Start+0x70>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a22      	ldr	r2, [pc, #136]	@ (8007064 <HAL_TIM_Base_Start+0xc4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d018      	beq.n	8007010 <HAL_TIM_Base_Start+0x70>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a21      	ldr	r2, [pc, #132]	@ (8007068 <HAL_TIM_Base_Start+0xc8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d013      	beq.n	8007010 <HAL_TIM_Base_Start+0x70>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1f      	ldr	r2, [pc, #124]	@ (800706c <HAL_TIM_Base_Start+0xcc>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00e      	beq.n	8007010 <HAL_TIM_Base_Start+0x70>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8007070 <HAL_TIM_Base_Start+0xd0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d009      	beq.n	8007010 <HAL_TIM_Base_Start+0x70>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1c      	ldr	r2, [pc, #112]	@ (8007074 <HAL_TIM_Base_Start+0xd4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d004      	beq.n	8007010 <HAL_TIM_Base_Start+0x70>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a1b      	ldr	r2, [pc, #108]	@ (8007078 <HAL_TIM_Base_Start+0xd8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d115      	bne.n	800703c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	4b19      	ldr	r3, [pc, #100]	@ (800707c <HAL_TIM_Base_Start+0xdc>)
 8007018:	4013      	ands	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b06      	cmp	r3, #6
 8007020:	d015      	beq.n	800704e <HAL_TIM_Base_Start+0xae>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007028:	d011      	beq.n	800704e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0201 	orr.w	r2, r2, #1
 8007038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703a:	e008      	b.n	800704e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0201 	orr.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	e000      	b.n	8007050 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40010000 	.word	0x40010000
 8007064:	40000400 	.word	0x40000400
 8007068:	40000800 	.word	0x40000800
 800706c:	40000c00 	.word	0x40000c00
 8007070:	40010400 	.word	0x40010400
 8007074:	40014000 	.word	0x40014000
 8007078:	40001800 	.word	0x40001800
 800707c:	00010007 	.word	0x00010007

08007080 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6a1a      	ldr	r2, [r3, #32]
 800708e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007092:	4013      	ands	r3, r2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10f      	bne.n	80070b8 <HAL_TIM_Base_Stop+0x38>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	f240 4344 	movw	r3, #1092	@ 0x444
 80070a2:	4013      	ands	r3, r2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d107      	bne.n	80070b8 <HAL_TIM_Base_Stop+0x38>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0201 	bic.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
	...

080070d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_TIM_ConfigClockSource+0x1c>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e0b4      	b.n	8007256 <HAL_TIM_ConfigClockSource+0x186>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	4b56      	ldr	r3, [pc, #344]	@ (8007260 <HAL_TIM_ConfigClockSource+0x190>)
 8007108:	4013      	ands	r3, r2
 800710a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007112:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007124:	d03e      	beq.n	80071a4 <HAL_TIM_ConfigClockSource+0xd4>
 8007126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800712a:	f200 8087 	bhi.w	800723c <HAL_TIM_ConfigClockSource+0x16c>
 800712e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007132:	f000 8086 	beq.w	8007242 <HAL_TIM_ConfigClockSource+0x172>
 8007136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800713a:	d87f      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x16c>
 800713c:	2b70      	cmp	r3, #112	@ 0x70
 800713e:	d01a      	beq.n	8007176 <HAL_TIM_ConfigClockSource+0xa6>
 8007140:	2b70      	cmp	r3, #112	@ 0x70
 8007142:	d87b      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x16c>
 8007144:	2b60      	cmp	r3, #96	@ 0x60
 8007146:	d050      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x11a>
 8007148:	2b60      	cmp	r3, #96	@ 0x60
 800714a:	d877      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x16c>
 800714c:	2b50      	cmp	r3, #80	@ 0x50
 800714e:	d03c      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0xfa>
 8007150:	2b50      	cmp	r3, #80	@ 0x50
 8007152:	d873      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x16c>
 8007154:	2b40      	cmp	r3, #64	@ 0x40
 8007156:	d058      	beq.n	800720a <HAL_TIM_ConfigClockSource+0x13a>
 8007158:	2b40      	cmp	r3, #64	@ 0x40
 800715a:	d86f      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x16c>
 800715c:	2b30      	cmp	r3, #48	@ 0x30
 800715e:	d064      	beq.n	800722a <HAL_TIM_ConfigClockSource+0x15a>
 8007160:	2b30      	cmp	r3, #48	@ 0x30
 8007162:	d86b      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x16c>
 8007164:	2b20      	cmp	r3, #32
 8007166:	d060      	beq.n	800722a <HAL_TIM_ConfigClockSource+0x15a>
 8007168:	2b20      	cmp	r3, #32
 800716a:	d867      	bhi.n	800723c <HAL_TIM_ConfigClockSource+0x16c>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d05c      	beq.n	800722a <HAL_TIM_ConfigClockSource+0x15a>
 8007170:	2b10      	cmp	r3, #16
 8007172:	d05a      	beq.n	800722a <HAL_TIM_ConfigClockSource+0x15a>
 8007174:	e062      	b.n	800723c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007186:	f000 f993 	bl	80074b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	609a      	str	r2, [r3, #8]
      break;
 80071a2:	e04f      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071b4:	f000 f97c 	bl	80074b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071c6:	609a      	str	r2, [r3, #8]
      break;
 80071c8:	e03c      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d6:	461a      	mov	r2, r3
 80071d8:	f000 f8f0 	bl	80073bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2150      	movs	r1, #80	@ 0x50
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 f949 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 80071e8:	e02c      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071f6:	461a      	mov	r2, r3
 80071f8:	f000 f90f 	bl	800741a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2160      	movs	r1, #96	@ 0x60
 8007202:	4618      	mov	r0, r3
 8007204:	f000 f939 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 8007208:	e01c      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007216:	461a      	mov	r2, r3
 8007218:	f000 f8d0 	bl	80073bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2140      	movs	r1, #64	@ 0x40
 8007222:	4618      	mov	r0, r3
 8007224:	f000 f929 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 8007228:	e00c      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4619      	mov	r1, r3
 8007234:	4610      	mov	r0, r2
 8007236:	f000 f920 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 800723a:	e003      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	73fb      	strb	r3, [r7, #15]
      break;
 8007240:	e000      	b.n	8007244 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	fffeff88 	.word	0xfffeff88

08007264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a46      	ldr	r2, [pc, #280]	@ (8007390 <TIM_Base_SetConfig+0x12c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d013      	beq.n	80072a4 <TIM_Base_SetConfig+0x40>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007282:	d00f      	beq.n	80072a4 <TIM_Base_SetConfig+0x40>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a43      	ldr	r2, [pc, #268]	@ (8007394 <TIM_Base_SetConfig+0x130>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00b      	beq.n	80072a4 <TIM_Base_SetConfig+0x40>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a42      	ldr	r2, [pc, #264]	@ (8007398 <TIM_Base_SetConfig+0x134>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d007      	beq.n	80072a4 <TIM_Base_SetConfig+0x40>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a41      	ldr	r2, [pc, #260]	@ (800739c <TIM_Base_SetConfig+0x138>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d003      	beq.n	80072a4 <TIM_Base_SetConfig+0x40>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a40      	ldr	r2, [pc, #256]	@ (80073a0 <TIM_Base_SetConfig+0x13c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d108      	bne.n	80072b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a35      	ldr	r2, [pc, #212]	@ (8007390 <TIM_Base_SetConfig+0x12c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d02b      	beq.n	8007316 <TIM_Base_SetConfig+0xb2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c4:	d027      	beq.n	8007316 <TIM_Base_SetConfig+0xb2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a32      	ldr	r2, [pc, #200]	@ (8007394 <TIM_Base_SetConfig+0x130>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d023      	beq.n	8007316 <TIM_Base_SetConfig+0xb2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a31      	ldr	r2, [pc, #196]	@ (8007398 <TIM_Base_SetConfig+0x134>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d01f      	beq.n	8007316 <TIM_Base_SetConfig+0xb2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a30      	ldr	r2, [pc, #192]	@ (800739c <TIM_Base_SetConfig+0x138>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d01b      	beq.n	8007316 <TIM_Base_SetConfig+0xb2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a2f      	ldr	r2, [pc, #188]	@ (80073a0 <TIM_Base_SetConfig+0x13c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d017      	beq.n	8007316 <TIM_Base_SetConfig+0xb2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a2e      	ldr	r2, [pc, #184]	@ (80073a4 <TIM_Base_SetConfig+0x140>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d013      	beq.n	8007316 <TIM_Base_SetConfig+0xb2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a2d      	ldr	r2, [pc, #180]	@ (80073a8 <TIM_Base_SetConfig+0x144>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00f      	beq.n	8007316 <TIM_Base_SetConfig+0xb2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a2c      	ldr	r2, [pc, #176]	@ (80073ac <TIM_Base_SetConfig+0x148>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d00b      	beq.n	8007316 <TIM_Base_SetConfig+0xb2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a2b      	ldr	r2, [pc, #172]	@ (80073b0 <TIM_Base_SetConfig+0x14c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d007      	beq.n	8007316 <TIM_Base_SetConfig+0xb2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a2a      	ldr	r2, [pc, #168]	@ (80073b4 <TIM_Base_SetConfig+0x150>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d003      	beq.n	8007316 <TIM_Base_SetConfig+0xb2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a29      	ldr	r2, [pc, #164]	@ (80073b8 <TIM_Base_SetConfig+0x154>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d108      	bne.n	8007328 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800731c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a10      	ldr	r2, [pc, #64]	@ (8007390 <TIM_Base_SetConfig+0x12c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d003      	beq.n	800735c <TIM_Base_SetConfig+0xf8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a12      	ldr	r2, [pc, #72]	@ (80073a0 <TIM_Base_SetConfig+0x13c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d103      	bne.n	8007364 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b01      	cmp	r3, #1
 8007374:	d105      	bne.n	8007382 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f023 0201 	bic.w	r2, r3, #1
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	611a      	str	r2, [r3, #16]
  }
}
 8007382:	bf00      	nop
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	40010000 	.word	0x40010000
 8007394:	40000400 	.word	0x40000400
 8007398:	40000800 	.word	0x40000800
 800739c:	40000c00 	.word	0x40000c00
 80073a0:	40010400 	.word	0x40010400
 80073a4:	40014000 	.word	0x40014000
 80073a8:	40014400 	.word	0x40014400
 80073ac:	40014800 	.word	0x40014800
 80073b0:	40001800 	.word	0x40001800
 80073b4:	40001c00 	.word	0x40001c00
 80073b8:	40002000 	.word	0x40002000

080073bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f023 0201 	bic.w	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f023 030a 	bic.w	r3, r3, #10
 80073f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	621a      	str	r2, [r3, #32]
}
 800740e:	bf00      	nop
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800741a:	b480      	push	{r7}
 800741c:	b087      	sub	sp, #28
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	f023 0210 	bic.w	r2, r3, #16
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	031b      	lsls	r3, r3, #12
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007456:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	4313      	orrs	r3, r2
 8007460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	621a      	str	r2, [r3, #32]
}
 800746e:	bf00      	nop
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	f043 0307 	orr.w	r3, r3, #7
 800749c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	609a      	str	r2, [r3, #8]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	021a      	lsls	r2, r3, #8
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	4313      	orrs	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	609a      	str	r2, [r3, #8]
}
 80074e4:	bf00      	nop
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007504:	2302      	movs	r3, #2
 8007506:	e06d      	b.n	80075e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a30      	ldr	r2, [pc, #192]	@ (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d004      	beq.n	800753c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a2f      	ldr	r2, [pc, #188]	@ (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d108      	bne.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007542:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007554:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a20      	ldr	r2, [pc, #128]	@ (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d022      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800757a:	d01d      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a1d      	ldr	r2, [pc, #116]	@ (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d018      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a1c      	ldr	r2, [pc, #112]	@ (80075fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d013      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a1a      	ldr	r2, [pc, #104]	@ (8007600 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00e      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a15      	ldr	r2, [pc, #84]	@ (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d009      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a16      	ldr	r2, [pc, #88]	@ (8007604 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d004      	beq.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a15      	ldr	r2, [pc, #84]	@ (8007608 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d10c      	bne.n	80075d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	40010000 	.word	0x40010000
 80075f4:	40010400 	.word	0x40010400
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40000c00 	.word	0x40000c00
 8007604:	40014000 	.word	0x40014000
 8007608:	40001800 	.word	0x40001800

0800760c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800760c:	b084      	sub	sp, #16
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	f107 001c 	add.w	r0, r7, #28
 800761a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800761e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007622:	2b01      	cmp	r3, #1
 8007624:	d121      	bne.n	800766a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	4b21      	ldr	r3, [pc, #132]	@ (80076bc <USB_CoreInit+0xb0>)
 8007638:	4013      	ands	r3, r2
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800764a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800764e:	2b01      	cmp	r3, #1
 8007650:	d105      	bne.n	800765e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 fade 	bl	8008c20 <USB_CoreReset>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]
 8007668:	e010      	b.n	800768c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 fad2 	bl	8008c20 <USB_CoreReset>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007684:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800768c:	7fbb      	ldrb	r3, [r7, #30]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d10b      	bne.n	80076aa <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f043 0206 	orr.w	r2, r3, #6
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f043 0220 	orr.w	r2, r3, #32
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076b6:	b004      	add	sp, #16
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	ffbdffbf 	.word	0xffbdffbf

080076c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80076ce:	79fb      	ldrb	r3, [r7, #7]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d165      	bne.n	80077a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4a41      	ldr	r2, [pc, #260]	@ (80077dc <USB_SetTurnaroundTime+0x11c>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d906      	bls.n	80076ea <USB_SetTurnaroundTime+0x2a>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	4a40      	ldr	r2, [pc, #256]	@ (80077e0 <USB_SetTurnaroundTime+0x120>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d202      	bcs.n	80076ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80076e4:	230f      	movs	r3, #15
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	e062      	b.n	80077b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	4a3c      	ldr	r2, [pc, #240]	@ (80077e0 <USB_SetTurnaroundTime+0x120>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d306      	bcc.n	8007700 <USB_SetTurnaroundTime+0x40>
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	4a3b      	ldr	r2, [pc, #236]	@ (80077e4 <USB_SetTurnaroundTime+0x124>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d202      	bcs.n	8007700 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80076fa:	230e      	movs	r3, #14
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	e057      	b.n	80077b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	4a38      	ldr	r2, [pc, #224]	@ (80077e4 <USB_SetTurnaroundTime+0x124>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d306      	bcc.n	8007716 <USB_SetTurnaroundTime+0x56>
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4a37      	ldr	r2, [pc, #220]	@ (80077e8 <USB_SetTurnaroundTime+0x128>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d202      	bcs.n	8007716 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007710:	230d      	movs	r3, #13
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	e04c      	b.n	80077b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	4a33      	ldr	r2, [pc, #204]	@ (80077e8 <USB_SetTurnaroundTime+0x128>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d306      	bcc.n	800772c <USB_SetTurnaroundTime+0x6c>
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	4a32      	ldr	r2, [pc, #200]	@ (80077ec <USB_SetTurnaroundTime+0x12c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d802      	bhi.n	800772c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007726:	230c      	movs	r3, #12
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	e041      	b.n	80077b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4a2f      	ldr	r2, [pc, #188]	@ (80077ec <USB_SetTurnaroundTime+0x12c>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d906      	bls.n	8007742 <USB_SetTurnaroundTime+0x82>
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4a2e      	ldr	r2, [pc, #184]	@ (80077f0 <USB_SetTurnaroundTime+0x130>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d802      	bhi.n	8007742 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800773c:	230b      	movs	r3, #11
 800773e:	617b      	str	r3, [r7, #20]
 8007740:	e036      	b.n	80077b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4a2a      	ldr	r2, [pc, #168]	@ (80077f0 <USB_SetTurnaroundTime+0x130>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d906      	bls.n	8007758 <USB_SetTurnaroundTime+0x98>
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4a29      	ldr	r2, [pc, #164]	@ (80077f4 <USB_SetTurnaroundTime+0x134>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d802      	bhi.n	8007758 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007752:	230a      	movs	r3, #10
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	e02b      	b.n	80077b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	4a26      	ldr	r2, [pc, #152]	@ (80077f4 <USB_SetTurnaroundTime+0x134>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d906      	bls.n	800776e <USB_SetTurnaroundTime+0xae>
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4a25      	ldr	r2, [pc, #148]	@ (80077f8 <USB_SetTurnaroundTime+0x138>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d202      	bcs.n	800776e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007768:	2309      	movs	r3, #9
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	e020      	b.n	80077b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	4a21      	ldr	r2, [pc, #132]	@ (80077f8 <USB_SetTurnaroundTime+0x138>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d306      	bcc.n	8007784 <USB_SetTurnaroundTime+0xc4>
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	4a20      	ldr	r2, [pc, #128]	@ (80077fc <USB_SetTurnaroundTime+0x13c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d802      	bhi.n	8007784 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800777e:	2308      	movs	r3, #8
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	e015      	b.n	80077b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4a1d      	ldr	r2, [pc, #116]	@ (80077fc <USB_SetTurnaroundTime+0x13c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d906      	bls.n	800779a <USB_SetTurnaroundTime+0xda>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4a1c      	ldr	r2, [pc, #112]	@ (8007800 <USB_SetTurnaroundTime+0x140>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d202      	bcs.n	800779a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007794:	2307      	movs	r3, #7
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	e00a      	b.n	80077b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800779a:	2306      	movs	r3, #6
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	e007      	b.n	80077b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80077a6:	2309      	movs	r3, #9
 80077a8:	617b      	str	r3, [r7, #20]
 80077aa:	e001      	b.n	80077b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077ac:	2309      	movs	r3, #9
 80077ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	029b      	lsls	r3, r3, #10
 80077c4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80077c8:	431a      	orrs	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	00d8acbf 	.word	0x00d8acbf
 80077e0:	00e4e1c0 	.word	0x00e4e1c0
 80077e4:	00f42400 	.word	0x00f42400
 80077e8:	01067380 	.word	0x01067380
 80077ec:	011a499f 	.word	0x011a499f
 80077f0:	01312cff 	.word	0x01312cff
 80077f4:	014ca43f 	.word	0x014ca43f
 80077f8:	016e3600 	.word	0x016e3600
 80077fc:	01a6ab1f 	.word	0x01a6ab1f
 8007800:	01e84800 	.word	0x01e84800

08007804 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f043 0201 	orr.w	r2, r3, #1
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f023 0201 	bic.w	r2, r3, #1
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007854:	2300      	movs	r3, #0
 8007856:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d115      	bne.n	8007896 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007876:	200a      	movs	r0, #10
 8007878:	f7f9 ff9e 	bl	80017b8 <HAL_Delay>
      ms += 10U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	330a      	adds	r3, #10
 8007880:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 f93b 	bl	8008afe <USB_GetMode>
 8007888:	4603      	mov	r3, r0
 800788a:	2b01      	cmp	r3, #1
 800788c:	d01e      	beq.n	80078cc <USB_SetCurrentMode+0x84>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2bc7      	cmp	r3, #199	@ 0xc7
 8007892:	d9f0      	bls.n	8007876 <USB_SetCurrentMode+0x2e>
 8007894:	e01a      	b.n	80078cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d115      	bne.n	80078c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078a8:	200a      	movs	r0, #10
 80078aa:	f7f9 ff85 	bl	80017b8 <HAL_Delay>
      ms += 10U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	330a      	adds	r3, #10
 80078b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 f922 	bl	8008afe <USB_GetMode>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d005      	beq.n	80078cc <USB_SetCurrentMode+0x84>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80078c4:	d9f0      	bls.n	80078a8 <USB_SetCurrentMode+0x60>
 80078c6:	e001      	b.n	80078cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e005      	b.n	80078d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2bc8      	cmp	r3, #200	@ 0xc8
 80078d0:	d101      	bne.n	80078d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078e0:	b084      	sub	sp, #16
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b086      	sub	sp, #24
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80078ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078fa:	2300      	movs	r3, #0
 80078fc:	613b      	str	r3, [r7, #16]
 80078fe:	e009      	b.n	8007914 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	3340      	adds	r3, #64	@ 0x40
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	2200      	movs	r2, #0
 800790c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	3301      	adds	r3, #1
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	2b0e      	cmp	r3, #14
 8007918:	d9f2      	bls.n	8007900 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800791a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800791e:	2b00      	cmp	r3, #0
 8007920:	d11c      	bne.n	800795c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007930:	f043 0302 	orr.w	r3, r3, #2
 8007934:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	e005      	b.n	8007968 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007960:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800796e:	461a      	mov	r2, r3
 8007970:	2300      	movs	r3, #0
 8007972:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007974:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007978:	2b01      	cmp	r3, #1
 800797a:	d10d      	bne.n	8007998 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800797c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007980:	2b00      	cmp	r3, #0
 8007982:	d104      	bne.n	800798e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007984:	2100      	movs	r1, #0
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f968 	bl	8007c5c <USB_SetDevSpeed>
 800798c:	e008      	b.n	80079a0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800798e:	2101      	movs	r1, #1
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f963 	bl	8007c5c <USB_SetDevSpeed>
 8007996:	e003      	b.n	80079a0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007998:	2103      	movs	r1, #3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f95e 	bl	8007c5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079a0:	2110      	movs	r1, #16
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f8fa 	bl	8007b9c <USB_FlushTxFifo>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f924 	bl	8007c00 <USB_FlushRxFifo>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c8:	461a      	mov	r2, r3
 80079ca:	2300      	movs	r3, #0
 80079cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079d4:	461a      	mov	r2, r3
 80079d6:	2300      	movs	r3, #0
 80079d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079e0:	461a      	mov	r2, r3
 80079e2:	2300      	movs	r3, #0
 80079e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079e6:	2300      	movs	r3, #0
 80079e8:	613b      	str	r3, [r7, #16]
 80079ea:	e043      	b.n	8007a74 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a02:	d118      	bne.n	8007a36 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a16:	461a      	mov	r2, r3
 8007a18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	e013      	b.n	8007a48 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	e008      	b.n	8007a48 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a42:	461a      	mov	r2, r3
 8007a44:	2300      	movs	r3, #0
 8007a46:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a54:	461a      	mov	r2, r3
 8007a56:	2300      	movs	r3, #0
 8007a58:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a66:	461a      	mov	r2, r3
 8007a68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	3301      	adds	r3, #1
 8007a72:	613b      	str	r3, [r7, #16]
 8007a74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a78:	461a      	mov	r2, r3
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d3b5      	bcc.n	80079ec <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a80:	2300      	movs	r3, #0
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	e043      	b.n	8007b0e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a9c:	d118      	bne.n	8007ad0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	e013      	b.n	8007ae2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	e008      	b.n	8007ae2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007adc:	461a      	mov	r2, r3
 8007ade:	2300      	movs	r3, #0
 8007ae0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aee:	461a      	mov	r2, r3
 8007af0:	2300      	movs	r3, #0
 8007af2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b00:	461a      	mov	r2, r3
 8007b02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b12:	461a      	mov	r2, r3
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d3b5      	bcc.n	8007a86 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b2c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007b3a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d105      	bne.n	8007b50 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	f043 0210 	orr.w	r2, r3, #16
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	4b0f      	ldr	r3, [pc, #60]	@ (8007b94 <USB_DevInit+0x2b4>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d005      	beq.n	8007b70 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f043 0208 	orr.w	r2, r3, #8
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d105      	bne.n	8007b84 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699a      	ldr	r2, [r3, #24]
 8007b7c:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <USB_DevInit+0x2b8>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b90:	b004      	add	sp, #16
 8007b92:	4770      	bx	lr
 8007b94:	803c3800 	.word	0x803c3800
 8007b98:	40000004 	.word	0x40000004

08007b9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bb6:	d901      	bls.n	8007bbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e01b      	b.n	8007bf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	daf2      	bge.n	8007baa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	019b      	lsls	r3, r3, #6
 8007bcc:	f043 0220 	orr.w	r2, r3, #32
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007be0:	d901      	bls.n	8007be6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e006      	b.n	8007bf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	d0f0      	beq.n	8007bd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c18:	d901      	bls.n	8007c1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e018      	b.n	8007c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	daf2      	bge.n	8007c0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2210      	movs	r2, #16
 8007c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c3c:	d901      	bls.n	8007c42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e006      	b.n	8007c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f003 0310 	and.w	r3, r3, #16
 8007c4a:	2b10      	cmp	r3, #16
 8007c4c:	d0f0      	beq.n	8007c30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	68f9      	ldr	r1, [r7, #12]
 8007c78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b087      	sub	sp, #28
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 0306 	and.w	r3, r3, #6
 8007ca6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d102      	bne.n	8007cb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	75fb      	strb	r3, [r7, #23]
 8007cb2:	e00a      	b.n	8007cca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d002      	beq.n	8007cc0 <USB_GetDevSpeed+0x32>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b06      	cmp	r3, #6
 8007cbe:	d102      	bne.n	8007cc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	75fb      	strb	r3, [r7, #23]
 8007cc4:	e001      	b.n	8007cca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007cc6:	230f      	movs	r3, #15
 8007cc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	371c      	adds	r7, #28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	785b      	ldrb	r3, [r3, #1]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d139      	bne.n	8007d68 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cfa:	69da      	ldr	r2, [r3, #28]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	2101      	movs	r1, #1
 8007d06:	fa01 f303 	lsl.w	r3, r1, r3
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	68f9      	ldr	r1, [r7, #12]
 8007d0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d12:	4313      	orrs	r3, r2
 8007d14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d153      	bne.n	8007dd4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	791b      	ldrb	r3, [r3, #4]
 8007d46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	059b      	lsls	r3, r3, #22
 8007d4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d50:	431a      	orrs	r2, r3
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	0159      	lsls	r1, r3, #5
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	440b      	add	r3, r1
 8007d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4b20      	ldr	r3, [pc, #128]	@ (8007de4 <USB_ActivateEndpoint+0x10c>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	600b      	str	r3, [r1, #0]
 8007d66:	e035      	b.n	8007dd4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d6e:	69da      	ldr	r2, [r3, #28]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	2101      	movs	r1, #1
 8007d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7e:	041b      	lsls	r3, r3, #16
 8007d80:	68f9      	ldr	r1, [r7, #12]
 8007d82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d86:	4313      	orrs	r3, r2
 8007d88:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d119      	bne.n	8007dd4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	791b      	ldrb	r3, [r3, #4]
 8007dba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	0159      	lsls	r1, r3, #5
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	440b      	add	r3, r1
 8007dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4b05      	ldr	r3, [pc, #20]	@ (8007de4 <USB_ActivateEndpoint+0x10c>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	10008000 	.word	0x10008000

08007de8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	785b      	ldrb	r3, [r3, #1]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d161      	bne.n	8007ec8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e1a:	d11f      	bne.n	8007e5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	0151      	lsls	r1, r2, #5
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	440a      	add	r2, r1
 8007e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	43db      	mvns	r3, r3
 8007e76:	68f9      	ldr	r1, [r7, #12]
 8007e78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e86:	69da      	ldr	r2, [r3, #28]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	2101      	movs	r1, #1
 8007e92:	fa01 f303 	lsl.w	r3, r1, r3
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	43db      	mvns	r3, r3
 8007e9a:	68f9      	ldr	r1, [r7, #12]
 8007e9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	0159      	lsls	r1, r3, #5
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	440b      	add	r3, r1
 8007eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4b35      	ldr	r3, [pc, #212]	@ (8007f98 <USB_DeactivateEndpoint+0x1b0>)
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	600b      	str	r3, [r1, #0]
 8007ec6:	e060      	b.n	8007f8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007eda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ede:	d11f      	bne.n	8007f20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007efa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007efe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	0151      	lsls	r1, r2, #5
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	440a      	add	r2, r1
 8007f16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	f003 030f 	and.w	r3, r3, #15
 8007f30:	2101      	movs	r1, #1
 8007f32:	fa01 f303 	lsl.w	r3, r1, r3
 8007f36:	041b      	lsls	r3, r3, #16
 8007f38:	43db      	mvns	r3, r3
 8007f3a:	68f9      	ldr	r1, [r7, #12]
 8007f3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f40:	4013      	ands	r3, r2
 8007f42:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f4a:	69da      	ldr	r2, [r3, #28]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	f003 030f 	and.w	r3, r3, #15
 8007f54:	2101      	movs	r1, #1
 8007f56:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	43db      	mvns	r3, r3
 8007f5e:	68f9      	ldr	r1, [r7, #12]
 8007f60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f64:	4013      	ands	r3, r2
 8007f66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	0159      	lsls	r1, r3, #5
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	440b      	add	r3, r1
 8007f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f82:	4619      	mov	r1, r3
 8007f84:	4b05      	ldr	r3, [pc, #20]	@ (8007f9c <USB_DeactivateEndpoint+0x1b4>)
 8007f86:	4013      	ands	r3, r2
 8007f88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	ec337800 	.word	0xec337800
 8007f9c:	eff37800 	.word	0xeff37800

08007fa0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08a      	sub	sp, #40	@ 0x28
 8007fa4:	af02      	add	r7, sp, #8
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4613      	mov	r3, r2
 8007fac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	785b      	ldrb	r3, [r3, #1]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	f040 8181 	bne.w	80082c4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d132      	bne.n	8008030 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fd6:	691a      	ldr	r2, [r3, #16]
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	0159      	lsls	r1, r3, #5
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	440b      	add	r3, r1
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4ba5      	ldr	r3, [pc, #660]	@ (800827c <USB_EPStartXfer+0x2dc>)
 8007fe8:	4013      	ands	r3, r2
 8007fea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	0151      	lsls	r1, r2, #5
 8007ffe:	69fa      	ldr	r2, [r7, #28]
 8008000:	440a      	add	r2, r1
 8008002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008006:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800800a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	4413      	add	r3, r2
 8008014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008018:	691a      	ldr	r2, [r3, #16]
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	0159      	lsls	r1, r3, #5
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	440b      	add	r3, r1
 8008022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008026:	4619      	mov	r1, r3
 8008028:	4b95      	ldr	r3, [pc, #596]	@ (8008280 <USB_EPStartXfer+0x2e0>)
 800802a:	4013      	ands	r3, r2
 800802c:	610b      	str	r3, [r1, #16]
 800802e:	e092      	b.n	8008156 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	4413      	add	r3, r2
 8008038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800803c:	691a      	ldr	r2, [r3, #16]
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	0159      	lsls	r1, r3, #5
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	440b      	add	r3, r1
 8008046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800804a:	4619      	mov	r1, r3
 800804c:	4b8c      	ldr	r3, [pc, #560]	@ (8008280 <USB_EPStartXfer+0x2e0>)
 800804e:	4013      	ands	r3, r2
 8008050:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	0159      	lsls	r1, r3, #5
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	440b      	add	r3, r1
 8008068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800806c:	4619      	mov	r1, r3
 800806e:	4b83      	ldr	r3, [pc, #524]	@ (800827c <USB_EPStartXfer+0x2dc>)
 8008070:	4013      	ands	r3, r2
 8008072:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d11a      	bne.n	80080b0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	691a      	ldr	r2, [r3, #16]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	429a      	cmp	r2, r3
 8008084:	d903      	bls.n	800808e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	689a      	ldr	r2, [r3, #8]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	4413      	add	r3, r2
 8008096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	0151      	lsls	r1, r2, #5
 80080a0:	69fa      	ldr	r2, [r7, #28]
 80080a2:	440a      	add	r2, r1
 80080a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080ac:	6113      	str	r3, [r2, #16]
 80080ae:	e01b      	b.n	80080e8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080bc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	6919      	ldr	r1, [r3, #16]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	440b      	add	r3, r1
 80080c8:	1e59      	subs	r1, r3, #1
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80080d2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080d4:	4b6b      	ldr	r3, [pc, #428]	@ (8008284 <USB_EPStartXfer+0x2e4>)
 80080d6:	400b      	ands	r3, r1
 80080d8:	69b9      	ldr	r1, [r7, #24]
 80080da:	0148      	lsls	r0, r1, #5
 80080dc:	69f9      	ldr	r1, [r7, #28]
 80080de:	4401      	add	r1, r0
 80080e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80080e4:	4313      	orrs	r3, r2
 80080e6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f4:	691a      	ldr	r2, [r3, #16]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080fe:	69b9      	ldr	r1, [r7, #24]
 8008100:	0148      	lsls	r0, r1, #5
 8008102:	69f9      	ldr	r1, [r7, #28]
 8008104:	4401      	add	r1, r0
 8008106:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800810a:	4313      	orrs	r3, r2
 800810c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	791b      	ldrb	r3, [r3, #4]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d11f      	bne.n	8008156 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	4413      	add	r3, r2
 800811e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	0151      	lsls	r1, r2, #5
 8008128:	69fa      	ldr	r2, [r7, #28]
 800812a:	440a      	add	r2, r1
 800812c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008130:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008134:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	4413      	add	r3, r2
 800813e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	69ba      	ldr	r2, [r7, #24]
 8008146:	0151      	lsls	r1, r2, #5
 8008148:	69fa      	ldr	r2, [r7, #28]
 800814a:	440a      	add	r2, r1
 800814c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008150:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008154:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008156:	79fb      	ldrb	r3, [r7, #7]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d14b      	bne.n	80081f4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d009      	beq.n	8008178 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008170:	461a      	mov	r2, r3
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	791b      	ldrb	r3, [r3, #4]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d128      	bne.n	80081d2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800818c:	2b00      	cmp	r3, #0
 800818e:	d110      	bne.n	80081b2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	0151      	lsls	r1, r2, #5
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	440a      	add	r2, r1
 80081a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	e00f      	b.n	80081d2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	0151      	lsls	r1, r2, #5
 80081c4:	69fa      	ldr	r2, [r7, #28]
 80081c6:	440a      	add	r2, r1
 80081c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	0151      	lsls	r1, r2, #5
 80081e4:	69fa      	ldr	r2, [r7, #28]
 80081e6:	440a      	add	r2, r1
 80081e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80081f0:	6013      	str	r3, [r2, #0]
 80081f2:	e16a      	b.n	80084ca <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	0151      	lsls	r1, r2, #5
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	440a      	add	r2, r1
 800820a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800820e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008212:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	791b      	ldrb	r3, [r3, #4]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d015      	beq.n	8008248 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 8152 	beq.w	80084ca <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800822c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	f003 030f 	and.w	r3, r3, #15
 8008236:	2101      	movs	r1, #1
 8008238:	fa01 f303 	lsl.w	r3, r1, r3
 800823c:	69f9      	ldr	r1, [r7, #28]
 800823e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008242:	4313      	orrs	r3, r2
 8008244:	634b      	str	r3, [r1, #52]	@ 0x34
 8008246:	e140      	b.n	80084ca <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008254:	2b00      	cmp	r3, #0
 8008256:	d117      	bne.n	8008288 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	0151      	lsls	r1, r2, #5
 800826a:	69fa      	ldr	r2, [r7, #28]
 800826c:	440a      	add	r2, r1
 800826e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008272:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	e016      	b.n	80082a8 <USB_EPStartXfer+0x308>
 800827a:	bf00      	nop
 800827c:	e007ffff 	.word	0xe007ffff
 8008280:	fff80000 	.word	0xfff80000
 8008284:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	440a      	add	r2, r1
 800829e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082a6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	68d9      	ldr	r1, [r3, #12]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	781a      	ldrb	r2, [r3, #0]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	b298      	uxth	r0, r3
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	4603      	mov	r3, r0
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 f9b9 	bl	8008634 <USB_WritePacket>
 80082c2:	e102      	b.n	80084ca <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	0159      	lsls	r1, r3, #5
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	440b      	add	r3, r1
 80082da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082de:	4619      	mov	r1, r3
 80082e0:	4b7c      	ldr	r3, [pc, #496]	@ (80084d4 <USB_EPStartXfer+0x534>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082f2:	691a      	ldr	r2, [r3, #16]
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	0159      	lsls	r1, r3, #5
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	440b      	add	r3, r1
 80082fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008300:	4619      	mov	r1, r3
 8008302:	4b75      	ldr	r3, [pc, #468]	@ (80084d8 <USB_EPStartXfer+0x538>)
 8008304:	4013      	ands	r3, r2
 8008306:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d12f      	bne.n	800836e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	689a      	ldr	r2, [r3, #8]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800833c:	69b9      	ldr	r1, [r7, #24]
 800833e:	0148      	lsls	r0, r1, #5
 8008340:	69f9      	ldr	r1, [r7, #28]
 8008342:	4401      	add	r1, r0
 8008344:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008348:	4313      	orrs	r3, r2
 800834a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	0151      	lsls	r1, r2, #5
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	440a      	add	r2, r1
 8008362:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008366:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800836a:	6113      	str	r3, [r2, #16]
 800836c:	e05f      	b.n	800842e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d123      	bne.n	80083be <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800838c:	69b9      	ldr	r1, [r7, #24]
 800838e:	0148      	lsls	r0, r1, #5
 8008390:	69f9      	ldr	r1, [r7, #28]
 8008392:	4401      	add	r1, r0
 8008394:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008398:	4313      	orrs	r3, r2
 800839a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	0151      	lsls	r1, r2, #5
 80083ae:	69fa      	ldr	r2, [r7, #28]
 80083b0:	440a      	add	r2, r1
 80083b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80083ba:	6113      	str	r3, [r2, #16]
 80083bc:	e037      	b.n	800842e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	691a      	ldr	r2, [r3, #16]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	4413      	add	r3, r2
 80083c8:	1e5a      	subs	r2, r3, #1
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	8afa      	ldrh	r2, [r7, #22]
 80083da:	fb03 f202 	mul.w	r2, r3, r2
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	8afb      	ldrh	r3, [r7, #22]
 80083f2:	04d9      	lsls	r1, r3, #19
 80083f4:	4b39      	ldr	r3, [pc, #228]	@ (80084dc <USB_EPStartXfer+0x53c>)
 80083f6:	400b      	ands	r3, r1
 80083f8:	69b9      	ldr	r1, [r7, #24]
 80083fa:	0148      	lsls	r0, r1, #5
 80083fc:	69f9      	ldr	r1, [r7, #28]
 80083fe:	4401      	add	r1, r0
 8008400:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008404:	4313      	orrs	r3, r2
 8008406:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008414:	691a      	ldr	r2, [r3, #16]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800841e:	69b9      	ldr	r1, [r7, #24]
 8008420:	0148      	lsls	r0, r1, #5
 8008422:	69f9      	ldr	r1, [r7, #28]
 8008424:	4401      	add	r1, r0
 8008426:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800842a:	4313      	orrs	r3, r2
 800842c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800842e:	79fb      	ldrb	r3, [r7, #7]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d10d      	bne.n	8008450 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d009      	beq.n	8008450 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	68d9      	ldr	r1, [r3, #12]
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800844c:	460a      	mov	r2, r1
 800844e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	791b      	ldrb	r3, [r3, #4]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d128      	bne.n	80084aa <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008464:	2b00      	cmp	r3, #0
 8008466:	d110      	bne.n	800848a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	0151      	lsls	r1, r2, #5
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	440a      	add	r2, r1
 800847e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008482:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	e00f      	b.n	80084aa <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084a8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	0151      	lsls	r1, r2, #5
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	440a      	add	r2, r1
 80084c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80084c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3720      	adds	r7, #32
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	fff80000 	.word	0xfff80000
 80084d8:	e007ffff 	.word	0xe007ffff
 80084dc:	1ff80000 	.word	0x1ff80000

080084e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d14a      	bne.n	8008594 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008516:	f040 8086 	bne.w	8008626 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	7812      	ldrb	r2, [r2, #0]
 800852e:	0151      	lsls	r1, r2, #5
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	440a      	add	r2, r1
 8008534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008538:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800853c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	7812      	ldrb	r2, [r2, #0]
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	440a      	add	r2, r1
 8008558:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800855c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008560:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3301      	adds	r3, #1
 8008566:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800856e:	4293      	cmp	r3, r2
 8008570:	d902      	bls.n	8008578 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	75fb      	strb	r3, [r7, #23]
          break;
 8008576:	e056      	b.n	8008626 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800858c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008590:	d0e7      	beq.n	8008562 <USB_EPStopXfer+0x82>
 8008592:	e048      	b.n	8008626 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085ac:	d13b      	bne.n	8008626 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	7812      	ldrb	r2, [r2, #0]
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	7812      	ldrb	r2, [r2, #0]
 80085e6:	0151      	lsls	r1, r2, #5
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	440a      	add	r2, r1
 80085ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008602:	4293      	cmp	r3, r2
 8008604:	d902      	bls.n	800860c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	75fb      	strb	r3, [r7, #23]
          break;
 800860a:	e00c      	b.n	8008626 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	4413      	add	r3, r2
 8008616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008624:	d0e7      	beq.n	80085f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
}
 8008628:	4618      	mov	r0, r3
 800862a:	371c      	adds	r7, #28
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008634:	b480      	push	{r7}
 8008636:	b089      	sub	sp, #36	@ 0x24
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	4611      	mov	r1, r2
 8008640:	461a      	mov	r2, r3
 8008642:	460b      	mov	r3, r1
 8008644:	71fb      	strb	r3, [r7, #7]
 8008646:	4613      	mov	r3, r2
 8008648:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008652:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008656:	2b00      	cmp	r3, #0
 8008658:	d123      	bne.n	80086a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800865a:	88bb      	ldrh	r3, [r7, #4]
 800865c:	3303      	adds	r3, #3
 800865e:	089b      	lsrs	r3, r3, #2
 8008660:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008662:	2300      	movs	r3, #0
 8008664:	61bb      	str	r3, [r7, #24]
 8008666:	e018      	b.n	800869a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	031a      	lsls	r2, r3, #12
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	4413      	add	r3, r2
 8008670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008674:	461a      	mov	r2, r3
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	3301      	adds	r3, #1
 8008680:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	3301      	adds	r3, #1
 8008686:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	3301      	adds	r3, #1
 800868c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	3301      	adds	r3, #1
 8008692:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	3301      	adds	r3, #1
 8008698:	61bb      	str	r3, [r7, #24]
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d3e2      	bcc.n	8008668 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3724      	adds	r7, #36	@ 0x24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b08b      	sub	sp, #44	@ 0x2c
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	4613      	mov	r3, r2
 80086bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80086c6:	88fb      	ldrh	r3, [r7, #6]
 80086c8:	089b      	lsrs	r3, r3, #2
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80086ce:	88fb      	ldrh	r3, [r7, #6]
 80086d0:	f003 0303 	and.w	r3, r3, #3
 80086d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80086d6:	2300      	movs	r3, #0
 80086d8:	623b      	str	r3, [r7, #32]
 80086da:	e014      	b.n	8008706 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80086e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ea:	3301      	adds	r3, #1
 80086ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f0:	3301      	adds	r3, #1
 80086f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f6:	3301      	adds	r3, #1
 80086f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fc:	3301      	adds	r3, #1
 80086fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	3301      	adds	r3, #1
 8008704:	623b      	str	r3, [r7, #32]
 8008706:	6a3a      	ldr	r2, [r7, #32]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	429a      	cmp	r2, r3
 800870c:	d3e6      	bcc.n	80086dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800870e:	8bfb      	ldrh	r3, [r7, #30]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d01e      	beq.n	8008752 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800871e:	461a      	mov	r2, r3
 8008720:	f107 0310 	add.w	r3, r7, #16
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	fa22 f303 	lsr.w	r3, r2, r3
 8008734:	b2da      	uxtb	r2, r3
 8008736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008738:	701a      	strb	r2, [r3, #0]
      i++;
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	3301      	adds	r3, #1
 800873e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008742:	3301      	adds	r3, #1
 8008744:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008746:	8bfb      	ldrh	r3, [r7, #30]
 8008748:	3b01      	subs	r3, #1
 800874a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800874c:	8bfb      	ldrh	r3, [r7, #30]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1ea      	bne.n	8008728 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008754:	4618      	mov	r0, r3
 8008756:	372c      	adds	r7, #44	@ 0x2c
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d12c      	bne.n	80087d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	db12      	blt.n	80087b4 <USB_EPSetStall+0x54>
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00f      	beq.n	80087b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	0151      	lsls	r1, r2, #5
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	440a      	add	r2, r1
 80087aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80087b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	0151      	lsls	r1, r2, #5
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	440a      	add	r2, r1
 80087ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80087d2:	6013      	str	r3, [r2, #0]
 80087d4:	e02b      	b.n	800882e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	db12      	blt.n	800880e <USB_EPSetStall+0xae>
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00f      	beq.n	800880e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	0151      	lsls	r1, r2, #5
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	440a      	add	r2, r1
 8008804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008808:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800880c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	4413      	add	r3, r2
 8008816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	0151      	lsls	r1, r2, #5
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	440a      	add	r2, r1
 8008824:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008828:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800882c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	785b      	ldrb	r3, [r3, #1]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d128      	bne.n	80088aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	0151      	lsls	r1, r2, #5
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	440a      	add	r2, r1
 800886e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008872:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008876:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	791b      	ldrb	r3, [r3, #4]
 800887c:	2b03      	cmp	r3, #3
 800887e:	d003      	beq.n	8008888 <USB_EPClearStall+0x4c>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	791b      	ldrb	r3, [r3, #4]
 8008884:	2b02      	cmp	r3, #2
 8008886:	d138      	bne.n	80088fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088a6:	6013      	str	r3, [r2, #0]
 80088a8:	e027      	b.n	80088fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	0151      	lsls	r1, r2, #5
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	440a      	add	r2, r1
 80088c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	791b      	ldrb	r3, [r3, #4]
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d003      	beq.n	80088da <USB_EPClearStall+0x9e>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	791b      	ldrb	r3, [r3, #4]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d10f      	bne.n	80088fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	0151      	lsls	r1, r2, #5
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	440a      	add	r2, r1
 80088f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008926:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800892a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800893c:	68f9      	ldr	r1, [r7, #12]
 800893e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008942:	4313      	orrs	r3, r2
 8008944:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008982:	f023 0302 	bic.w	r3, r3, #2
 8008986:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008996:	b480      	push	{r7}
 8008998:	b085      	sub	sp, #20
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80089b0:	f023 0303 	bic.w	r3, r3, #3
 80089b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089c4:	f043 0302 	orr.w	r3, r3, #2
 80089c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4013      	ands	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80089f0:	68fb      	ldr	r3, [r7, #12]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	4013      	ands	r3, r2
 8008a20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	0c1b      	lsrs	r3, r3, #16
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	4013      	ands	r3, r2
 8008a54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	b29b      	uxth	r3, r3
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	4013      	ands	r3, r2
 8008a92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a94:	68bb      	ldr	r3, [r7, #8]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b087      	sub	sp, #28
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008ac6:	78fb      	ldrb	r3, [r7, #3]
 8008ac8:	f003 030f 	and.w	r3, r3, #15
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad2:	01db      	lsls	r3, r3, #7
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4013      	ands	r3, r2
 8008aee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008af0:	68bb      	ldr	r3, [r7, #8]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	371c      	adds	r7, #28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	f003 0301 	and.w	r3, r3, #1
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
	...

08008b1c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b36:	4619      	mov	r1, r3
 8008b38:	4b09      	ldr	r3, [pc, #36]	@ (8008b60 <USB_ActivateSetup+0x44>)
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	fffff800 	.word	0xfffff800

08008b64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	333c      	adds	r3, #60	@ 0x3c
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	4a26      	ldr	r2, [pc, #152]	@ (8008c1c <USB_EP0_OutStart+0xb8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d90a      	bls.n	8008b9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b98:	d101      	bne.n	8008b9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e037      	b.n	8008c0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bcc:	f043 0318 	orr.w	r3, r3, #24
 8008bd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008be0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008be4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008be6:	7afb      	ldrb	r3, [r7, #11]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d10f      	bne.n	8008c0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c06:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008c0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	4f54300a 	.word	0x4f54300a

08008c20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c38:	d901      	bls.n	8008c3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e01b      	b.n	8008c76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	daf2      	bge.n	8008c2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	f043 0201 	orr.w	r2, r3, #1
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c62:	d901      	bls.n	8008c68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e006      	b.n	8008c76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d0f0      	beq.n	8008c56 <USB_CoreReset+0x36>

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
	...

08008c84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c90:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008c94:	f002 fdc2 	bl	800b81c <malloc>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d109      	bne.n	8008cb6 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	32b0      	adds	r2, #176	@ 0xb0
 8008cac:	2100      	movs	r1, #0
 8008cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	e0d4      	b.n	8008e60 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008cb6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008cba:	2100      	movs	r1, #0
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f002 fe6b 	bl	800b998 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	32b0      	adds	r2, #176	@ 0xb0
 8008ccc:	68f9      	ldr	r1, [r7, #12]
 8008cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	32b0      	adds	r2, #176	@ 0xb0
 8008cdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	7c1b      	ldrb	r3, [r3, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d138      	bne.n	8008d60 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008cee:	4b5e      	ldr	r3, [pc, #376]	@ (8008e68 <USBD_CDC_Init+0x1e4>)
 8008cf0:	7819      	ldrb	r1, [r3, #0]
 8008cf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f002 fbec 	bl	800b4d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8008e68 <USBD_CDC_Init+0x1e4>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	f003 020f 	and.w	r2, r3, #15
 8008d06:	6879      	ldr	r1, [r7, #4]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	440b      	add	r3, r1
 8008d12:	3324      	adds	r3, #36	@ 0x24
 8008d14:	2201      	movs	r2, #1
 8008d16:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d18:	4b54      	ldr	r3, [pc, #336]	@ (8008e6c <USBD_CDC_Init+0x1e8>)
 8008d1a:	7819      	ldrb	r1, [r3, #0]
 8008d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d20:	2202      	movs	r2, #2
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f002 fbd7 	bl	800b4d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008d28:	4b50      	ldr	r3, [pc, #320]	@ (8008e6c <USBD_CDC_Init+0x1e8>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	f003 020f 	and.w	r2, r3, #15
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	440b      	add	r3, r1
 8008d3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d40:	2201      	movs	r2, #1
 8008d42:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008d44:	4b4a      	ldr	r3, [pc, #296]	@ (8008e70 <USBD_CDC_Init+0x1ec>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	f003 020f 	and.w	r2, r3, #15
 8008d4c:	6879      	ldr	r1, [r7, #4]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	440b      	add	r3, r1
 8008d58:	3326      	adds	r3, #38	@ 0x26
 8008d5a:	2210      	movs	r2, #16
 8008d5c:	801a      	strh	r2, [r3, #0]
 8008d5e:	e035      	b.n	8008dcc <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d60:	4b41      	ldr	r3, [pc, #260]	@ (8008e68 <USBD_CDC_Init+0x1e4>)
 8008d62:	7819      	ldrb	r1, [r3, #0]
 8008d64:	2340      	movs	r3, #64	@ 0x40
 8008d66:	2202      	movs	r2, #2
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f002 fbb4 	bl	800b4d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e68 <USBD_CDC_Init+0x1e4>)
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	f003 020f 	and.w	r2, r3, #15
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	3324      	adds	r3, #36	@ 0x24
 8008d84:	2201      	movs	r2, #1
 8008d86:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d88:	4b38      	ldr	r3, [pc, #224]	@ (8008e6c <USBD_CDC_Init+0x1e8>)
 8008d8a:	7819      	ldrb	r1, [r3, #0]
 8008d8c:	2340      	movs	r3, #64	@ 0x40
 8008d8e:	2202      	movs	r2, #2
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f002 fba0 	bl	800b4d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008d96:	4b35      	ldr	r3, [pc, #212]	@ (8008e6c <USBD_CDC_Init+0x1e8>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	f003 020f 	and.w	r2, r3, #15
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	440b      	add	r3, r1
 8008daa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008dae:	2201      	movs	r2, #1
 8008db0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008db2:	4b2f      	ldr	r3, [pc, #188]	@ (8008e70 <USBD_CDC_Init+0x1ec>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	f003 020f 	and.w	r2, r3, #15
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	440b      	add	r3, r1
 8008dc6:	3326      	adds	r3, #38	@ 0x26
 8008dc8:	2210      	movs	r2, #16
 8008dca:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008dcc:	4b28      	ldr	r3, [pc, #160]	@ (8008e70 <USBD_CDC_Init+0x1ec>)
 8008dce:	7819      	ldrb	r1, [r3, #0]
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	2203      	movs	r2, #3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f002 fb7e 	bl	800b4d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008dda:	4b25      	ldr	r3, [pc, #148]	@ (8008e70 <USBD_CDC_Init+0x1ec>)
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	f003 020f 	and.w	r2, r3, #15
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	3324      	adds	r3, #36	@ 0x24
 8008df0:	2201      	movs	r2, #1
 8008df2:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	33b0      	adds	r3, #176	@ 0xb0
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e018      	b.n	8008e60 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	7c1b      	ldrb	r3, [r3, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10a      	bne.n	8008e4c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e36:	4b0d      	ldr	r3, [pc, #52]	@ (8008e6c <USBD_CDC_Init+0x1e8>)
 8008e38:	7819      	ldrb	r1, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f002 fc35 	bl	800b6b4 <USBD_LL_PrepareReceive>
 8008e4a:	e008      	b.n	8008e5e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e4c:	4b07      	ldr	r3, [pc, #28]	@ (8008e6c <USBD_CDC_Init+0x1e8>)
 8008e4e:	7819      	ldrb	r1, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e56:	2340      	movs	r3, #64	@ 0x40
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f002 fc2b 	bl	800b6b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	2000009f 	.word	0x2000009f
 8008e6c:	200000a0 	.word	0x200000a0
 8008e70:	200000a1 	.word	0x200000a1

08008e74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008e80:	4b3a      	ldr	r3, [pc, #232]	@ (8008f6c <USBD_CDC_DeInit+0xf8>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f002 fb4b 	bl	800b522 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008e8c:	4b37      	ldr	r3, [pc, #220]	@ (8008f6c <USBD_CDC_DeInit+0xf8>)
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	f003 020f 	and.w	r2, r3, #15
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	3324      	adds	r3, #36	@ 0x24
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008ea6:	4b32      	ldr	r3, [pc, #200]	@ (8008f70 <USBD_CDC_DeInit+0xfc>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f002 fb38 	bl	800b522 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8008f70 <USBD_CDC_DeInit+0xfc>)
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	f003 020f 	and.w	r2, r3, #15
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008eca:	2200      	movs	r2, #0
 8008ecc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008ece:	4b29      	ldr	r3, [pc, #164]	@ (8008f74 <USBD_CDC_DeInit+0x100>)
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f002 fb24 	bl	800b522 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008eda:	4b26      	ldr	r3, [pc, #152]	@ (8008f74 <USBD_CDC_DeInit+0x100>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	f003 020f 	and.w	r2, r3, #15
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	440b      	add	r3, r1
 8008eee:	3324      	adds	r3, #36	@ 0x24
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8008f74 <USBD_CDC_DeInit+0x100>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	f003 020f 	and.w	r2, r3, #15
 8008efc:	6879      	ldr	r1, [r7, #4]
 8008efe:	4613      	mov	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	440b      	add	r3, r1
 8008f08:	3326      	adds	r3, #38	@ 0x26
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	32b0      	adds	r2, #176	@ 0xb0
 8008f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01f      	beq.n	8008f60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	33b0      	adds	r3, #176	@ 0xb0
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	32b0      	adds	r2, #176	@ 0xb0
 8008f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f002 fc72 	bl	800b82c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	32b0      	adds	r2, #176	@ 0xb0
 8008f52:	2100      	movs	r1, #0
 8008f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	2000009f 	.word	0x2000009f
 8008f70:	200000a0 	.word	0x200000a0
 8008f74:	200000a1 	.word	0x200000a1

08008f78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	32b0      	adds	r2, #176	@ 0xb0
 8008f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e0bf      	b.n	8009128 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d050      	beq.n	8009056 <USBD_CDC_Setup+0xde>
 8008fb4:	2b20      	cmp	r3, #32
 8008fb6:	f040 80af 	bne.w	8009118 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	88db      	ldrh	r3, [r3, #6]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d03a      	beq.n	8009038 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	b25b      	sxtb	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	da1b      	bge.n	8009004 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	33b0      	adds	r3, #176	@ 0xb0
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008fe2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	88d2      	ldrh	r2, [r2, #6]
 8008fe8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	88db      	ldrh	r3, [r3, #6]
 8008fee:	2b07      	cmp	r3, #7
 8008ff0:	bf28      	it	cs
 8008ff2:	2307      	movcs	r3, #7
 8008ff4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	89fa      	ldrh	r2, [r7, #14]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 fdbd 	bl	800ab7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009002:	e090      	b.n	8009126 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	785a      	ldrb	r2, [r3, #1]
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	88db      	ldrh	r3, [r3, #6]
 8009012:	2b3f      	cmp	r3, #63	@ 0x3f
 8009014:	d803      	bhi.n	800901e <USBD_CDC_Setup+0xa6>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	88db      	ldrh	r3, [r3, #6]
 800901a:	b2da      	uxtb	r2, r3
 800901c:	e000      	b.n	8009020 <USBD_CDC_Setup+0xa8>
 800901e:	2240      	movs	r2, #64	@ 0x40
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009026:	6939      	ldr	r1, [r7, #16]
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800902e:	461a      	mov	r2, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 fdcf 	bl	800abd4 <USBD_CtlPrepareRx>
      break;
 8009036:	e076      	b.n	8009126 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	33b0      	adds	r3, #176	@ 0xb0
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	7850      	ldrb	r0, [r2, #1]
 800904e:	2200      	movs	r2, #0
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	4798      	blx	r3
      break;
 8009054:	e067      	b.n	8009126 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	785b      	ldrb	r3, [r3, #1]
 800905a:	2b0b      	cmp	r3, #11
 800905c:	d851      	bhi.n	8009102 <USBD_CDC_Setup+0x18a>
 800905e:	a201      	add	r2, pc, #4	@ (adr r2, 8009064 <USBD_CDC_Setup+0xec>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	08009095 	.word	0x08009095
 8009068:	08009111 	.word	0x08009111
 800906c:	08009103 	.word	0x08009103
 8009070:	08009103 	.word	0x08009103
 8009074:	08009103 	.word	0x08009103
 8009078:	08009103 	.word	0x08009103
 800907c:	08009103 	.word	0x08009103
 8009080:	08009103 	.word	0x08009103
 8009084:	08009103 	.word	0x08009103
 8009088:	08009103 	.word	0x08009103
 800908c:	080090bf 	.word	0x080090bf
 8009090:	080090e9 	.word	0x080090e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b03      	cmp	r3, #3
 800909e:	d107      	bne.n	80090b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80090a0:	f107 030a 	add.w	r3, r7, #10
 80090a4:	2202      	movs	r2, #2
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f001 fd67 	bl	800ab7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090ae:	e032      	b.n	8009116 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 fce5 	bl	800aa82 <USBD_CtlError>
            ret = USBD_FAIL;
 80090b8:	2303      	movs	r3, #3
 80090ba:	75fb      	strb	r3, [r7, #23]
          break;
 80090bc:	e02b      	b.n	8009116 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d107      	bne.n	80090da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80090ca:	f107 030d 	add.w	r3, r7, #13
 80090ce:	2201      	movs	r2, #1
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f001 fd52 	bl	800ab7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090d8:	e01d      	b.n	8009116 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f001 fcd0 	bl	800aa82 <USBD_CtlError>
            ret = USBD_FAIL;
 80090e2:	2303      	movs	r3, #3
 80090e4:	75fb      	strb	r3, [r7, #23]
          break;
 80090e6:	e016      	b.n	8009116 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d00f      	beq.n	8009114 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f001 fcc3 	bl	800aa82 <USBD_CtlError>
            ret = USBD_FAIL;
 80090fc:	2303      	movs	r3, #3
 80090fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009100:	e008      	b.n	8009114 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 fcbc 	bl	800aa82 <USBD_CtlError>
          ret = USBD_FAIL;
 800910a:	2303      	movs	r3, #3
 800910c:	75fb      	strb	r3, [r7, #23]
          break;
 800910e:	e002      	b.n	8009116 <USBD_CDC_Setup+0x19e>
          break;
 8009110:	bf00      	nop
 8009112:	e008      	b.n	8009126 <USBD_CDC_Setup+0x1ae>
          break;
 8009114:	bf00      	nop
      }
      break;
 8009116:	e006      	b.n	8009126 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f001 fcb1 	bl	800aa82 <USBD_CtlError>
      ret = USBD_FAIL;
 8009120:	2303      	movs	r3, #3
 8009122:	75fb      	strb	r3, [r7, #23]
      break;
 8009124:	bf00      	nop
  }

  return (uint8_t)ret;
 8009126:	7dfb      	ldrb	r3, [r7, #23]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3718      	adds	r7, #24
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009142:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	32b0      	adds	r2, #176	@ 0xb0
 800914e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009156:	2303      	movs	r3, #3
 8009158:	e065      	b.n	8009226 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	32b0      	adds	r2, #176	@ 0xb0
 8009164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009168:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	f003 020f 	and.w	r2, r3, #15
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	4613      	mov	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	440b      	add	r3, r1
 800917c:	3318      	adds	r3, #24
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d02f      	beq.n	80091e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	f003 020f 	and.w	r2, r3, #15
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	440b      	add	r3, r1
 8009196:	3318      	adds	r3, #24
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	78fb      	ldrb	r3, [r7, #3]
 800919c:	f003 010f 	and.w	r1, r3, #15
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	460b      	mov	r3, r1
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	440b      	add	r3, r1
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4403      	add	r3, r0
 80091ac:	331c      	adds	r3, #28
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80091b4:	fb01 f303 	mul.w	r3, r1, r3
 80091b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d112      	bne.n	80091e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80091be:	78fb      	ldrb	r3, [r7, #3]
 80091c0:	f003 020f 	and.w	r2, r3, #15
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	4613      	mov	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	440b      	add	r3, r1
 80091d0:	3318      	adds	r3, #24
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80091d6:	78f9      	ldrb	r1, [r7, #3]
 80091d8:	2300      	movs	r3, #0
 80091da:	2200      	movs	r2, #0
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f002 fa48 	bl	800b672 <USBD_LL_Transmit>
 80091e2:	e01f      	b.n	8009224 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	33b0      	adds	r3, #176	@ 0xb0
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d010      	beq.n	8009224 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	33b0      	adds	r3, #176	@ 0xb0
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009220:	78fa      	ldrb	r2, [r7, #3]
 8009222:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	460b      	mov	r3, r1
 8009238:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	32b0      	adds	r2, #176	@ 0xb0
 8009244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009248:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	32b0      	adds	r2, #176	@ 0xb0
 8009254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800925c:	2303      	movs	r3, #3
 800925e:	e01a      	b.n	8009296 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f002 fa46 	bl	800b6f6 <USBD_LL_GetRxDataSize>
 800926a:	4602      	mov	r2, r0
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	33b0      	adds	r3, #176	@ 0xb0
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009290:	4611      	mov	r1, r2
 8009292:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	32b0      	adds	r2, #176	@ 0xb0
 80092b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092bc:	2303      	movs	r3, #3
 80092be:	e024      	b.n	800930a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	33b0      	adds	r3, #176	@ 0xb0
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d019      	beq.n	8009308 <USBD_CDC_EP0_RxReady+0x6a>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80092da:	2bff      	cmp	r3, #255	@ 0xff
 80092dc:	d014      	beq.n	8009308 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	33b0      	adds	r3, #176	@ 0xb0
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80092f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80092fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	22ff      	movs	r2, #255	@ 0xff
 8009304:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800931c:	2182      	movs	r1, #130	@ 0x82
 800931e:	4818      	ldr	r0, [pc, #96]	@ (8009380 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009320:	f000 fd4f 	bl	8009dc2 <USBD_GetEpDesc>
 8009324:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009326:	2101      	movs	r1, #1
 8009328:	4815      	ldr	r0, [pc, #84]	@ (8009380 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800932a:	f000 fd4a 	bl	8009dc2 <USBD_GetEpDesc>
 800932e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009330:	2181      	movs	r1, #129	@ 0x81
 8009332:	4813      	ldr	r0, [pc, #76]	@ (8009380 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009334:	f000 fd45 	bl	8009dc2 <USBD_GetEpDesc>
 8009338:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2210      	movs	r2, #16
 8009344:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d006      	beq.n	800935a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	2200      	movs	r2, #0
 8009350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009354:	711a      	strb	r2, [r3, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d006      	beq.n	800936e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009368:	711a      	strb	r2, [r3, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2243      	movs	r2, #67	@ 0x43
 8009372:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009374:	4b02      	ldr	r3, [pc, #8]	@ (8009380 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	2000005c 	.word	0x2000005c

08009384 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800938c:	2182      	movs	r1, #130	@ 0x82
 800938e:	4818      	ldr	r0, [pc, #96]	@ (80093f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009390:	f000 fd17 	bl	8009dc2 <USBD_GetEpDesc>
 8009394:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009396:	2101      	movs	r1, #1
 8009398:	4815      	ldr	r0, [pc, #84]	@ (80093f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800939a:	f000 fd12 	bl	8009dc2 <USBD_GetEpDesc>
 800939e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093a0:	2181      	movs	r1, #129	@ 0x81
 80093a2:	4813      	ldr	r0, [pc, #76]	@ (80093f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093a4:	f000 fd0d 	bl	8009dc2 <USBD_GetEpDesc>
 80093a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	2210      	movs	r2, #16
 80093b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d006      	beq.n	80093ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	2200      	movs	r2, #0
 80093c0:	711a      	strb	r2, [r3, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f042 0202 	orr.w	r2, r2, #2
 80093c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d006      	beq.n	80093de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	711a      	strb	r2, [r3, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f042 0202 	orr.w	r2, r2, #2
 80093dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2243      	movs	r2, #67	@ 0x43
 80093e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80093e4:	4b02      	ldr	r3, [pc, #8]	@ (80093f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	2000005c 	.word	0x2000005c

080093f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093fc:	2182      	movs	r1, #130	@ 0x82
 80093fe:	4818      	ldr	r0, [pc, #96]	@ (8009460 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009400:	f000 fcdf 	bl	8009dc2 <USBD_GetEpDesc>
 8009404:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009406:	2101      	movs	r1, #1
 8009408:	4815      	ldr	r0, [pc, #84]	@ (8009460 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800940a:	f000 fcda 	bl	8009dc2 <USBD_GetEpDesc>
 800940e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009410:	2181      	movs	r1, #129	@ 0x81
 8009412:	4813      	ldr	r0, [pc, #76]	@ (8009460 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009414:	f000 fcd5 	bl	8009dc2 <USBD_GetEpDesc>
 8009418:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2210      	movs	r2, #16
 8009424:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d006      	beq.n	800943a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	2200      	movs	r2, #0
 8009430:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009434:	711a      	strb	r2, [r3, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d006      	beq.n	800944e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009448:	711a      	strb	r2, [r3, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2243      	movs	r2, #67	@ 0x43
 8009452:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009454:	4b02      	ldr	r3, [pc, #8]	@ (8009460 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	2000005c 	.word	0x2000005c

08009464 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	220a      	movs	r2, #10
 8009470:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009472:	4b03      	ldr	r3, [pc, #12]	@ (8009480 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009474:	4618      	mov	r0, r3
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	20000018 	.word	0x20000018

08009484 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009494:	2303      	movs	r3, #3
 8009496:	e009      	b.n	80094ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	33b0      	adds	r3, #176	@ 0xb0
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	32b0      	adds	r2, #176	@ 0xb0
 80094ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80094da:	2303      	movs	r3, #3
 80094dc:	e008      	b.n	80094f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	371c      	adds	r7, #28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	32b0      	adds	r2, #176	@ 0xb0
 8009510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009514:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800951c:	2303      	movs	r3, #3
 800951e:	e004      	b.n	800952a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
	...

08009538 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	32b0      	adds	r2, #176	@ 0xb0
 800954a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800954e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009550:	2301      	movs	r3, #1
 8009552:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800955a:	2303      	movs	r3, #3
 800955c:	e025      	b.n	80095aa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009564:	2b00      	cmp	r3, #0
 8009566:	d11f      	bne.n	80095a8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	2201      	movs	r2, #1
 800956c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009570:	4b10      	ldr	r3, [pc, #64]	@ (80095b4 <USBD_CDC_TransmitPacket+0x7c>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	f003 020f 	and.w	r2, r3, #15
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4403      	add	r3, r0
 800958a:	3318      	adds	r3, #24
 800958c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800958e:	4b09      	ldr	r3, [pc, #36]	@ (80095b4 <USBD_CDC_TransmitPacket+0x7c>)
 8009590:	7819      	ldrb	r1, [r3, #0]
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f002 f867 	bl	800b672 <USBD_LL_Transmit>

    ret = USBD_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	2000009f 	.word	0x2000009f

080095b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	32b0      	adds	r2, #176	@ 0xb0
 80095ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	32b0      	adds	r2, #176	@ 0xb0
 80095da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80095e2:	2303      	movs	r3, #3
 80095e4:	e018      	b.n	8009618 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	7c1b      	ldrb	r3, [r3, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10a      	bne.n	8009604 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009620 <USBD_CDC_ReceivePacket+0x68>)
 80095f0:	7819      	ldrb	r1, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f002 f859 	bl	800b6b4 <USBD_LL_PrepareReceive>
 8009602:	e008      	b.n	8009616 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009604:	4b06      	ldr	r3, [pc, #24]	@ (8009620 <USBD_CDC_ReceivePacket+0x68>)
 8009606:	7819      	ldrb	r1, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800960e:	2340      	movs	r3, #64	@ 0x40
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f002 f84f 	bl	800b6b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	200000a0 	.word	0x200000a0

08009624 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	4613      	mov	r3, r2
 8009630:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009638:	2303      	movs	r3, #3
 800963a:	e01f      	b.n	800967c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	79fa      	ldrb	r2, [r7, #7]
 800966e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f001 fec9 	bl	800b408 <USBD_LL_Init>
 8009676:	4603      	mov	r3, r0
 8009678:	75fb      	strb	r3, [r7, #23]

  return ret;
 800967a:	7dfb      	ldrb	r3, [r7, #23]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009698:	2303      	movs	r3, #3
 800969a:	e025      	b.n	80096e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	32ae      	adds	r2, #174	@ 0xae
 80096ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00f      	beq.n	80096d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	32ae      	adds	r2, #174	@ 0xae
 80096c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c8:	f107 020e 	add.w	r2, r7, #14
 80096cc:	4610      	mov	r0, r2
 80096ce:	4798      	blx	r3
 80096d0:	4602      	mov	r2, r0
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 fed1 	bl	800b4a0 <USBD_LL_Start>
 80096fe:	4603      	mov	r3, r0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009710:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009712:	4618      	mov	r0, r3
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	460b      	mov	r3, r1
 8009728:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009734:	2b00      	cmp	r3, #0
 8009736:	d009      	beq.n	800974c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	78fa      	ldrb	r2, [r7, #3]
 8009742:	4611      	mov	r1, r2
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	4798      	blx	r3
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800974c:	7bfb      	ldrb	r3, [r7, #15]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	460b      	mov	r3, r1
 8009760:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	78fa      	ldrb	r2, [r7, #3]
 8009770:	4611      	mov	r1, r2
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	4798      	blx	r3
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800977c:	2303      	movs	r3, #3
 800977e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009780:	7bfb      	ldrb	r3, [r7, #15]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	4618      	mov	r0, r3
 800979e:	f001 f936 	bl	800aa0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80097b0:	461a      	mov	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80097be:	f003 031f 	and.w	r3, r3, #31
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d01a      	beq.n	80097fc <USBD_LL_SetupStage+0x72>
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d822      	bhi.n	8009810 <USBD_LL_SetupStage+0x86>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d002      	beq.n	80097d4 <USBD_LL_SetupStage+0x4a>
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d00a      	beq.n	80097e8 <USBD_LL_SetupStage+0x5e>
 80097d2:	e01d      	b.n	8009810 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fb63 	bl	8009ea8 <USBD_StdDevReq>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73fb      	strb	r3, [r7, #15]
      break;
 80097e6:	e020      	b.n	800982a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fbcb 	bl	8009f8c <USBD_StdItfReq>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73fb      	strb	r3, [r7, #15]
      break;
 80097fa:	e016      	b.n	800982a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fc2d 	bl	800a064 <USBD_StdEPReq>
 800980a:	4603      	mov	r3, r0
 800980c:	73fb      	strb	r3, [r7, #15]
      break;
 800980e:	e00c      	b.n	800982a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009816:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800981a:	b2db      	uxtb	r3, r3
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f001 fe9e 	bl	800b560 <USBD_LL_StallEP>
 8009824:	4603      	mov	r3, r0
 8009826:	73fb      	strb	r3, [r7, #15]
      break;
 8009828:	bf00      	nop
  }

  return ret;
 800982a:	7bfb      	ldrb	r3, [r7, #15]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	460b      	mov	r3, r1
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009846:	7afb      	ldrb	r3, [r7, #11]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d16e      	bne.n	800992a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009852:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800985a:	2b03      	cmp	r3, #3
 800985c:	f040 8098 	bne.w	8009990 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	689a      	ldr	r2, [r3, #8]
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	429a      	cmp	r2, r3
 800986a:	d913      	bls.n	8009894 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	689a      	ldr	r2, [r3, #8]
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	1ad2      	subs	r2, r2, r3
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	4293      	cmp	r3, r2
 8009884:	bf28      	it	cs
 8009886:	4613      	movcs	r3, r2
 8009888:	461a      	mov	r2, r3
 800988a:	6879      	ldr	r1, [r7, #4]
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f001 f9be 	bl	800ac0e <USBD_CtlContinueRx>
 8009892:	e07d      	b.n	8009990 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800989a:	f003 031f 	and.w	r3, r3, #31
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d014      	beq.n	80098cc <USBD_LL_DataOutStage+0x98>
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d81d      	bhi.n	80098e2 <USBD_LL_DataOutStage+0xae>
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <USBD_LL_DataOutStage+0x7c>
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d003      	beq.n	80098b6 <USBD_LL_DataOutStage+0x82>
 80098ae:	e018      	b.n	80098e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	75bb      	strb	r3, [r7, #22]
            break;
 80098b4:	e018      	b.n	80098e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	4619      	mov	r1, r3
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 fa64 	bl	8009d8e <USBD_CoreFindIF>
 80098c6:	4603      	mov	r3, r0
 80098c8:	75bb      	strb	r3, [r7, #22]
            break;
 80098ca:	e00d      	b.n	80098e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	4619      	mov	r1, r3
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 fa66 	bl	8009da8 <USBD_CoreFindEP>
 80098dc:	4603      	mov	r3, r0
 80098de:	75bb      	strb	r3, [r7, #22]
            break;
 80098e0:	e002      	b.n	80098e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	75bb      	strb	r3, [r7, #22]
            break;
 80098e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80098e8:	7dbb      	ldrb	r3, [r7, #22]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d119      	bne.n	8009922 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d113      	bne.n	8009922 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80098fa:	7dba      	ldrb	r2, [r7, #22]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	32ae      	adds	r2, #174	@ 0xae
 8009900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00b      	beq.n	8009922 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800990a:	7dba      	ldrb	r2, [r7, #22]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009912:	7dba      	ldrb	r2, [r7, #22]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	32ae      	adds	r2, #174	@ 0xae
 8009918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f001 f984 	bl	800ac30 <USBD_CtlSendStatus>
 8009928:	e032      	b.n	8009990 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800992a:	7afb      	ldrb	r3, [r7, #11]
 800992c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009930:	b2db      	uxtb	r3, r3
 8009932:	4619      	mov	r1, r3
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fa37 	bl	8009da8 <USBD_CoreFindEP>
 800993a:	4603      	mov	r3, r0
 800993c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800993e:	7dbb      	ldrb	r3, [r7, #22]
 8009940:	2bff      	cmp	r3, #255	@ 0xff
 8009942:	d025      	beq.n	8009990 <USBD_LL_DataOutStage+0x15c>
 8009944:	7dbb      	ldrb	r3, [r7, #22]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d122      	bne.n	8009990 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b03      	cmp	r3, #3
 8009954:	d117      	bne.n	8009986 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009956:	7dba      	ldrb	r2, [r7, #22]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	32ae      	adds	r2, #174	@ 0xae
 800995c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00f      	beq.n	8009986 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009966:	7dba      	ldrb	r2, [r7, #22]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800996e:	7dba      	ldrb	r2, [r7, #22]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	32ae      	adds	r2, #174	@ 0xae
 8009974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	7afa      	ldrb	r2, [r7, #11]
 800997c:	4611      	mov	r1, r2
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	4798      	blx	r3
 8009982:	4603      	mov	r3, r0
 8009984:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800998c:	7dfb      	ldrb	r3, [r7, #23]
 800998e:	e000      	b.n	8009992 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b086      	sub	sp, #24
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	460b      	mov	r3, r1
 80099a4:	607a      	str	r2, [r7, #4]
 80099a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80099a8:	7afb      	ldrb	r3, [r7, #11]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d16f      	bne.n	8009a8e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	3314      	adds	r3, #20
 80099b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d15a      	bne.n	8009a74 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	689a      	ldr	r2, [r3, #8]
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d914      	bls.n	80099f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	689a      	ldr	r2, [r3, #8]
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	1ad2      	subs	r2, r2, r3
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	461a      	mov	r2, r3
 80099de:	6879      	ldr	r1, [r7, #4]
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f001 f8e6 	bl	800abb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099e6:	2300      	movs	r3, #0
 80099e8:	2200      	movs	r2, #0
 80099ea:	2100      	movs	r1, #0
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f001 fe61 	bl	800b6b4 <USBD_LL_PrepareReceive>
 80099f2:	e03f      	b.n	8009a74 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	68da      	ldr	r2, [r3, #12]
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d11c      	bne.n	8009a3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d316      	bcc.n	8009a3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d20f      	bcs.n	8009a3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f001 f8c7 	bl	800abb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2100      	movs	r1, #0
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f001 fe3e 	bl	800b6b4 <USBD_LL_PrepareReceive>
 8009a38:	e01c      	b.n	8009a74 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d10f      	bne.n	8009a66 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d009      	beq.n	8009a66 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a66:	2180      	movs	r1, #128	@ 0x80
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f001 fd79 	bl	800b560 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f001 f8f1 	bl	800ac56 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d03a      	beq.n	8009af4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f7ff fe42 	bl	8009708 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009a8c:	e032      	b.n	8009af4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009a8e:	7afb      	ldrb	r3, [r7, #11]
 8009a90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	4619      	mov	r1, r3
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 f985 	bl	8009da8 <USBD_CoreFindEP>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	2bff      	cmp	r3, #255	@ 0xff
 8009aa6:	d025      	beq.n	8009af4 <USBD_LL_DataInStage+0x15a>
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d122      	bne.n	8009af4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d11c      	bne.n	8009af4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009aba:	7dfa      	ldrb	r2, [r7, #23]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	32ae      	adds	r2, #174	@ 0xae
 8009ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d014      	beq.n	8009af4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009aca:	7dfa      	ldrb	r2, [r7, #23]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009ad2:	7dfa      	ldrb	r2, [r7, #23]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	32ae      	adds	r2, #174	@ 0xae
 8009ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	7afa      	ldrb	r2, [r7, #11]
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	4798      	blx	r3
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009aea:	7dbb      	ldrb	r3, [r7, #22]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009af0:	7dbb      	ldrb	r3, [r7, #22]
 8009af2:	e000      	b.n	8009af6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b084      	sub	sp, #16
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d014      	beq.n	8009b64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00e      	beq.n	8009b64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	6852      	ldr	r2, [r2, #4]
 8009b52:	b2d2      	uxtb	r2, r2
 8009b54:	4611      	mov	r1, r2
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	4798      	blx	r3
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009b60:	2303      	movs	r3, #3
 8009b62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b64:	2340      	movs	r3, #64	@ 0x40
 8009b66:	2200      	movs	r2, #0
 8009b68:	2100      	movs	r1, #0
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f001 fcb3 	bl	800b4d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2240      	movs	r2, #64	@ 0x40
 8009b7c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b80:	2340      	movs	r3, #64	@ 0x40
 8009b82:	2200      	movs	r2, #0
 8009b84:	2180      	movs	r1, #128	@ 0x80
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f001 fca5 	bl	800b4d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2240      	movs	r2, #64	@ 0x40
 8009b96:	621a      	str	r2, [r3, #32]

  return ret;
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b083      	sub	sp, #12
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	460b      	mov	r3, r1
 8009bac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	78fa      	ldrb	r2, [r7, #3]
 8009bb2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b083      	sub	sp, #12
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d006      	beq.n	8009be4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2204      	movs	r2, #4
 8009be8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b083      	sub	sp, #12
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b04      	cmp	r3, #4
 8009c0c:	d106      	bne.n	8009c1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b03      	cmp	r3, #3
 8009c3c:	d110      	bne.n	8009c60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00b      	beq.n	8009c60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d005      	beq.n	8009c60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	32ae      	adds	r2, #174	@ 0xae
 8009c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d101      	bne.n	8009c8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e01c      	b.n	8009cc6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	d115      	bne.n	8009cc4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	32ae      	adds	r2, #174	@ 0xae
 8009ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00b      	beq.n	8009cc4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	32ae      	adds	r2, #174	@ 0xae
 8009cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cba:	6a1b      	ldr	r3, [r3, #32]
 8009cbc:	78fa      	ldrb	r2, [r7, #3]
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	32ae      	adds	r2, #174	@ 0xae
 8009ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e01c      	b.n	8009d2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b03      	cmp	r3, #3
 8009cfa:	d115      	bne.n	8009d28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	32ae      	adds	r2, #174	@ 0xae
 8009d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	32ae      	adds	r2, #174	@ 0xae
 8009d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d20:	78fa      	ldrb	r2, [r7, #3]
 8009d22:	4611      	mov	r1, r2
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00e      	beq.n	8009d84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	6852      	ldr	r2, [r2, #4]
 8009d72:	b2d2      	uxtb	r2, r2
 8009d74:	4611      	mov	r1, r2
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	4798      	blx	r3
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009d80:	2303      	movs	r3, #3
 8009d82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b083      	sub	sp, #12
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	460b      	mov	r3, r1
 8009d98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009d9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	460b      	mov	r3, r1
 8009db2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009db4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b086      	sub	sp, #24
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	885b      	ldrh	r3, [r3, #2]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	7812      	ldrb	r2, [r2, #0]
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d91f      	bls.n	8009e28 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009dee:	e013      	b.n	8009e18 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009df0:	f107 030a 	add.w	r3, r7, #10
 8009df4:	4619      	mov	r1, r3
 8009df6:	6978      	ldr	r0, [r7, #20]
 8009df8:	f000 f81b 	bl	8009e32 <USBD_GetNextDesc>
 8009dfc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	785b      	ldrb	r3, [r3, #1]
 8009e02:	2b05      	cmp	r3, #5
 8009e04:	d108      	bne.n	8009e18 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	789b      	ldrb	r3, [r3, #2]
 8009e0e:	78fa      	ldrb	r2, [r7, #3]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d008      	beq.n	8009e26 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009e14:	2300      	movs	r3, #0
 8009e16:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	885b      	ldrh	r3, [r3, #2]
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	897b      	ldrh	r3, [r7, #10]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d8e5      	bhi.n	8009df0 <USBD_GetEpDesc+0x2e>
 8009e24:	e000      	b.n	8009e28 <USBD_GetEpDesc+0x66>
          break;
 8009e26:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009e28:	693b      	ldr	r3, [r7, #16]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b085      	sub	sp, #20
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	881b      	ldrh	r3, [r3, #0]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	7812      	ldrb	r2, [r2, #0]
 8009e48:	4413      	add	r3, r2
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	461a      	mov	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4413      	add	r3, r2
 8009e5a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b087      	sub	sp, #28
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009e88:	8a3b      	ldrh	r3, [r7, #16]
 8009e8a:	021b      	lsls	r3, r3, #8
 8009e8c:	b21a      	sxth	r2, r3
 8009e8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	b21b      	sxth	r3, r3
 8009e96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009e98:	89fb      	ldrh	r3, [r7, #14]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	371c      	adds	r7, #28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
	...

08009ea8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ebe:	2b40      	cmp	r3, #64	@ 0x40
 8009ec0:	d005      	beq.n	8009ece <USBD_StdDevReq+0x26>
 8009ec2:	2b40      	cmp	r3, #64	@ 0x40
 8009ec4:	d857      	bhi.n	8009f76 <USBD_StdDevReq+0xce>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00f      	beq.n	8009eea <USBD_StdDevReq+0x42>
 8009eca:	2b20      	cmp	r3, #32
 8009ecc:	d153      	bne.n	8009f76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	32ae      	adds	r2, #174	@ 0xae
 8009ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	4798      	blx	r3
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ee8:	e04a      	b.n	8009f80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	785b      	ldrb	r3, [r3, #1]
 8009eee:	2b09      	cmp	r3, #9
 8009ef0:	d83b      	bhi.n	8009f6a <USBD_StdDevReq+0xc2>
 8009ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef8 <USBD_StdDevReq+0x50>)
 8009ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef8:	08009f4d 	.word	0x08009f4d
 8009efc:	08009f61 	.word	0x08009f61
 8009f00:	08009f6b 	.word	0x08009f6b
 8009f04:	08009f57 	.word	0x08009f57
 8009f08:	08009f6b 	.word	0x08009f6b
 8009f0c:	08009f2b 	.word	0x08009f2b
 8009f10:	08009f21 	.word	0x08009f21
 8009f14:	08009f6b 	.word	0x08009f6b
 8009f18:	08009f43 	.word	0x08009f43
 8009f1c:	08009f35 	.word	0x08009f35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fa3c 	bl	800a3a0 <USBD_GetDescriptor>
          break;
 8009f28:	e024      	b.n	8009f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fbcb 	bl	800a6c8 <USBD_SetAddress>
          break;
 8009f32:	e01f      	b.n	8009f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009f34:	6839      	ldr	r1, [r7, #0]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fc0a 	bl	800a750 <USBD_SetConfig>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]
          break;
 8009f40:	e018      	b.n	8009f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fcad 	bl	800a8a4 <USBD_GetConfig>
          break;
 8009f4a:	e013      	b.n	8009f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fcde 	bl	800a910 <USBD_GetStatus>
          break;
 8009f54:	e00e      	b.n	8009f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fd0d 	bl	800a978 <USBD_SetFeature>
          break;
 8009f5e:	e009      	b.n	8009f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fd31 	bl	800a9ca <USBD_ClrFeature>
          break;
 8009f68:	e004      	b.n	8009f74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fd88 	bl	800aa82 <USBD_CtlError>
          break;
 8009f72:	bf00      	nop
      }
      break;
 8009f74:	e004      	b.n	8009f80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fd82 	bl	800aa82 <USBD_CtlError>
      break;
 8009f7e:	bf00      	nop
  }

  return ret;
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop

08009f8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009fa2:	2b40      	cmp	r3, #64	@ 0x40
 8009fa4:	d005      	beq.n	8009fb2 <USBD_StdItfReq+0x26>
 8009fa6:	2b40      	cmp	r3, #64	@ 0x40
 8009fa8:	d852      	bhi.n	800a050 <USBD_StdItfReq+0xc4>
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <USBD_StdItfReq+0x26>
 8009fae:	2b20      	cmp	r3, #32
 8009fb0:	d14e      	bne.n	800a050 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d840      	bhi.n	800a042 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	889b      	ldrh	r3, [r3, #4]
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d836      	bhi.n	800a038 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	889b      	ldrh	r3, [r3, #4]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7ff fedb 	bl	8009d8e <USBD_CoreFindIF>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fdc:	7bbb      	ldrb	r3, [r7, #14]
 8009fde:	2bff      	cmp	r3, #255	@ 0xff
 8009fe0:	d01d      	beq.n	800a01e <USBD_StdItfReq+0x92>
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d11a      	bne.n	800a01e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009fe8:	7bba      	ldrb	r2, [r7, #14]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	32ae      	adds	r2, #174	@ 0xae
 8009fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00f      	beq.n	800a018 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009ff8:	7bba      	ldrb	r2, [r7, #14]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a000:	7bba      	ldrb	r2, [r7, #14]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	32ae      	adds	r2, #174	@ 0xae
 800a006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	4798      	blx	r3
 800a012:	4603      	mov	r3, r0
 800a014:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a016:	e004      	b.n	800a022 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a018:	2303      	movs	r3, #3
 800a01a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a01c:	e001      	b.n	800a022 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a01e:	2303      	movs	r3, #3
 800a020:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	88db      	ldrh	r3, [r3, #6]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d110      	bne.n	800a04c <USBD_StdItfReq+0xc0>
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10d      	bne.n	800a04c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 fdfd 	bl	800ac30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a036:	e009      	b.n	800a04c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fd21 	bl	800aa82 <USBD_CtlError>
          break;
 800a040:	e004      	b.n	800a04c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fd1c 	bl	800aa82 <USBD_CtlError>
          break;
 800a04a:	e000      	b.n	800a04e <USBD_StdItfReq+0xc2>
          break;
 800a04c:	bf00      	nop
      }
      break;
 800a04e:	e004      	b.n	800a05a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fd15 	bl	800aa82 <USBD_CtlError>
      break;
 800a058:	bf00      	nop
  }

  return ret;
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	889b      	ldrh	r3, [r3, #4]
 800a076:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a080:	2b40      	cmp	r3, #64	@ 0x40
 800a082:	d007      	beq.n	800a094 <USBD_StdEPReq+0x30>
 800a084:	2b40      	cmp	r3, #64	@ 0x40
 800a086:	f200 817f 	bhi.w	800a388 <USBD_StdEPReq+0x324>
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d02a      	beq.n	800a0e4 <USBD_StdEPReq+0x80>
 800a08e:	2b20      	cmp	r3, #32
 800a090:	f040 817a 	bne.w	800a388 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff fe85 	bl	8009da8 <USBD_CoreFindEP>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0a2:	7b7b      	ldrb	r3, [r7, #13]
 800a0a4:	2bff      	cmp	r3, #255	@ 0xff
 800a0a6:	f000 8174 	beq.w	800a392 <USBD_StdEPReq+0x32e>
 800a0aa:	7b7b      	ldrb	r3, [r7, #13]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f040 8170 	bne.w	800a392 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a0b2:	7b7a      	ldrb	r2, [r7, #13]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a0ba:	7b7a      	ldrb	r2, [r7, #13]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	32ae      	adds	r2, #174	@ 0xae
 800a0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f000 8163 	beq.w	800a392 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a0cc:	7b7a      	ldrb	r2, [r7, #13]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	32ae      	adds	r2, #174	@ 0xae
 800a0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a0e2:	e156      	b.n	800a392 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	785b      	ldrb	r3, [r3, #1]
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d008      	beq.n	800a0fe <USBD_StdEPReq+0x9a>
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	f300 8145 	bgt.w	800a37c <USBD_StdEPReq+0x318>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 809b 	beq.w	800a22e <USBD_StdEPReq+0x1ca>
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d03c      	beq.n	800a176 <USBD_StdEPReq+0x112>
 800a0fc:	e13e      	b.n	800a37c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b02      	cmp	r3, #2
 800a108:	d002      	beq.n	800a110 <USBD_StdEPReq+0xac>
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d016      	beq.n	800a13c <USBD_StdEPReq+0xd8>
 800a10e:	e02c      	b.n	800a16a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a110:	7bbb      	ldrb	r3, [r7, #14]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00d      	beq.n	800a132 <USBD_StdEPReq+0xce>
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	2b80      	cmp	r3, #128	@ 0x80
 800a11a:	d00a      	beq.n	800a132 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f001 fa1d 	bl	800b560 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a126:	2180      	movs	r1, #128	@ 0x80
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f001 fa19 	bl	800b560 <USBD_LL_StallEP>
 800a12e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a130:	e020      	b.n	800a174 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fca4 	bl	800aa82 <USBD_CtlError>
              break;
 800a13a:	e01b      	b.n	800a174 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	885b      	ldrh	r3, [r3, #2]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10e      	bne.n	800a162 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a144:	7bbb      	ldrb	r3, [r7, #14]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00b      	beq.n	800a162 <USBD_StdEPReq+0xfe>
 800a14a:	7bbb      	ldrb	r3, [r7, #14]
 800a14c:	2b80      	cmp	r3, #128	@ 0x80
 800a14e:	d008      	beq.n	800a162 <USBD_StdEPReq+0xfe>
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	88db      	ldrh	r3, [r3, #6]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d104      	bne.n	800a162 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a158:	7bbb      	ldrb	r3, [r7, #14]
 800a15a:	4619      	mov	r1, r3
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f001 f9ff 	bl	800b560 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fd64 	bl	800ac30 <USBD_CtlSendStatus>

              break;
 800a168:	e004      	b.n	800a174 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fc88 	bl	800aa82 <USBD_CtlError>
              break;
 800a172:	bf00      	nop
          }
          break;
 800a174:	e107      	b.n	800a386 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d002      	beq.n	800a188 <USBD_StdEPReq+0x124>
 800a182:	2b03      	cmp	r3, #3
 800a184:	d016      	beq.n	800a1b4 <USBD_StdEPReq+0x150>
 800a186:	e04b      	b.n	800a220 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a188:	7bbb      	ldrb	r3, [r7, #14]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00d      	beq.n	800a1aa <USBD_StdEPReq+0x146>
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
 800a190:	2b80      	cmp	r3, #128	@ 0x80
 800a192:	d00a      	beq.n	800a1aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a194:	7bbb      	ldrb	r3, [r7, #14]
 800a196:	4619      	mov	r1, r3
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f001 f9e1 	bl	800b560 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a19e:	2180      	movs	r1, #128	@ 0x80
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f001 f9dd 	bl	800b560 <USBD_LL_StallEP>
 800a1a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1a8:	e040      	b.n	800a22c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 fc68 	bl	800aa82 <USBD_CtlError>
              break;
 800a1b2:	e03b      	b.n	800a22c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	885b      	ldrh	r3, [r3, #2]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d136      	bne.n	800a22a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a1bc:	7bbb      	ldrb	r3, [r7, #14]
 800a1be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d004      	beq.n	800a1d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a1c6:	7bbb      	ldrb	r3, [r7, #14]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f001 f9e7 	bl	800b59e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fd2d 	bl	800ac30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7ff fde4 	bl	8009da8 <USBD_CoreFindEP>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1e4:	7b7b      	ldrb	r3, [r7, #13]
 800a1e6:	2bff      	cmp	r3, #255	@ 0xff
 800a1e8:	d01f      	beq.n	800a22a <USBD_StdEPReq+0x1c6>
 800a1ea:	7b7b      	ldrb	r3, [r7, #13]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d11c      	bne.n	800a22a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a1f0:	7b7a      	ldrb	r2, [r7, #13]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a1f8:	7b7a      	ldrb	r2, [r7, #13]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	32ae      	adds	r2, #174	@ 0xae
 800a1fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d010      	beq.n	800a22a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a208:	7b7a      	ldrb	r2, [r7, #13]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	32ae      	adds	r2, #174	@ 0xae
 800a20e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	4798      	blx	r3
 800a21a:	4603      	mov	r3, r0
 800a21c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a21e:	e004      	b.n	800a22a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fc2d 	bl	800aa82 <USBD_CtlError>
              break;
 800a228:	e000      	b.n	800a22c <USBD_StdEPReq+0x1c8>
              break;
 800a22a:	bf00      	nop
          }
          break;
 800a22c:	e0ab      	b.n	800a386 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b02      	cmp	r3, #2
 800a238:	d002      	beq.n	800a240 <USBD_StdEPReq+0x1dc>
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d032      	beq.n	800a2a4 <USBD_StdEPReq+0x240>
 800a23e:	e097      	b.n	800a370 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a240:	7bbb      	ldrb	r3, [r7, #14]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d007      	beq.n	800a256 <USBD_StdEPReq+0x1f2>
 800a246:	7bbb      	ldrb	r3, [r7, #14]
 800a248:	2b80      	cmp	r3, #128	@ 0x80
 800a24a:	d004      	beq.n	800a256 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fc17 	bl	800aa82 <USBD_CtlError>
                break;
 800a254:	e091      	b.n	800a37a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	da0b      	bge.n	800a276 <USBD_StdEPReq+0x212>
 800a25e:	7bbb      	ldrb	r3, [r7, #14]
 800a260:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a264:	4613      	mov	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	3310      	adds	r3, #16
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	4413      	add	r3, r2
 800a272:	3304      	adds	r3, #4
 800a274:	e00b      	b.n	800a28e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a276:	7bbb      	ldrb	r3, [r7, #14]
 800a278:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a27c:	4613      	mov	r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4413      	add	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	4413      	add	r3, r2
 800a28c:	3304      	adds	r3, #4
 800a28e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2202      	movs	r2, #2
 800a29a:	4619      	mov	r1, r3
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 fc6d 	bl	800ab7c <USBD_CtlSendData>
              break;
 800a2a2:	e06a      	b.n	800a37a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a2a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	da11      	bge.n	800a2d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
 800a2ae:	f003 020f 	and.w	r2, r3, #15
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	440b      	add	r3, r1
 800a2be:	3324      	adds	r3, #36	@ 0x24
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d117      	bne.n	800a2f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fbda 	bl	800aa82 <USBD_CtlError>
                  break;
 800a2ce:	e054      	b.n	800a37a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a2d0:	7bbb      	ldrb	r3, [r7, #14]
 800a2d2:	f003 020f 	and.w	r2, r3, #15
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	440b      	add	r3, r1
 800a2e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a2e6:	881b      	ldrh	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d104      	bne.n	800a2f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fbc7 	bl	800aa82 <USBD_CtlError>
                  break;
 800a2f4:	e041      	b.n	800a37a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	da0b      	bge.n	800a316 <USBD_StdEPReq+0x2b2>
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
 800a300:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	3310      	adds	r3, #16
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	4413      	add	r3, r2
 800a312:	3304      	adds	r3, #4
 800a314:	e00b      	b.n	800a32e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a316:	7bbb      	ldrb	r3, [r7, #14]
 800a318:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a31c:	4613      	mov	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	4413      	add	r3, r2
 800a32c:	3304      	adds	r3, #4
 800a32e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a330:	7bbb      	ldrb	r3, [r7, #14]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d002      	beq.n	800a33c <USBD_StdEPReq+0x2d8>
 800a336:	7bbb      	ldrb	r3, [r7, #14]
 800a338:	2b80      	cmp	r3, #128	@ 0x80
 800a33a:	d103      	bne.n	800a344 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2200      	movs	r2, #0
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	e00e      	b.n	800a362 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a344:	7bbb      	ldrb	r3, [r7, #14]
 800a346:	4619      	mov	r1, r3
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f001 f947 	bl	800b5dc <USBD_LL_IsStallEP>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2201      	movs	r2, #1
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	e002      	b.n	800a362 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	2200      	movs	r2, #0
 800a360:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	2202      	movs	r2, #2
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fc07 	bl	800ab7c <USBD_CtlSendData>
              break;
 800a36e:	e004      	b.n	800a37a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fb85 	bl	800aa82 <USBD_CtlError>
              break;
 800a378:	bf00      	nop
          }
          break;
 800a37a:	e004      	b.n	800a386 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fb7f 	bl	800aa82 <USBD_CtlError>
          break;
 800a384:	bf00      	nop
      }
      break;
 800a386:	e005      	b.n	800a394 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fb79 	bl	800aa82 <USBD_CtlError>
      break;
 800a390:	e000      	b.n	800a394 <USBD_StdEPReq+0x330>
      break;
 800a392:	bf00      	nop
  }

  return ret;
 800a394:	7bfb      	ldrb	r3, [r7, #15]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	885b      	ldrh	r3, [r3, #2]
 800a3ba:	0a1b      	lsrs	r3, r3, #8
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	2b0e      	cmp	r3, #14
 800a3c2:	f200 8152 	bhi.w	800a66a <USBD_GetDescriptor+0x2ca>
 800a3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3cc <USBD_GetDescriptor+0x2c>)
 800a3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3cc:	0800a43d 	.word	0x0800a43d
 800a3d0:	0800a455 	.word	0x0800a455
 800a3d4:	0800a495 	.word	0x0800a495
 800a3d8:	0800a66b 	.word	0x0800a66b
 800a3dc:	0800a66b 	.word	0x0800a66b
 800a3e0:	0800a60b 	.word	0x0800a60b
 800a3e4:	0800a637 	.word	0x0800a637
 800a3e8:	0800a66b 	.word	0x0800a66b
 800a3ec:	0800a66b 	.word	0x0800a66b
 800a3f0:	0800a66b 	.word	0x0800a66b
 800a3f4:	0800a66b 	.word	0x0800a66b
 800a3f8:	0800a66b 	.word	0x0800a66b
 800a3fc:	0800a66b 	.word	0x0800a66b
 800a400:	0800a66b 	.word	0x0800a66b
 800a404:	0800a409 	.word	0x0800a409
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a40e:	69db      	ldr	r3, [r3, #28]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00b      	beq.n	800a42c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a41a:	69db      	ldr	r3, [r3, #28]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	7c12      	ldrb	r2, [r2, #16]
 800a420:	f107 0108 	add.w	r1, r7, #8
 800a424:	4610      	mov	r0, r2
 800a426:	4798      	blx	r3
 800a428:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a42a:	e126      	b.n	800a67a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fb27 	bl	800aa82 <USBD_CtlError>
        err++;
 800a434:	7afb      	ldrb	r3, [r7, #11]
 800a436:	3301      	adds	r3, #1
 800a438:	72fb      	strb	r3, [r7, #11]
      break;
 800a43a:	e11e      	b.n	800a67a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	7c12      	ldrb	r2, [r2, #16]
 800a448:	f107 0108 	add.w	r1, r7, #8
 800a44c:	4610      	mov	r0, r2
 800a44e:	4798      	blx	r3
 800a450:	60f8      	str	r0, [r7, #12]
      break;
 800a452:	e112      	b.n	800a67a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	7c1b      	ldrb	r3, [r3, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10d      	bne.n	800a478 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a464:	f107 0208 	add.w	r2, r7, #8
 800a468:	4610      	mov	r0, r2
 800a46a:	4798      	blx	r3
 800a46c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3301      	adds	r3, #1
 800a472:	2202      	movs	r2, #2
 800a474:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a476:	e100      	b.n	800a67a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a480:	f107 0208 	add.w	r2, r7, #8
 800a484:	4610      	mov	r0, r2
 800a486:	4798      	blx	r3
 800a488:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3301      	adds	r3, #1
 800a48e:	2202      	movs	r2, #2
 800a490:	701a      	strb	r2, [r3, #0]
      break;
 800a492:	e0f2      	b.n	800a67a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	885b      	ldrh	r3, [r3, #2]
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b05      	cmp	r3, #5
 800a49c:	f200 80ac 	bhi.w	800a5f8 <USBD_GetDescriptor+0x258>
 800a4a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a8 <USBD_GetDescriptor+0x108>)
 800a4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a6:	bf00      	nop
 800a4a8:	0800a4c1 	.word	0x0800a4c1
 800a4ac:	0800a4f5 	.word	0x0800a4f5
 800a4b0:	0800a529 	.word	0x0800a529
 800a4b4:	0800a55d 	.word	0x0800a55d
 800a4b8:	0800a591 	.word	0x0800a591
 800a4bc:	0800a5c5 	.word	0x0800a5c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00b      	beq.n	800a4e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	7c12      	ldrb	r2, [r2, #16]
 800a4d8:	f107 0108 	add.w	r1, r7, #8
 800a4dc:	4610      	mov	r0, r2
 800a4de:	4798      	blx	r3
 800a4e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4e2:	e091      	b.n	800a608 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 facb 	bl	800aa82 <USBD_CtlError>
            err++;
 800a4ec:	7afb      	ldrb	r3, [r7, #11]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a4f2:	e089      	b.n	800a608 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00b      	beq.n	800a518 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	7c12      	ldrb	r2, [r2, #16]
 800a50c:	f107 0108 	add.w	r1, r7, #8
 800a510:	4610      	mov	r0, r2
 800a512:	4798      	blx	r3
 800a514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a516:	e077      	b.n	800a608 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fab1 	bl	800aa82 <USBD_CtlError>
            err++;
 800a520:	7afb      	ldrb	r3, [r7, #11]
 800a522:	3301      	adds	r3, #1
 800a524:	72fb      	strb	r3, [r7, #11]
          break;
 800a526:	e06f      	b.n	800a608 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00b      	beq.n	800a54c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	7c12      	ldrb	r2, [r2, #16]
 800a540:	f107 0108 	add.w	r1, r7, #8
 800a544:	4610      	mov	r0, r2
 800a546:	4798      	blx	r3
 800a548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a54a:	e05d      	b.n	800a608 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fa97 	bl	800aa82 <USBD_CtlError>
            err++;
 800a554:	7afb      	ldrb	r3, [r7, #11]
 800a556:	3301      	adds	r3, #1
 800a558:	72fb      	strb	r3, [r7, #11]
          break;
 800a55a:	e055      	b.n	800a608 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00b      	beq.n	800a580 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	7c12      	ldrb	r2, [r2, #16]
 800a574:	f107 0108 	add.w	r1, r7, #8
 800a578:	4610      	mov	r0, r2
 800a57a:	4798      	blx	r3
 800a57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a57e:	e043      	b.n	800a608 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a580:	6839      	ldr	r1, [r7, #0]
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fa7d 	bl	800aa82 <USBD_CtlError>
            err++;
 800a588:	7afb      	ldrb	r3, [r7, #11]
 800a58a:	3301      	adds	r3, #1
 800a58c:	72fb      	strb	r3, [r7, #11]
          break;
 800a58e:	e03b      	b.n	800a608 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00b      	beq.n	800a5b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	7c12      	ldrb	r2, [r2, #16]
 800a5a8:	f107 0108 	add.w	r1, r7, #8
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	4798      	blx	r3
 800a5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5b2:	e029      	b.n	800a608 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fa63 	bl	800aa82 <USBD_CtlError>
            err++;
 800a5bc:	7afb      	ldrb	r3, [r7, #11]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5c2:	e021      	b.n	800a608 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00b      	beq.n	800a5e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	7c12      	ldrb	r2, [r2, #16]
 800a5dc:	f107 0108 	add.w	r1, r7, #8
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	4798      	blx	r3
 800a5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5e6:	e00f      	b.n	800a608 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fa49 	bl	800aa82 <USBD_CtlError>
            err++;
 800a5f0:	7afb      	ldrb	r3, [r7, #11]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5f6:	e007      	b.n	800a608 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fa41 	bl	800aa82 <USBD_CtlError>
          err++;
 800a600:	7afb      	ldrb	r3, [r7, #11]
 800a602:	3301      	adds	r3, #1
 800a604:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a606:	bf00      	nop
      }
      break;
 800a608:	e037      	b.n	800a67a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	7c1b      	ldrb	r3, [r3, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d109      	bne.n	800a626 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a61a:	f107 0208 	add.w	r2, r7, #8
 800a61e:	4610      	mov	r0, r2
 800a620:	4798      	blx	r3
 800a622:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a624:	e029      	b.n	800a67a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a626:	6839      	ldr	r1, [r7, #0]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fa2a 	bl	800aa82 <USBD_CtlError>
        err++;
 800a62e:	7afb      	ldrb	r3, [r7, #11]
 800a630:	3301      	adds	r3, #1
 800a632:	72fb      	strb	r3, [r7, #11]
      break;
 800a634:	e021      	b.n	800a67a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	7c1b      	ldrb	r3, [r3, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10d      	bne.n	800a65a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a646:	f107 0208 	add.w	r2, r7, #8
 800a64a:	4610      	mov	r0, r2
 800a64c:	4798      	blx	r3
 800a64e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	3301      	adds	r3, #1
 800a654:	2207      	movs	r2, #7
 800a656:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a658:	e00f      	b.n	800a67a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fa10 	bl	800aa82 <USBD_CtlError>
        err++;
 800a662:	7afb      	ldrb	r3, [r7, #11]
 800a664:	3301      	adds	r3, #1
 800a666:	72fb      	strb	r3, [r7, #11]
      break;
 800a668:	e007      	b.n	800a67a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fa08 	bl	800aa82 <USBD_CtlError>
      err++;
 800a672:	7afb      	ldrb	r3, [r7, #11]
 800a674:	3301      	adds	r3, #1
 800a676:	72fb      	strb	r3, [r7, #11]
      break;
 800a678:	bf00      	nop
  }

  if (err != 0U)
 800a67a:	7afb      	ldrb	r3, [r7, #11]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d11e      	bne.n	800a6be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	88db      	ldrh	r3, [r3, #6]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d016      	beq.n	800a6b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a688:	893b      	ldrh	r3, [r7, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00e      	beq.n	800a6ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	88da      	ldrh	r2, [r3, #6]
 800a692:	893b      	ldrh	r3, [r7, #8]
 800a694:	4293      	cmp	r3, r2
 800a696:	bf28      	it	cs
 800a698:	4613      	movcs	r3, r2
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a69e:	893b      	ldrh	r3, [r7, #8]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	68f9      	ldr	r1, [r7, #12]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fa69 	bl	800ab7c <USBD_CtlSendData>
 800a6aa:	e009      	b.n	800a6c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f9e7 	bl	800aa82 <USBD_CtlError>
 800a6b4:	e004      	b.n	800a6c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 faba 	bl	800ac30 <USBD_CtlSendStatus>
 800a6bc:	e000      	b.n	800a6c0 <USBD_GetDescriptor+0x320>
    return;
 800a6be:	bf00      	nop
  }
}
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop

0800a6c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	889b      	ldrh	r3, [r3, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d131      	bne.n	800a73e <USBD_SetAddress+0x76>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	88db      	ldrh	r3, [r3, #6]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d12d      	bne.n	800a73e <USBD_SetAddress+0x76>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	885b      	ldrh	r3, [r3, #2]
 800a6e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6e8:	d829      	bhi.n	800a73e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	885b      	ldrh	r3, [r3, #2]
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	d104      	bne.n	800a70c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f9bc 	bl	800aa82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a70a:	e01d      	b.n	800a748 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	7bfa      	ldrb	r2, [r7, #15]
 800a710:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 ff8b 	bl	800b634 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fa86 	bl	800ac30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a724:	7bfb      	ldrb	r3, [r7, #15]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d004      	beq.n	800a734 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2202      	movs	r2, #2
 800a72e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a732:	e009      	b.n	800a748 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73c:	e004      	b.n	800a748 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f99e 	bl	800aa82 <USBD_CtlError>
  }
}
 800a746:	bf00      	nop
 800a748:	bf00      	nop
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	885b      	ldrh	r3, [r3, #2]
 800a762:	b2da      	uxtb	r2, r3
 800a764:	4b4e      	ldr	r3, [pc, #312]	@ (800a8a0 <USBD_SetConfig+0x150>)
 800a766:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a768:	4b4d      	ldr	r3, [pc, #308]	@ (800a8a0 <USBD_SetConfig+0x150>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d905      	bls.n	800a77c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f985 	bl	800aa82 <USBD_CtlError>
    return USBD_FAIL;
 800a778:	2303      	movs	r3, #3
 800a77a:	e08c      	b.n	800a896 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b02      	cmp	r3, #2
 800a786:	d002      	beq.n	800a78e <USBD_SetConfig+0x3e>
 800a788:	2b03      	cmp	r3, #3
 800a78a:	d029      	beq.n	800a7e0 <USBD_SetConfig+0x90>
 800a78c:	e075      	b.n	800a87a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a78e:	4b44      	ldr	r3, [pc, #272]	@ (800a8a0 <USBD_SetConfig+0x150>)
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d020      	beq.n	800a7d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a796:	4b42      	ldr	r3, [pc, #264]	@ (800a8a0 <USBD_SetConfig+0x150>)
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7a0:	4b3f      	ldr	r3, [pc, #252]	@ (800a8a0 <USBD_SetConfig+0x150>)
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7fe ffb9 	bl	800971e <USBD_SetClassConfig>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d008      	beq.n	800a7c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f962 	bl	800aa82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7c6:	e065      	b.n	800a894 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fa31 	bl	800ac30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2203      	movs	r2, #3
 800a7d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a7d6:	e05d      	b.n	800a894 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fa29 	bl	800ac30 <USBD_CtlSendStatus>
      break;
 800a7de:	e059      	b.n	800a894 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a7e0:	4b2f      	ldr	r3, [pc, #188]	@ (800a8a0 <USBD_SetConfig+0x150>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d112      	bne.n	800a80e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a7f0:	4b2b      	ldr	r3, [pc, #172]	@ (800a8a0 <USBD_SetConfig+0x150>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7fa:	4b29      	ldr	r3, [pc, #164]	@ (800a8a0 <USBD_SetConfig+0x150>)
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7fe ffa8 	bl	8009756 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fa12 	bl	800ac30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a80c:	e042      	b.n	800a894 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a80e:	4b24      	ldr	r3, [pc, #144]	@ (800a8a0 <USBD_SetConfig+0x150>)
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d02a      	beq.n	800a872 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	b2db      	uxtb	r3, r3
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7fe ff96 	bl	8009756 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a82a:	4b1d      	ldr	r3, [pc, #116]	@ (800a8a0 <USBD_SetConfig+0x150>)
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a834:	4b1a      	ldr	r3, [pc, #104]	@ (800a8a0 <USBD_SetConfig+0x150>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	4619      	mov	r1, r3
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f7fe ff6f 	bl	800971e <USBD_SetClassConfig>
 800a840:	4603      	mov	r3, r0
 800a842:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a844:	7bfb      	ldrb	r3, [r7, #15]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00f      	beq.n	800a86a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f918 	bl	800aa82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	b2db      	uxtb	r3, r3
 800a858:	4619      	mov	r1, r3
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7fe ff7b 	bl	8009756 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2202      	movs	r2, #2
 800a864:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a868:	e014      	b.n	800a894 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f9e0 	bl	800ac30 <USBD_CtlSendStatus>
      break;
 800a870:	e010      	b.n	800a894 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f9dc 	bl	800ac30 <USBD_CtlSendStatus>
      break;
 800a878:	e00c      	b.n	800a894 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a87a:	6839      	ldr	r1, [r7, #0]
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 f900 	bl	800aa82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a882:	4b07      	ldr	r3, [pc, #28]	@ (800a8a0 <USBD_SetConfig+0x150>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7fe ff64 	bl	8009756 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a88e:	2303      	movs	r3, #3
 800a890:	73fb      	strb	r3, [r7, #15]
      break;
 800a892:	bf00      	nop
  }

  return ret;
 800a894:	7bfb      	ldrb	r3, [r7, #15]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	200084bc 	.word	0x200084bc

0800a8a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	88db      	ldrh	r3, [r3, #6]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d004      	beq.n	800a8c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f8e2 	bl	800aa82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a8be:	e023      	b.n	800a908 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	dc02      	bgt.n	800a8d2 <USBD_GetConfig+0x2e>
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	dc03      	bgt.n	800a8d8 <USBD_GetConfig+0x34>
 800a8d0:	e015      	b.n	800a8fe <USBD_GetConfig+0x5a>
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d00b      	beq.n	800a8ee <USBD_GetConfig+0x4a>
 800a8d6:	e012      	b.n	800a8fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f948 	bl	800ab7c <USBD_CtlSendData>
        break;
 800a8ec:	e00c      	b.n	800a908 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f940 	bl	800ab7c <USBD_CtlSendData>
        break;
 800a8fc:	e004      	b.n	800a908 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f8be 	bl	800aa82 <USBD_CtlError>
        break;
 800a906:	bf00      	nop
}
 800a908:	bf00      	nop
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a920:	b2db      	uxtb	r3, r3
 800a922:	3b01      	subs	r3, #1
 800a924:	2b02      	cmp	r3, #2
 800a926:	d81e      	bhi.n	800a966 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	88db      	ldrh	r3, [r3, #6]
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d004      	beq.n	800a93a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f8a5 	bl	800aa82 <USBD_CtlError>
        break;
 800a938:	e01a      	b.n	800a970 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a946:	2b00      	cmp	r3, #0
 800a948:	d005      	beq.n	800a956 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	f043 0202 	orr.w	r2, r3, #2
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	330c      	adds	r3, #12
 800a95a:	2202      	movs	r2, #2
 800a95c:	4619      	mov	r1, r3
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f90c 	bl	800ab7c <USBD_CtlSendData>
      break;
 800a964:	e004      	b.n	800a970 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f88a 	bl	800aa82 <USBD_CtlError>
      break;
 800a96e:	bf00      	nop
  }
}
 800a970:	bf00      	nop
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	885b      	ldrh	r3, [r3, #2]
 800a986:	2b01      	cmp	r3, #1
 800a988:	d107      	bne.n	800a99a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f94c 	bl	800ac30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a998:	e013      	b.n	800a9c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	885b      	ldrh	r3, [r3, #2]
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d10b      	bne.n	800a9ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	889b      	ldrh	r3, [r3, #4]
 800a9a6:	0a1b      	lsrs	r3, r3, #8
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f93c 	bl	800ac30 <USBD_CtlSendStatus>
}
 800a9b8:	e003      	b.n	800a9c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f860 	bl	800aa82 <USBD_CtlError>
}
 800a9c2:	bf00      	nop
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b082      	sub	sp, #8
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d80b      	bhi.n	800a9fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	885b      	ldrh	r3, [r3, #2]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d10c      	bne.n	800aa04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 f91c 	bl	800ac30 <USBD_CtlSendStatus>
      }
      break;
 800a9f8:	e004      	b.n	800aa04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f840 	bl	800aa82 <USBD_CtlError>
      break;
 800aa02:	e000      	b.n	800aa06 <USBD_ClrFeature+0x3c>
      break;
 800aa04:	bf00      	nop
  }
}
 800aa06:	bf00      	nop
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b084      	sub	sp, #16
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	781a      	ldrb	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	3301      	adds	r3, #1
 800aa28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	781a      	ldrb	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3301      	adds	r3, #1
 800aa36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f7ff fa16 	bl	8009e6a <SWAPBYTE>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	461a      	mov	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7ff fa09 	bl	8009e6a <SWAPBYTE>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	3301      	adds	r3, #1
 800aa64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f7ff f9fc 	bl	8009e6a <SWAPBYTE>
 800aa72:	4603      	mov	r3, r0
 800aa74:	461a      	mov	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	80da      	strh	r2, [r3, #6]
}
 800aa7a:	bf00      	nop
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa8c:	2180      	movs	r1, #128	@ 0x80
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fd66 	bl	800b560 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aa94:	2100      	movs	r1, #0
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fd62 	bl	800b560 <USBD_LL_StallEP>
}
 800aa9c:	bf00      	nop
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aab0:	2300      	movs	r3, #0
 800aab2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d042      	beq.n	800ab40 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800aabe:	6938      	ldr	r0, [r7, #16]
 800aac0:	f000 f842 	bl	800ab48 <USBD_GetLen>
 800aac4:	4603      	mov	r3, r0
 800aac6:	3301      	adds	r3, #1
 800aac8:	005b      	lsls	r3, r3, #1
 800aaca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aace:	d808      	bhi.n	800aae2 <USBD_GetString+0x3e>
 800aad0:	6938      	ldr	r0, [r7, #16]
 800aad2:	f000 f839 	bl	800ab48 <USBD_GetLen>
 800aad6:	4603      	mov	r3, r0
 800aad8:	3301      	adds	r3, #1
 800aada:	b29b      	uxth	r3, r3
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	b29a      	uxth	r2, r3
 800aae0:	e001      	b.n	800aae6 <USBD_GetString+0x42>
 800aae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	4413      	add	r3, r2
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	7812      	ldrb	r2, [r2, #0]
 800aaf4:	701a      	strb	r2, [r3, #0]
  idx++;
 800aaf6:	7dfb      	ldrb	r3, [r7, #23]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	4413      	add	r3, r2
 800ab02:	2203      	movs	r2, #3
 800ab04:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ab0c:	e013      	b.n	800ab36 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	4413      	add	r3, r2
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	7812      	ldrb	r2, [r2, #0]
 800ab18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	613b      	str	r3, [r7, #16]
    idx++;
 800ab20:	7dfb      	ldrb	r3, [r7, #23]
 800ab22:	3301      	adds	r3, #1
 800ab24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab26:	7dfb      	ldrb	r3, [r7, #23]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
 800ab32:	3301      	adds	r3, #1
 800ab34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1e7      	bne.n	800ab0e <USBD_GetString+0x6a>
 800ab3e:	e000      	b.n	800ab42 <USBD_GetString+0x9e>
    return;
 800ab40:	bf00      	nop
  }
}
 800ab42:	3718      	adds	r7, #24
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab50:	2300      	movs	r3, #0
 800ab52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab58:	e005      	b.n	800ab66 <USBD_GetLen+0x1e>
  {
    len++;
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	3301      	adds	r3, #1
 800ab64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1f5      	bne.n	800ab5a <USBD_GetLen+0x12>
  }

  return len;
 800ab6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3714      	adds	r7, #20
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	2100      	movs	r1, #0
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f000 fd65 	bl	800b672 <USBD_LL_Transmit>

  return USBD_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	60f8      	str	r0, [r7, #12]
 800abba:	60b9      	str	r1, [r7, #8]
 800abbc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	2100      	movs	r1, #0
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f000 fd54 	bl	800b672 <USBD_LL_Transmit>

  return USBD_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2203      	movs	r2, #3
 800abe4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	2100      	movs	r1, #0
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f000 fd58 	bl	800b6b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b084      	sub	sp, #16
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	60f8      	str	r0, [r7, #12]
 800ac16:	60b9      	str	r1, [r7, #8]
 800ac18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	2100      	movs	r1, #0
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 fd47 	bl	800b6b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2204      	movs	r2, #4
 800ac3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac40:	2300      	movs	r3, #0
 800ac42:	2200      	movs	r2, #0
 800ac44:	2100      	movs	r1, #0
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fd13 	bl	800b672 <USBD_LL_Transmit>

  return USBD_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b082      	sub	sp, #8
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2205      	movs	r2, #5
 800ac62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac66:	2300      	movs	r3, #0
 800ac68:	2200      	movs	r2, #0
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fd21 	bl	800b6b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ac80:	2200      	movs	r2, #0
 800ac82:	4912      	ldr	r1, [pc, #72]	@ (800accc <MX_USB_DEVICE_Init+0x50>)
 800ac84:	4812      	ldr	r0, [pc, #72]	@ (800acd0 <MX_USB_DEVICE_Init+0x54>)
 800ac86:	f7fe fccd 	bl	8009624 <USBD_Init>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac90:	f7f6 fa46 	bl	8001120 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ac94:	490f      	ldr	r1, [pc, #60]	@ (800acd4 <MX_USB_DEVICE_Init+0x58>)
 800ac96:	480e      	ldr	r0, [pc, #56]	@ (800acd0 <MX_USB_DEVICE_Init+0x54>)
 800ac98:	f7fe fcf4 	bl	8009684 <USBD_RegisterClass>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aca2:	f7f6 fa3d 	bl	8001120 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aca6:	490c      	ldr	r1, [pc, #48]	@ (800acd8 <MX_USB_DEVICE_Init+0x5c>)
 800aca8:	4809      	ldr	r0, [pc, #36]	@ (800acd0 <MX_USB_DEVICE_Init+0x54>)
 800acaa:	f7fe fbeb 	bl	8009484 <USBD_CDC_RegisterInterface>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800acb4:	f7f6 fa34 	bl	8001120 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800acb8:	4805      	ldr	r0, [pc, #20]	@ (800acd0 <MX_USB_DEVICE_Init+0x54>)
 800acba:	f7fe fd19 	bl	80096f0 <USBD_Start>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800acc4:	f7f6 fa2c 	bl	8001120 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800acc8:	bf00      	nop
 800acca:	bd80      	pop	{r7, pc}
 800accc:	200000b8 	.word	0x200000b8
 800acd0:	200084c0 	.word	0x200084c0
 800acd4:	20000024 	.word	0x20000024
 800acd8:	200000a4 	.word	0x200000a4

0800acdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ace0:	2200      	movs	r2, #0
 800ace2:	4905      	ldr	r1, [pc, #20]	@ (800acf8 <CDC_Init_FS+0x1c>)
 800ace4:	4805      	ldr	r0, [pc, #20]	@ (800acfc <CDC_Init_FS+0x20>)
 800ace6:	f7fe fbe7 	bl	80094b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800acea:	4905      	ldr	r1, [pc, #20]	@ (800ad00 <CDC_Init_FS+0x24>)
 800acec:	4803      	ldr	r0, [pc, #12]	@ (800acfc <CDC_Init_FS+0x20>)
 800acee:	f7fe fc05 	bl	80094fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800acf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	20008f9c 	.word	0x20008f9c
 800acfc:	200084c0 	.word	0x200084c0
 800ad00:	2000879c 	.word	0x2000879c

0800ad04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad04:	b480      	push	{r7}
 800ad06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	6039      	str	r1, [r7, #0]
 800ad1e:	71fb      	strb	r3, [r7, #7]
 800ad20:	4613      	mov	r3, r2
 800ad22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ad24:	79fb      	ldrb	r3, [r7, #7]
 800ad26:	2b23      	cmp	r3, #35	@ 0x23
 800ad28:	f200 808c 	bhi.w	800ae44 <CDC_Control_FS+0x130>
 800ad2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad34 <CDC_Control_FS+0x20>)
 800ad2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad32:	bf00      	nop
 800ad34:	0800ae45 	.word	0x0800ae45
 800ad38:	0800ae45 	.word	0x0800ae45
 800ad3c:	0800ae45 	.word	0x0800ae45
 800ad40:	0800ae45 	.word	0x0800ae45
 800ad44:	0800ae45 	.word	0x0800ae45
 800ad48:	0800ae45 	.word	0x0800ae45
 800ad4c:	0800ae45 	.word	0x0800ae45
 800ad50:	0800ae45 	.word	0x0800ae45
 800ad54:	0800ae45 	.word	0x0800ae45
 800ad58:	0800ae45 	.word	0x0800ae45
 800ad5c:	0800ae45 	.word	0x0800ae45
 800ad60:	0800ae45 	.word	0x0800ae45
 800ad64:	0800ae45 	.word	0x0800ae45
 800ad68:	0800ae45 	.word	0x0800ae45
 800ad6c:	0800ae45 	.word	0x0800ae45
 800ad70:	0800ae45 	.word	0x0800ae45
 800ad74:	0800ae45 	.word	0x0800ae45
 800ad78:	0800ae45 	.word	0x0800ae45
 800ad7c:	0800ae45 	.word	0x0800ae45
 800ad80:	0800ae45 	.word	0x0800ae45
 800ad84:	0800ae45 	.word	0x0800ae45
 800ad88:	0800ae45 	.word	0x0800ae45
 800ad8c:	0800ae45 	.word	0x0800ae45
 800ad90:	0800ae45 	.word	0x0800ae45
 800ad94:	0800ae45 	.word	0x0800ae45
 800ad98:	0800ae45 	.word	0x0800ae45
 800ad9c:	0800ae45 	.word	0x0800ae45
 800ada0:	0800ae45 	.word	0x0800ae45
 800ada4:	0800ae45 	.word	0x0800ae45
 800ada8:	0800ae45 	.word	0x0800ae45
 800adac:	0800ae45 	.word	0x0800ae45
 800adb0:	0800ae45 	.word	0x0800ae45
 800adb4:	0800adc5 	.word	0x0800adc5
 800adb8:	0800adff 	.word	0x0800adff
 800adbc:	0800ae45 	.word	0x0800ae45
 800adc0:	0800ae45 	.word	0x0800ae45
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	// set com port parameters
    	buf[0] = pbuf[0];
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	781a      	ldrb	r2, [r3, #0]
 800adc8:	4b22      	ldr	r3, [pc, #136]	@ (800ae54 <CDC_Control_FS+0x140>)
 800adca:	701a      	strb	r2, [r3, #0]
    	buf[1] = pbuf[1];
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	785a      	ldrb	r2, [r3, #1]
 800add0:	4b20      	ldr	r3, [pc, #128]	@ (800ae54 <CDC_Control_FS+0x140>)
 800add2:	705a      	strb	r2, [r3, #1]
    	buf[2] = pbuf[2];
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	789a      	ldrb	r2, [r3, #2]
 800add8:	4b1e      	ldr	r3, [pc, #120]	@ (800ae54 <CDC_Control_FS+0x140>)
 800adda:	709a      	strb	r2, [r3, #2]
    	buf[3] = pbuf[3];
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	78da      	ldrb	r2, [r3, #3]
 800ade0:	4b1c      	ldr	r3, [pc, #112]	@ (800ae54 <CDC_Control_FS+0x140>)
 800ade2:	70da      	strb	r2, [r3, #3]
    	buf[4] = pbuf[4];
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	791a      	ldrb	r2, [r3, #4]
 800ade8:	4b1a      	ldr	r3, [pc, #104]	@ (800ae54 <CDC_Control_FS+0x140>)
 800adea:	711a      	strb	r2, [r3, #4]
    	buf[5] = pbuf[5];
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	795a      	ldrb	r2, [r3, #5]
 800adf0:	4b18      	ldr	r3, [pc, #96]	@ (800ae54 <CDC_Control_FS+0x140>)
 800adf2:	715a      	strb	r2, [r3, #5]
    	buf[6] = pbuf[6];
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	799a      	ldrb	r2, [r3, #6]
 800adf8:	4b16      	ldr	r3, [pc, #88]	@ (800ae54 <CDC_Control_FS+0x140>)
 800adfa:	719a      	strb	r2, [r3, #6]
    break;
 800adfc:	e023      	b.n	800ae46 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buf[0];
 800adfe:	4b15      	ldr	r3, [pc, #84]	@ (800ae54 <CDC_Control_FS+0x140>)
 800ae00:	781a      	ldrb	r2, [r3, #0]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buf[1];
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	4a12      	ldr	r2, [pc, #72]	@ (800ae54 <CDC_Control_FS+0x140>)
 800ae0c:	7852      	ldrb	r2, [r2, #1]
 800ae0e:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buf[2];
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	3302      	adds	r3, #2
 800ae14:	4a0f      	ldr	r2, [pc, #60]	@ (800ae54 <CDC_Control_FS+0x140>)
 800ae16:	7892      	ldrb	r2, [r2, #2]
 800ae18:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buf[3];
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	3303      	adds	r3, #3
 800ae1e:	4a0d      	ldr	r2, [pc, #52]	@ (800ae54 <CDC_Control_FS+0x140>)
 800ae20:	78d2      	ldrb	r2, [r2, #3]
 800ae22:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buf[4];
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	3304      	adds	r3, #4
 800ae28:	4a0a      	ldr	r2, [pc, #40]	@ (800ae54 <CDC_Control_FS+0x140>)
 800ae2a:	7912      	ldrb	r2, [r2, #4]
 800ae2c:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buf[5];
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	3305      	adds	r3, #5
 800ae32:	4a08      	ldr	r2, [pc, #32]	@ (800ae54 <CDC_Control_FS+0x140>)
 800ae34:	7952      	ldrb	r2, [r2, #5]
 800ae36:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buf[6];
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	3306      	adds	r3, #6
 800ae3c:	4a05      	ldr	r2, [pc, #20]	@ (800ae54 <CDC_Control_FS+0x140>)
 800ae3e:	7992      	ldrb	r2, [r2, #6]
 800ae40:	701a      	strb	r2, [r3, #0]
    break;
 800ae42:	e000      	b.n	800ae46 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae44:	bf00      	nop
  }

  return (USBD_OK);
 800ae46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	2000979c 	.word	0x2000979c

0800ae58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae62:	6879      	ldr	r1, [r7, #4]
 800ae64:	4807      	ldr	r0, [pc, #28]	@ (800ae84 <CDC_Receive_FS+0x2c>)
 800ae66:	f7fe fb49 	bl	80094fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae6a:	4806      	ldr	r0, [pc, #24]	@ (800ae84 <CDC_Receive_FS+0x2c>)
 800ae6c:	f7fe fba4 	bl	80095b8 <USBD_CDC_ReceivePacket>
  USB_RxCpltCallback(Buf, Len);
 800ae70:	6839      	ldr	r1, [r7, #0]
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7f6 f86c 	bl	8000f50 <USB_RxCpltCallback>
  return (USBD_OK);
 800ae78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	200084c0 	.word	0x200084c0

0800ae88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ae98:	4b0d      	ldr	r3, [pc, #52]	@ (800aed0 <CDC_Transmit_FS+0x48>)
 800ae9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d001      	beq.n	800aeae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e00b      	b.n	800aec6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aeae:	887b      	ldrh	r3, [r7, #2]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	6879      	ldr	r1, [r7, #4]
 800aeb4:	4806      	ldr	r0, [pc, #24]	@ (800aed0 <CDC_Transmit_FS+0x48>)
 800aeb6:	f7fe faff 	bl	80094b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aeba:	4805      	ldr	r0, [pc, #20]	@ (800aed0 <CDC_Transmit_FS+0x48>)
 800aebc:	f7fe fb3c 	bl	8009538 <USBD_CDC_TransmitPacket>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	200084c0 	.word	0x200084c0

0800aed4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	4613      	mov	r3, r2
 800aee0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aee2:	2300      	movs	r3, #0
 800aee4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(epnum);
  USB_TxCpltCallback(Buf, Len);
 800aee6:	68b9      	ldr	r1, [r7, #8]
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f7f6 f8b9 	bl	8001060 <USB_TxCpltCallback>

  /* USER CODE END 13 */
  return result;
 800aeee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
	...

0800aefc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	4603      	mov	r3, r0
 800af04:	6039      	str	r1, [r7, #0]
 800af06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2212      	movs	r2, #18
 800af0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800af0e:	4b03      	ldr	r3, [pc, #12]	@ (800af1c <USBD_FS_DeviceDescriptor+0x20>)
}
 800af10:	4618      	mov	r0, r3
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr
 800af1c:	200000d8 	.word	0x200000d8

0800af20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	4603      	mov	r3, r0
 800af28:	6039      	str	r1, [r7, #0]
 800af2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	2204      	movs	r2, #4
 800af30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af32:	4b03      	ldr	r3, [pc, #12]	@ (800af40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800af34:	4618      	mov	r0, r3
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr
 800af40:	200000f8 	.word	0x200000f8

0800af44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	6039      	str	r1, [r7, #0]
 800af4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af50:	79fb      	ldrb	r3, [r7, #7]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d105      	bne.n	800af62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	4907      	ldr	r1, [pc, #28]	@ (800af78 <USBD_FS_ProductStrDescriptor+0x34>)
 800af5a:	4808      	ldr	r0, [pc, #32]	@ (800af7c <USBD_FS_ProductStrDescriptor+0x38>)
 800af5c:	f7ff fda2 	bl	800aaa4 <USBD_GetString>
 800af60:	e004      	b.n	800af6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	4904      	ldr	r1, [pc, #16]	@ (800af78 <USBD_FS_ProductStrDescriptor+0x34>)
 800af66:	4805      	ldr	r0, [pc, #20]	@ (800af7c <USBD_FS_ProductStrDescriptor+0x38>)
 800af68:	f7ff fd9c 	bl	800aaa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af6c:	4b02      	ldr	r3, [pc, #8]	@ (800af78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3708      	adds	r7, #8
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	200097a4 	.word	0x200097a4
 800af7c:	0800bad8 	.word	0x0800bad8

0800af80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	4603      	mov	r3, r0
 800af88:	6039      	str	r1, [r7, #0]
 800af8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	4904      	ldr	r1, [pc, #16]	@ (800afa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af90:	4804      	ldr	r0, [pc, #16]	@ (800afa4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af92:	f7ff fd87 	bl	800aaa4 <USBD_GetString>
  return USBD_StrDesc;
 800af96:	4b02      	ldr	r3, [pc, #8]	@ (800afa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	200097a4 	.word	0x200097a4
 800afa4:	0800baf0 	.word	0x0800baf0

0800afa8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	4603      	mov	r3, r0
 800afb0:	6039      	str	r1, [r7, #0]
 800afb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	221a      	movs	r2, #26
 800afb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800afba:	f000 f855 	bl	800b068 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800afbe:	4b02      	ldr	r3, [pc, #8]	@ (800afc8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	200000fc 	.word	0x200000fc

0800afcc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	4603      	mov	r3, r0
 800afd4:	6039      	str	r1, [r7, #0]
 800afd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800afd8:	79fb      	ldrb	r3, [r7, #7]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d105      	bne.n	800afea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	4907      	ldr	r1, [pc, #28]	@ (800b000 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afe2:	4808      	ldr	r0, [pc, #32]	@ (800b004 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afe4:	f7ff fd5e 	bl	800aaa4 <USBD_GetString>
 800afe8:	e004      	b.n	800aff4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	4904      	ldr	r1, [pc, #16]	@ (800b000 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afee:	4805      	ldr	r0, [pc, #20]	@ (800b004 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aff0:	f7ff fd58 	bl	800aaa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aff4:	4b02      	ldr	r3, [pc, #8]	@ (800b000 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	200097a4 	.word	0x200097a4
 800b004:	0800bb04 	.word	0x0800bb04

0800b008 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4603      	mov	r3, r0
 800b010:	6039      	str	r1, [r7, #0]
 800b012:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b014:	79fb      	ldrb	r3, [r7, #7]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d105      	bne.n	800b026 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b01a:	683a      	ldr	r2, [r7, #0]
 800b01c:	4907      	ldr	r1, [pc, #28]	@ (800b03c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b01e:	4808      	ldr	r0, [pc, #32]	@ (800b040 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b020:	f7ff fd40 	bl	800aaa4 <USBD_GetString>
 800b024:	e004      	b.n	800b030 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	4904      	ldr	r1, [pc, #16]	@ (800b03c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b02a:	4805      	ldr	r0, [pc, #20]	@ (800b040 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b02c:	f7ff fd3a 	bl	800aaa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b030:	4b02      	ldr	r3, [pc, #8]	@ (800b03c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b032:	4618      	mov	r0, r3
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	200097a4 	.word	0x200097a4
 800b040:	0800bb10 	.word	0x0800bb10

0800b044 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	4603      	mov	r3, r0
 800b04c:	6039      	str	r1, [r7, #0]
 800b04e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	220c      	movs	r2, #12
 800b054:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b056:	4b03      	ldr	r3, [pc, #12]	@ (800b064 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	200000ec 	.word	0x200000ec

0800b068 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b06e:	4b0f      	ldr	r3, [pc, #60]	@ (800b0ac <Get_SerialNum+0x44>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b074:	4b0e      	ldr	r3, [pc, #56]	@ (800b0b0 <Get_SerialNum+0x48>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b07a:	4b0e      	ldr	r3, [pc, #56]	@ (800b0b4 <Get_SerialNum+0x4c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4413      	add	r3, r2
 800b086:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d009      	beq.n	800b0a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b08e:	2208      	movs	r2, #8
 800b090:	4909      	ldr	r1, [pc, #36]	@ (800b0b8 <Get_SerialNum+0x50>)
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f000 f814 	bl	800b0c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b098:	2204      	movs	r2, #4
 800b09a:	4908      	ldr	r1, [pc, #32]	@ (800b0bc <Get_SerialNum+0x54>)
 800b09c:	68b8      	ldr	r0, [r7, #8]
 800b09e:	f000 f80f 	bl	800b0c0 <IntToUnicode>
  }
}
 800b0a2:	bf00      	nop
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	1ff0f420 	.word	0x1ff0f420
 800b0b0:	1ff0f424 	.word	0x1ff0f424
 800b0b4:	1ff0f428 	.word	0x1ff0f428
 800b0b8:	200000fe 	.word	0x200000fe
 800b0bc:	2000010e 	.word	0x2000010e

0800b0c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	75fb      	strb	r3, [r7, #23]
 800b0d6:	e027      	b.n	800b128 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	0f1b      	lsrs	r3, r3, #28
 800b0dc:	2b09      	cmp	r3, #9
 800b0de:	d80b      	bhi.n	800b0f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	0f1b      	lsrs	r3, r3, #28
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	7dfb      	ldrb	r3, [r7, #23]
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	440b      	add	r3, r1
 800b0f0:	3230      	adds	r2, #48	@ 0x30
 800b0f2:	b2d2      	uxtb	r2, r2
 800b0f4:	701a      	strb	r2, [r3, #0]
 800b0f6:	e00a      	b.n	800b10e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	0f1b      	lsrs	r3, r3, #28
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	005b      	lsls	r3, r3, #1
 800b102:	4619      	mov	r1, r3
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	440b      	add	r3, r1
 800b108:	3237      	adds	r2, #55	@ 0x37
 800b10a:	b2d2      	uxtb	r2, r2
 800b10c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	011b      	lsls	r3, r3, #4
 800b112:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b114:	7dfb      	ldrb	r3, [r7, #23]
 800b116:	005b      	lsls	r3, r3, #1
 800b118:	3301      	adds	r3, #1
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	4413      	add	r3, r2
 800b11e:	2200      	movs	r2, #0
 800b120:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b122:	7dfb      	ldrb	r3, [r7, #23]
 800b124:	3301      	adds	r3, #1
 800b126:	75fb      	strb	r3, [r7, #23]
 800b128:	7dfa      	ldrb	r2, [r7, #23]
 800b12a:	79fb      	ldrb	r3, [r7, #7]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d3d3      	bcc.n	800b0d8 <IntToUnicode+0x18>
  }
}
 800b130:	bf00      	nop
 800b132:	bf00      	nop
 800b134:	371c      	adds	r7, #28
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
	...

0800b140 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b0ae      	sub	sp, #184	@ 0xb8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b148:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b14c:	2200      	movs	r2, #0
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	605a      	str	r2, [r3, #4]
 800b152:	609a      	str	r2, [r3, #8]
 800b154:	60da      	str	r2, [r3, #12]
 800b156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b158:	f107 0314 	add.w	r3, r7, #20
 800b15c:	2290      	movs	r2, #144	@ 0x90
 800b15e:	2100      	movs	r1, #0
 800b160:	4618      	mov	r0, r3
 800b162:	f000 fc19 	bl	800b998 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b16e:	d151      	bne.n	800b214 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b170:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b174:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800b176:	2300      	movs	r3, #0
 800b178:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b17c:	f107 0314 	add.w	r3, r7, #20
 800b180:	4618      	mov	r0, r3
 800b182:	f7fa fc29 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d001      	beq.n	800b190 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b18c:	f7f5 ffc8 	bl	8001120 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b190:	4b22      	ldr	r3, [pc, #136]	@ (800b21c <HAL_PCD_MspInit+0xdc>)
 800b192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b194:	4a21      	ldr	r2, [pc, #132]	@ (800b21c <HAL_PCD_MspInit+0xdc>)
 800b196:	f043 0301 	orr.w	r3, r3, #1
 800b19a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b19c:	4b1f      	ldr	r3, [pc, #124]	@ (800b21c <HAL_PCD_MspInit+0xdc>)
 800b19e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	613b      	str	r3, [r7, #16]
 800b1a6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b1a8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b1ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b1c2:	230a      	movs	r3, #10
 800b1c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	4814      	ldr	r0, [pc, #80]	@ (800b220 <HAL_PCD_MspInit+0xe0>)
 800b1d0:	f7f7 fe2a 	bl	8002e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b1d4:	4b11      	ldr	r3, [pc, #68]	@ (800b21c <HAL_PCD_MspInit+0xdc>)
 800b1d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1d8:	4a10      	ldr	r2, [pc, #64]	@ (800b21c <HAL_PCD_MspInit+0xdc>)
 800b1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1de:	6353      	str	r3, [r2, #52]	@ 0x34
 800b1e0:	4b0e      	ldr	r3, [pc, #56]	@ (800b21c <HAL_PCD_MspInit+0xdc>)
 800b1e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b21c <HAL_PCD_MspInit+0xdc>)
 800b1ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1f0:	4a0a      	ldr	r2, [pc, #40]	@ (800b21c <HAL_PCD_MspInit+0xdc>)
 800b1f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b1f6:	6453      	str	r3, [r2, #68]	@ 0x44
 800b1f8:	4b08      	ldr	r3, [pc, #32]	@ (800b21c <HAL_PCD_MspInit+0xdc>)
 800b1fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b200:	60bb      	str	r3, [r7, #8]
 800b202:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 800b204:	2200      	movs	r2, #0
 800b206:	2102      	movs	r1, #2
 800b208:	2043      	movs	r0, #67	@ 0x43
 800b20a:	f7f7 f976 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b20e:	2043      	movs	r0, #67	@ 0x43
 800b210:	f7f7 f98f 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b214:	bf00      	nop
 800b216:	37b8      	adds	r7, #184	@ 0xb8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	40023800 	.word	0x40023800
 800b220:	40020000 	.word	0x40020000

0800b224 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b238:	4619      	mov	r1, r3
 800b23a:	4610      	mov	r0, r2
 800b23c:	f7fe faa5 	bl	800978a <USBD_LL_SetupStage>
}
 800b240:	bf00      	nop
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	460b      	mov	r3, r1
 800b252:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800b25a:	78fa      	ldrb	r2, [r7, #3]
 800b25c:	6879      	ldr	r1, [r7, #4]
 800b25e:	4613      	mov	r3, r2
 800b260:	00db      	lsls	r3, r3, #3
 800b262:	4413      	add	r3, r2
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	440b      	add	r3, r1
 800b268:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	78fb      	ldrb	r3, [r7, #3]
 800b270:	4619      	mov	r1, r3
 800b272:	f7fe fadf 	bl	8009834 <USBD_LL_DataOutStage>
}
 800b276:	bf00      	nop
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b082      	sub	sp, #8
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
 800b286:	460b      	mov	r3, r1
 800b288:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800b290:	78fa      	ldrb	r2, [r7, #3]
 800b292:	6879      	ldr	r1, [r7, #4]
 800b294:	4613      	mov	r3, r2
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	4413      	add	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	440b      	add	r3, r1
 800b29e:	3320      	adds	r3, #32
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	78fb      	ldrb	r3, [r7, #3]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	f7fe fb78 	bl	800999a <USBD_LL_DataInStage>
}
 800b2aa:	bf00      	nop
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fe fcb2 	bl	8009c2a <USBD_LL_SOF>
}
 800b2c6:	bf00      	nop
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	79db      	ldrb	r3, [r3, #7]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d102      	bne.n	800b2e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	73fb      	strb	r3, [r7, #15]
 800b2e6:	e008      	b.n	800b2fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	79db      	ldrb	r3, [r3, #7]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d102      	bne.n	800b2f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	73fb      	strb	r3, [r7, #15]
 800b2f4:	e001      	b.n	800b2fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b2f6:	f7f5 ff13 	bl	8001120 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800b300:	7bfa      	ldrb	r2, [r7, #15]
 800b302:	4611      	mov	r1, r2
 800b304:	4618      	mov	r0, r3
 800b306:	f7fe fc4c 	bl	8009ba2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800b310:	4618      	mov	r0, r3
 800b312:	f7fe fbf4 	bl	8009afe <USBD_LL_Reset>
}
 800b316:	bf00      	nop
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
	...

0800b320 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fe fc47 	bl	8009bc2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	6812      	ldr	r2, [r2, #0]
 800b342:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b346:	f043 0301 	orr.w	r3, r3, #1
 800b34a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	7adb      	ldrb	r3, [r3, #11]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d005      	beq.n	800b360 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b354:	4b04      	ldr	r3, [pc, #16]	@ (800b368 <HAL_PCD_SuspendCallback+0x48>)
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	4a03      	ldr	r2, [pc, #12]	@ (800b368 <HAL_PCD_SuspendCallback+0x48>)
 800b35a:	f043 0306 	orr.w	r3, r3, #6
 800b35e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	e000ed00 	.word	0xe000ed00

0800b36c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe fc3d 	bl	8009bfa <USBD_LL_Resume>
}
 800b380:	bf00      	nop
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	460b      	mov	r3, r1
 800b392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800b39a:	78fa      	ldrb	r2, [r7, #3]
 800b39c:	4611      	mov	r1, r2
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fe fc95 	bl	8009cce <USBD_LL_IsoOUTIncomplete>
}
 800b3a4:	bf00      	nop
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800b3be:	78fa      	ldrb	r2, [r7, #3]
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fe fc51 	bl	8009c6a <USBD_LL_IsoINIncomplete>
}
 800b3c8:	bf00      	nop
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fe fca7 	bl	8009d32 <USBD_LL_DevConnected>
}
 800b3e4:	bf00      	nop
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fe fca4 	bl	8009d48 <USBD_LL_DevDisconnected>
}
 800b400:	bf00      	nop
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d13c      	bne.n	800b492 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b418:	4a20      	ldr	r2, [pc, #128]	@ (800b49c <USBD_LL_Init+0x94>)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a1e      	ldr	r2, [pc, #120]	@ (800b49c <USBD_LL_Init+0x94>)
 800b424:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b428:	4b1c      	ldr	r3, [pc, #112]	@ (800b49c <USBD_LL_Init+0x94>)
 800b42a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b42e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b430:	4b1a      	ldr	r3, [pc, #104]	@ (800b49c <USBD_LL_Init+0x94>)
 800b432:	2206      	movs	r2, #6
 800b434:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b436:	4b19      	ldr	r3, [pc, #100]	@ (800b49c <USBD_LL_Init+0x94>)
 800b438:	2202      	movs	r2, #2
 800b43a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b43c:	4b17      	ldr	r3, [pc, #92]	@ (800b49c <USBD_LL_Init+0x94>)
 800b43e:	2200      	movs	r2, #0
 800b440:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b442:	4b16      	ldr	r3, [pc, #88]	@ (800b49c <USBD_LL_Init+0x94>)
 800b444:	2202      	movs	r2, #2
 800b446:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b448:	4b14      	ldr	r3, [pc, #80]	@ (800b49c <USBD_LL_Init+0x94>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b44e:	4b13      	ldr	r3, [pc, #76]	@ (800b49c <USBD_LL_Init+0x94>)
 800b450:	2200      	movs	r2, #0
 800b452:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b454:	4b11      	ldr	r3, [pc, #68]	@ (800b49c <USBD_LL_Init+0x94>)
 800b456:	2200      	movs	r2, #0
 800b458:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b45a:	4b10      	ldr	r3, [pc, #64]	@ (800b49c <USBD_LL_Init+0x94>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b460:	4b0e      	ldr	r3, [pc, #56]	@ (800b49c <USBD_LL_Init+0x94>)
 800b462:	2200      	movs	r2, #0
 800b464:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b466:	480d      	ldr	r0, [pc, #52]	@ (800b49c <USBD_LL_Init+0x94>)
 800b468:	f7f8 fb71 	bl	8003b4e <HAL_PCD_Init>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b472:	f7f5 fe55 	bl	8001120 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b476:	2180      	movs	r1, #128	@ 0x80
 800b478:	4808      	ldr	r0, [pc, #32]	@ (800b49c <USBD_LL_Init+0x94>)
 800b47a:	f7f9 fdbc 	bl	8004ff6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b47e:	2240      	movs	r2, #64	@ 0x40
 800b480:	2100      	movs	r1, #0
 800b482:	4806      	ldr	r0, [pc, #24]	@ (800b49c <USBD_LL_Init+0x94>)
 800b484:	f7f9 fd70 	bl	8004f68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b488:	2280      	movs	r2, #128	@ 0x80
 800b48a:	2101      	movs	r1, #1
 800b48c:	4803      	ldr	r0, [pc, #12]	@ (800b49c <USBD_LL_Init+0x94>)
 800b48e:	f7f9 fd6b 	bl	8004f68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	200099a4 	.word	0x200099a4

0800b4a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7f8 fc5f 	bl	8003d7a <HAL_PCD_Start>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 f97e 	bl	800b7c4 <USBD_Get_USB_Status>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b084      	sub	sp, #16
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	4608      	mov	r0, r1
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	70fb      	strb	r3, [r7, #3]
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	70bb      	strb	r3, [r7, #2]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b4fe:	78bb      	ldrb	r3, [r7, #2]
 800b500:	883a      	ldrh	r2, [r7, #0]
 800b502:	78f9      	ldrb	r1, [r7, #3]
 800b504:	f7f9 f94d 	bl	80047a2 <HAL_PCD_EP_Open>
 800b508:	4603      	mov	r3, r0
 800b50a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 f958 	bl	800b7c4 <USBD_Get_USB_Status>
 800b514:	4603      	mov	r3, r0
 800b516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b518:	7bbb      	ldrb	r3, [r7, #14]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b084      	sub	sp, #16
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	460b      	mov	r3, r1
 800b52c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b53c:	78fa      	ldrb	r2, [r7, #3]
 800b53e:	4611      	mov	r1, r2
 800b540:	4618      	mov	r0, r3
 800b542:	f7f9 f996 	bl	8004872 <HAL_PCD_EP_Close>
 800b546:	4603      	mov	r3, r0
 800b548:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f000 f939 	bl	800b7c4 <USBD_Get_USB_Status>
 800b552:	4603      	mov	r3, r0
 800b554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b556:	7bbb      	ldrb	r3, [r7, #14]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	460b      	mov	r3, r1
 800b56a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b57a:	78fa      	ldrb	r2, [r7, #3]
 800b57c:	4611      	mov	r1, r2
 800b57e:	4618      	mov	r0, r3
 800b580:	f7f9 fa4e 	bl	8004a20 <HAL_PCD_EP_SetStall>
 800b584:	4603      	mov	r3, r0
 800b586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 f91a 	bl	800b7c4 <USBD_Get_USB_Status>
 800b590:	4603      	mov	r3, r0
 800b592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b594:	7bbb      	ldrb	r3, [r7, #14]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b084      	sub	sp, #16
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5b8:	78fa      	ldrb	r2, [r7, #3]
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7f9 fa92 	bl	8004ae6 <HAL_PCD_EP_ClrStall>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 f8fb 	bl	800b7c4 <USBD_Get_USB_Status>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b5f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	da0b      	bge.n	800b610 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b5f8:	78fb      	ldrb	r3, [r7, #3]
 800b5fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5fe:	68f9      	ldr	r1, [r7, #12]
 800b600:	4613      	mov	r3, r2
 800b602:	00db      	lsls	r3, r3, #3
 800b604:	4413      	add	r3, r2
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	440b      	add	r3, r1
 800b60a:	3316      	adds	r3, #22
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	e00b      	b.n	800b628 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b610:	78fb      	ldrb	r3, [r7, #3]
 800b612:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b616:	68f9      	ldr	r1, [r7, #12]
 800b618:	4613      	mov	r3, r2
 800b61a:	00db      	lsls	r3, r3, #3
 800b61c:	4413      	add	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	440b      	add	r3, r1
 800b622:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b626:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	460b      	mov	r3, r1
 800b63e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b64e:	78fa      	ldrb	r2, [r7, #3]
 800b650:	4611      	mov	r1, r2
 800b652:	4618      	mov	r0, r3
 800b654:	f7f9 f881 	bl	800475a <HAL_PCD_SetAddress>
 800b658:	4603      	mov	r3, r0
 800b65a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
 800b65e:	4618      	mov	r0, r3
 800b660:	f000 f8b0 	bl	800b7c4 <USBD_Get_USB_Status>
 800b664:	4603      	mov	r3, r0
 800b666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b668:	7bbb      	ldrb	r3, [r7, #14]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b086      	sub	sp, #24
 800b676:	af00      	add	r7, sp, #0
 800b678:	60f8      	str	r0, [r7, #12]
 800b67a:	607a      	str	r2, [r7, #4]
 800b67c:	603b      	str	r3, [r7, #0]
 800b67e:	460b      	mov	r3, r1
 800b680:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b690:	7af9      	ldrb	r1, [r7, #11]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	f7f9 f989 	bl	80049ac <HAL_PCD_EP_Transmit>
 800b69a:	4603      	mov	r3, r0
 800b69c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b69e:	7dfb      	ldrb	r3, [r7, #23]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 f88f 	bl	800b7c4 <USBD_Get_USB_Status>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	607a      	str	r2, [r7, #4]
 800b6be:	603b      	str	r3, [r7, #0]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b6d2:	7af9      	ldrb	r1, [r7, #11]
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	f7f9 f915 	bl	8004906 <HAL_PCD_EP_Receive>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6e0:	7dfb      	ldrb	r3, [r7, #23]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 f86e 	bl	800b7c4 <USBD_Get_USB_Status>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b708:	78fa      	ldrb	r2, [r7, #3]
 800b70a:	4611      	mov	r1, r2
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7f9 f935 	bl	800497c <HAL_PCD_EP_GetRxCount>
 800b712:	4603      	mov	r3, r0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	460b      	mov	r3, r1
 800b726:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b728:	78fb      	ldrb	r3, [r7, #3]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <HAL_PCDEx_LPM_Callback+0x18>
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d01f      	beq.n	800b772 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b732:	e03b      	b.n	800b7ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	7adb      	ldrb	r3, [r3, #11]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d007      	beq.n	800b74c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b73c:	f000 f83c 	bl	800b7b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b740:	4b1c      	ldr	r3, [pc, #112]	@ (800b7b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	4a1b      	ldr	r2, [pc, #108]	@ (800b7b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b746:	f023 0306 	bic.w	r3, r3, #6
 800b74a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	6812      	ldr	r2, [r2, #0]
 800b75a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b75e:	f023 0301 	bic.w	r3, r3, #1
 800b762:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fe fa45 	bl	8009bfa <USBD_LL_Resume>
    break;
 800b770:	e01c      	b.n	800b7ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	6812      	ldr	r2, [r2, #0]
 800b780:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b784:	f043 0301 	orr.w	r3, r3, #1
 800b788:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800b790:	4618      	mov	r0, r3
 800b792:	f7fe fa16 	bl	8009bc2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	7adb      	ldrb	r3, [r3, #11]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d005      	beq.n	800b7aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b79e:	4b05      	ldr	r3, [pc, #20]	@ (800b7b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	4a04      	ldr	r2, [pc, #16]	@ (800b7b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b7a4:	f043 0306 	orr.w	r3, r3, #6
 800b7a8:	6113      	str	r3, [r2, #16]
    break;
 800b7aa:	bf00      	nop
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	e000ed00 	.word	0xe000ed00

0800b7b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b7bc:	f7f5 f852 	bl	8000864 <SystemClock_Config>
}
 800b7c0:	bf00      	nop
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b7d2:	79fb      	ldrb	r3, [r7, #7]
 800b7d4:	2b03      	cmp	r3, #3
 800b7d6:	d817      	bhi.n	800b808 <USBD_Get_USB_Status+0x44>
 800b7d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b7e0 <USBD_Get_USB_Status+0x1c>)
 800b7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7de:	bf00      	nop
 800b7e0:	0800b7f1 	.word	0x0800b7f1
 800b7e4:	0800b7f7 	.word	0x0800b7f7
 800b7e8:	0800b7fd 	.word	0x0800b7fd
 800b7ec:	0800b803 	.word	0x0800b803
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b7f4:	e00b      	b.n	800b80e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b7fa:	e008      	b.n	800b80e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b800:	e005      	b.n	800b80e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b802:	2303      	movs	r3, #3
 800b804:	73fb      	strb	r3, [r7, #15]
    break;
 800b806:	e002      	b.n	800b80e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b808:	2303      	movs	r3, #3
 800b80a:	73fb      	strb	r3, [r7, #15]
    break;
 800b80c:	bf00      	nop
  }
  return usb_status;
 800b80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b810:	4618      	mov	r0, r3
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <malloc>:
 800b81c:	4b02      	ldr	r3, [pc, #8]	@ (800b828 <malloc+0xc>)
 800b81e:	4601      	mov	r1, r0
 800b820:	6818      	ldr	r0, [r3, #0]
 800b822:	f000 b82d 	b.w	800b880 <_malloc_r>
 800b826:	bf00      	nop
 800b828:	20000118 	.word	0x20000118

0800b82c <free>:
 800b82c:	4b02      	ldr	r3, [pc, #8]	@ (800b838 <free+0xc>)
 800b82e:	4601      	mov	r1, r0
 800b830:	6818      	ldr	r0, [r3, #0]
 800b832:	f000 b8f5 	b.w	800ba20 <_free_r>
 800b836:	bf00      	nop
 800b838:	20000118 	.word	0x20000118

0800b83c <sbrk_aligned>:
 800b83c:	b570      	push	{r4, r5, r6, lr}
 800b83e:	4e0f      	ldr	r6, [pc, #60]	@ (800b87c <sbrk_aligned+0x40>)
 800b840:	460c      	mov	r4, r1
 800b842:	6831      	ldr	r1, [r6, #0]
 800b844:	4605      	mov	r5, r0
 800b846:	b911      	cbnz	r1, 800b84e <sbrk_aligned+0x12>
 800b848:	f000 f8ae 	bl	800b9a8 <_sbrk_r>
 800b84c:	6030      	str	r0, [r6, #0]
 800b84e:	4621      	mov	r1, r4
 800b850:	4628      	mov	r0, r5
 800b852:	f000 f8a9 	bl	800b9a8 <_sbrk_r>
 800b856:	1c43      	adds	r3, r0, #1
 800b858:	d103      	bne.n	800b862 <sbrk_aligned+0x26>
 800b85a:	f04f 34ff 	mov.w	r4, #4294967295
 800b85e:	4620      	mov	r0, r4
 800b860:	bd70      	pop	{r4, r5, r6, pc}
 800b862:	1cc4      	adds	r4, r0, #3
 800b864:	f024 0403 	bic.w	r4, r4, #3
 800b868:	42a0      	cmp	r0, r4
 800b86a:	d0f8      	beq.n	800b85e <sbrk_aligned+0x22>
 800b86c:	1a21      	subs	r1, r4, r0
 800b86e:	4628      	mov	r0, r5
 800b870:	f000 f89a 	bl	800b9a8 <_sbrk_r>
 800b874:	3001      	adds	r0, #1
 800b876:	d1f2      	bne.n	800b85e <sbrk_aligned+0x22>
 800b878:	e7ef      	b.n	800b85a <sbrk_aligned+0x1e>
 800b87a:	bf00      	nop
 800b87c:	20009e84 	.word	0x20009e84

0800b880 <_malloc_r>:
 800b880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b884:	1ccd      	adds	r5, r1, #3
 800b886:	f025 0503 	bic.w	r5, r5, #3
 800b88a:	3508      	adds	r5, #8
 800b88c:	2d0c      	cmp	r5, #12
 800b88e:	bf38      	it	cc
 800b890:	250c      	movcc	r5, #12
 800b892:	2d00      	cmp	r5, #0
 800b894:	4606      	mov	r6, r0
 800b896:	db01      	blt.n	800b89c <_malloc_r+0x1c>
 800b898:	42a9      	cmp	r1, r5
 800b89a:	d904      	bls.n	800b8a6 <_malloc_r+0x26>
 800b89c:	230c      	movs	r3, #12
 800b89e:	6033      	str	r3, [r6, #0]
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b97c <_malloc_r+0xfc>
 800b8aa:	f000 f869 	bl	800b980 <__malloc_lock>
 800b8ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b8b2:	461c      	mov	r4, r3
 800b8b4:	bb44      	cbnz	r4, 800b908 <_malloc_r+0x88>
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	f7ff ffbf 	bl	800b83c <sbrk_aligned>
 800b8be:	1c43      	adds	r3, r0, #1
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	d158      	bne.n	800b976 <_malloc_r+0xf6>
 800b8c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b8c8:	4627      	mov	r7, r4
 800b8ca:	2f00      	cmp	r7, #0
 800b8cc:	d143      	bne.n	800b956 <_malloc_r+0xd6>
 800b8ce:	2c00      	cmp	r4, #0
 800b8d0:	d04b      	beq.n	800b96a <_malloc_r+0xea>
 800b8d2:	6823      	ldr	r3, [r4, #0]
 800b8d4:	4639      	mov	r1, r7
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	eb04 0903 	add.w	r9, r4, r3
 800b8dc:	f000 f864 	bl	800b9a8 <_sbrk_r>
 800b8e0:	4581      	cmp	r9, r0
 800b8e2:	d142      	bne.n	800b96a <_malloc_r+0xea>
 800b8e4:	6821      	ldr	r1, [r4, #0]
 800b8e6:	1a6d      	subs	r5, r5, r1
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f7ff ffa6 	bl	800b83c <sbrk_aligned>
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	d03a      	beq.n	800b96a <_malloc_r+0xea>
 800b8f4:	6823      	ldr	r3, [r4, #0]
 800b8f6:	442b      	add	r3, r5
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b8fe:	685a      	ldr	r2, [r3, #4]
 800b900:	bb62      	cbnz	r2, 800b95c <_malloc_r+0xdc>
 800b902:	f8c8 7000 	str.w	r7, [r8]
 800b906:	e00f      	b.n	800b928 <_malloc_r+0xa8>
 800b908:	6822      	ldr	r2, [r4, #0]
 800b90a:	1b52      	subs	r2, r2, r5
 800b90c:	d420      	bmi.n	800b950 <_malloc_r+0xd0>
 800b90e:	2a0b      	cmp	r2, #11
 800b910:	d917      	bls.n	800b942 <_malloc_r+0xc2>
 800b912:	1961      	adds	r1, r4, r5
 800b914:	42a3      	cmp	r3, r4
 800b916:	6025      	str	r5, [r4, #0]
 800b918:	bf18      	it	ne
 800b91a:	6059      	strne	r1, [r3, #4]
 800b91c:	6863      	ldr	r3, [r4, #4]
 800b91e:	bf08      	it	eq
 800b920:	f8c8 1000 	streq.w	r1, [r8]
 800b924:	5162      	str	r2, [r4, r5]
 800b926:	604b      	str	r3, [r1, #4]
 800b928:	4630      	mov	r0, r6
 800b92a:	f000 f82f 	bl	800b98c <__malloc_unlock>
 800b92e:	f104 000b 	add.w	r0, r4, #11
 800b932:	1d23      	adds	r3, r4, #4
 800b934:	f020 0007 	bic.w	r0, r0, #7
 800b938:	1ac2      	subs	r2, r0, r3
 800b93a:	bf1c      	itt	ne
 800b93c:	1a1b      	subne	r3, r3, r0
 800b93e:	50a3      	strne	r3, [r4, r2]
 800b940:	e7af      	b.n	800b8a2 <_malloc_r+0x22>
 800b942:	6862      	ldr	r2, [r4, #4]
 800b944:	42a3      	cmp	r3, r4
 800b946:	bf0c      	ite	eq
 800b948:	f8c8 2000 	streq.w	r2, [r8]
 800b94c:	605a      	strne	r2, [r3, #4]
 800b94e:	e7eb      	b.n	800b928 <_malloc_r+0xa8>
 800b950:	4623      	mov	r3, r4
 800b952:	6864      	ldr	r4, [r4, #4]
 800b954:	e7ae      	b.n	800b8b4 <_malloc_r+0x34>
 800b956:	463c      	mov	r4, r7
 800b958:	687f      	ldr	r7, [r7, #4]
 800b95a:	e7b6      	b.n	800b8ca <_malloc_r+0x4a>
 800b95c:	461a      	mov	r2, r3
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	42a3      	cmp	r3, r4
 800b962:	d1fb      	bne.n	800b95c <_malloc_r+0xdc>
 800b964:	2300      	movs	r3, #0
 800b966:	6053      	str	r3, [r2, #4]
 800b968:	e7de      	b.n	800b928 <_malloc_r+0xa8>
 800b96a:	230c      	movs	r3, #12
 800b96c:	6033      	str	r3, [r6, #0]
 800b96e:	4630      	mov	r0, r6
 800b970:	f000 f80c 	bl	800b98c <__malloc_unlock>
 800b974:	e794      	b.n	800b8a0 <_malloc_r+0x20>
 800b976:	6005      	str	r5, [r0, #0]
 800b978:	e7d6      	b.n	800b928 <_malloc_r+0xa8>
 800b97a:	bf00      	nop
 800b97c:	20009e88 	.word	0x20009e88

0800b980 <__malloc_lock>:
 800b980:	4801      	ldr	r0, [pc, #4]	@ (800b988 <__malloc_lock+0x8>)
 800b982:	f000 b84b 	b.w	800ba1c <__retarget_lock_acquire_recursive>
 800b986:	bf00      	nop
 800b988:	20009fc8 	.word	0x20009fc8

0800b98c <__malloc_unlock>:
 800b98c:	4801      	ldr	r0, [pc, #4]	@ (800b994 <__malloc_unlock+0x8>)
 800b98e:	f000 b846 	b.w	800ba1e <__retarget_lock_release_recursive>
 800b992:	bf00      	nop
 800b994:	20009fc8 	.word	0x20009fc8

0800b998 <memset>:
 800b998:	4402      	add	r2, r0
 800b99a:	4603      	mov	r3, r0
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d100      	bne.n	800b9a2 <memset+0xa>
 800b9a0:	4770      	bx	lr
 800b9a2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9a6:	e7f9      	b.n	800b99c <memset+0x4>

0800b9a8 <_sbrk_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	4d06      	ldr	r5, [pc, #24]	@ (800b9c4 <_sbrk_r+0x1c>)
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	4608      	mov	r0, r1
 800b9b2:	602b      	str	r3, [r5, #0]
 800b9b4:	f7f5 fe32 	bl	800161c <_sbrk>
 800b9b8:	1c43      	adds	r3, r0, #1
 800b9ba:	d102      	bne.n	800b9c2 <_sbrk_r+0x1a>
 800b9bc:	682b      	ldr	r3, [r5, #0]
 800b9be:	b103      	cbz	r3, 800b9c2 <_sbrk_r+0x1a>
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}
 800b9c4:	20009fc4 	.word	0x20009fc4

0800b9c8 <__errno>:
 800b9c8:	4b01      	ldr	r3, [pc, #4]	@ (800b9d0 <__errno+0x8>)
 800b9ca:	6818      	ldr	r0, [r3, #0]
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	20000118 	.word	0x20000118

0800b9d4 <__libc_init_array>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	4d0d      	ldr	r5, [pc, #52]	@ (800ba0c <__libc_init_array+0x38>)
 800b9d8:	4c0d      	ldr	r4, [pc, #52]	@ (800ba10 <__libc_init_array+0x3c>)
 800b9da:	1b64      	subs	r4, r4, r5
 800b9dc:	10a4      	asrs	r4, r4, #2
 800b9de:	2600      	movs	r6, #0
 800b9e0:	42a6      	cmp	r6, r4
 800b9e2:	d109      	bne.n	800b9f8 <__libc_init_array+0x24>
 800b9e4:	4d0b      	ldr	r5, [pc, #44]	@ (800ba14 <__libc_init_array+0x40>)
 800b9e6:	4c0c      	ldr	r4, [pc, #48]	@ (800ba18 <__libc_init_array+0x44>)
 800b9e8:	f000 f864 	bl	800bab4 <_init>
 800b9ec:	1b64      	subs	r4, r4, r5
 800b9ee:	10a4      	asrs	r4, r4, #2
 800b9f0:	2600      	movs	r6, #0
 800b9f2:	42a6      	cmp	r6, r4
 800b9f4:	d105      	bne.n	800ba02 <__libc_init_array+0x2e>
 800b9f6:	bd70      	pop	{r4, r5, r6, pc}
 800b9f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9fc:	4798      	blx	r3
 800b9fe:	3601      	adds	r6, #1
 800ba00:	e7ee      	b.n	800b9e0 <__libc_init_array+0xc>
 800ba02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba06:	4798      	blx	r3
 800ba08:	3601      	adds	r6, #1
 800ba0a:	e7f2      	b.n	800b9f2 <__libc_init_array+0x1e>
 800ba0c:	0800bb40 	.word	0x0800bb40
 800ba10:	0800bb40 	.word	0x0800bb40
 800ba14:	0800bb40 	.word	0x0800bb40
 800ba18:	0800bb44 	.word	0x0800bb44

0800ba1c <__retarget_lock_acquire_recursive>:
 800ba1c:	4770      	bx	lr

0800ba1e <__retarget_lock_release_recursive>:
 800ba1e:	4770      	bx	lr

0800ba20 <_free_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4605      	mov	r5, r0
 800ba24:	2900      	cmp	r1, #0
 800ba26:	d041      	beq.n	800baac <_free_r+0x8c>
 800ba28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba2c:	1f0c      	subs	r4, r1, #4
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	bfb8      	it	lt
 800ba32:	18e4      	addlt	r4, r4, r3
 800ba34:	f7ff ffa4 	bl	800b980 <__malloc_lock>
 800ba38:	4a1d      	ldr	r2, [pc, #116]	@ (800bab0 <_free_r+0x90>)
 800ba3a:	6813      	ldr	r3, [r2, #0]
 800ba3c:	b933      	cbnz	r3, 800ba4c <_free_r+0x2c>
 800ba3e:	6063      	str	r3, [r4, #4]
 800ba40:	6014      	str	r4, [r2, #0]
 800ba42:	4628      	mov	r0, r5
 800ba44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba48:	f7ff bfa0 	b.w	800b98c <__malloc_unlock>
 800ba4c:	42a3      	cmp	r3, r4
 800ba4e:	d908      	bls.n	800ba62 <_free_r+0x42>
 800ba50:	6820      	ldr	r0, [r4, #0]
 800ba52:	1821      	adds	r1, r4, r0
 800ba54:	428b      	cmp	r3, r1
 800ba56:	bf01      	itttt	eq
 800ba58:	6819      	ldreq	r1, [r3, #0]
 800ba5a:	685b      	ldreq	r3, [r3, #4]
 800ba5c:	1809      	addeq	r1, r1, r0
 800ba5e:	6021      	streq	r1, [r4, #0]
 800ba60:	e7ed      	b.n	800ba3e <_free_r+0x1e>
 800ba62:	461a      	mov	r2, r3
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	b10b      	cbz	r3, 800ba6c <_free_r+0x4c>
 800ba68:	42a3      	cmp	r3, r4
 800ba6a:	d9fa      	bls.n	800ba62 <_free_r+0x42>
 800ba6c:	6811      	ldr	r1, [r2, #0]
 800ba6e:	1850      	adds	r0, r2, r1
 800ba70:	42a0      	cmp	r0, r4
 800ba72:	d10b      	bne.n	800ba8c <_free_r+0x6c>
 800ba74:	6820      	ldr	r0, [r4, #0]
 800ba76:	4401      	add	r1, r0
 800ba78:	1850      	adds	r0, r2, r1
 800ba7a:	4283      	cmp	r3, r0
 800ba7c:	6011      	str	r1, [r2, #0]
 800ba7e:	d1e0      	bne.n	800ba42 <_free_r+0x22>
 800ba80:	6818      	ldr	r0, [r3, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	6053      	str	r3, [r2, #4]
 800ba86:	4408      	add	r0, r1
 800ba88:	6010      	str	r0, [r2, #0]
 800ba8a:	e7da      	b.n	800ba42 <_free_r+0x22>
 800ba8c:	d902      	bls.n	800ba94 <_free_r+0x74>
 800ba8e:	230c      	movs	r3, #12
 800ba90:	602b      	str	r3, [r5, #0]
 800ba92:	e7d6      	b.n	800ba42 <_free_r+0x22>
 800ba94:	6820      	ldr	r0, [r4, #0]
 800ba96:	1821      	adds	r1, r4, r0
 800ba98:	428b      	cmp	r3, r1
 800ba9a:	bf04      	itt	eq
 800ba9c:	6819      	ldreq	r1, [r3, #0]
 800ba9e:	685b      	ldreq	r3, [r3, #4]
 800baa0:	6063      	str	r3, [r4, #4]
 800baa2:	bf04      	itt	eq
 800baa4:	1809      	addeq	r1, r1, r0
 800baa6:	6021      	streq	r1, [r4, #0]
 800baa8:	6054      	str	r4, [r2, #4]
 800baaa:	e7ca      	b.n	800ba42 <_free_r+0x22>
 800baac:	bd38      	pop	{r3, r4, r5, pc}
 800baae:	bf00      	nop
 800bab0:	20009e88 	.word	0x20009e88

0800bab4 <_init>:
 800bab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab6:	bf00      	nop
 800bab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baba:	bc08      	pop	{r3}
 800babc:	469e      	mov	lr, r3
 800babe:	4770      	bx	lr

0800bac0 <_fini>:
 800bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac2:	bf00      	nop
 800bac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bac6:	bc08      	pop	{r3}
 800bac8:	469e      	mov	lr, r3
 800baca:	4770      	bx	lr
